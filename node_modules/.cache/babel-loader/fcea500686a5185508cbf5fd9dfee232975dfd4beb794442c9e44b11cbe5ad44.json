{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\n// src/tasks/index.ts\nvar tasks_exports = {};\n__export(tasks_exports, {\n  audioClassification: () => audioClassification,\n  audioToAudio: () => audioToAudio,\n  automaticSpeechRecognition: () => automaticSpeechRecognition,\n  chatCompletion: () => chatCompletion,\n  chatCompletionStream: () => chatCompletionStream,\n  documentQuestionAnswering: () => documentQuestionAnswering,\n  featureExtraction: () => featureExtraction,\n  fillMask: () => fillMask,\n  imageClassification: () => imageClassification,\n  imageSegmentation: () => imageSegmentation,\n  imageToImage: () => imageToImage,\n  imageToText: () => imageToText,\n  objectDetection: () => objectDetection,\n  questionAnswering: () => questionAnswering,\n  request: () => request,\n  sentenceSimilarity: () => sentenceSimilarity,\n  streamingRequest: () => streamingRequest,\n  summarization: () => summarization,\n  tableQuestionAnswering: () => tableQuestionAnswering,\n  tabularClassification: () => tabularClassification,\n  tabularRegression: () => tabularRegression,\n  textClassification: () => textClassification,\n  textGeneration: () => textGeneration,\n  textGenerationStream: () => textGenerationStream,\n  textToImage: () => textToImage,\n  textToSpeech: () => textToSpeech,\n  tokenClassification: () => tokenClassification,\n  translation: () => translation,\n  visualQuestionAnswering: () => visualQuestionAnswering,\n  zeroShotClassification: () => zeroShotClassification,\n  zeroShotImageClassification: () => zeroShotImageClassification\n});\n\n// src/utils/pick.ts\nfunction pick(o, props) {\n  return Object.assign({}, ...props.map(prop => {\n    if (o[prop] !== void 0) {\n      return {\n        [prop]: o[prop]\n      };\n    }\n  }));\n}\n\n// src/utils/typedInclude.ts\nfunction typedInclude(arr, v) {\n  return arr.includes(v);\n}\n\n// src/utils/omit.ts\nfunction omit(o, props) {\n  const propsArr = Array.isArray(props) ? props : [props];\n  const letsKeep = Object.keys(o).filter(prop => !typedInclude(propsArr, prop));\n  return pick(o, letsKeep);\n}\n\n// src/lib/isUrl.ts\nfunction isUrl(modelOrUrl) {\n  return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\n}\n\n// src/lib/getDefaultTask.ts\nvar taskCache = /* @__PURE__ */new Map();\nvar CACHE_DURATION = 10 * 60 * 1e3;\nvar MAX_CACHE_ITEMS = 1e3;\nvar HF_HUB_URL = \"https://huggingface.co\";\nasync function getDefaultTask(model, accessToken, options) {\n  if (isUrl(model)) {\n    return null;\n  }\n  const key = `${model}:${accessToken}`;\n  let cachedTask = taskCache.get(key);\n  if (cachedTask && cachedTask.date < new Date(Date.now() - CACHE_DURATION)) {\n    taskCache.delete(key);\n    cachedTask = void 0;\n  }\n  if (cachedTask === void 0) {\n    const modelTask = await (options?.fetch ?? fetch)(`${HF_HUB_URL}/api/models/${model}?expand[]=pipeline_tag`, {\n      headers: accessToken ? {\n        Authorization: `Bearer ${accessToken}`\n      } : {}\n    }).then(resp => resp.json()).then(json => json.pipeline_tag).catch(() => null);\n    if (!modelTask) {\n      return null;\n    }\n    cachedTask = {\n      task: modelTask,\n      date: /* @__PURE__ */new Date()\n    };\n    taskCache.set(key, {\n      task: modelTask,\n      date: /* @__PURE__ */new Date()\n    });\n    if (taskCache.size > MAX_CACHE_ITEMS) {\n      taskCache.delete(taskCache.keys().next().value);\n    }\n  }\n  return cachedTask.task;\n}\n\n// src/lib/makeRequestOptions.ts\nvar HF_INFERENCE_API_BASE_URL = \"https://api-inference.huggingface.co\";\nvar tasks = null;\nasync function makeRequestOptions(args, options) {\n  const {\n    accessToken,\n    endpointUrl,\n    ...otherArgs\n  } = args;\n  let {\n    model\n  } = args;\n  const {\n    forceTask: task,\n    includeCredentials,\n    taskHint,\n    wait_for_model,\n    use_cache,\n    dont_load_model,\n    chatCompletion: chatCompletion2\n  } = options ?? {};\n  const headers = {};\n  if (accessToken) {\n    headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n  if (!model && !tasks && taskHint) {\n    const res = await fetch(`${HF_HUB_URL}/api/tasks`);\n    if (res.ok) {\n      tasks = await res.json();\n    }\n  }\n  if (!model && tasks && taskHint) {\n    const taskInfo = tasks[taskHint];\n    if (taskInfo) {\n      model = taskInfo.models[0].id;\n    }\n  }\n  if (!model) {\n    throw new Error(\"No model provided, and no default model found for this task\");\n  }\n  const binary = \"data\" in args && !!args.data;\n  if (!binary) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  if (wait_for_model) {\n    headers[\"X-Wait-For-Model\"] = \"true\";\n  }\n  if (use_cache === false) {\n    headers[\"X-Use-Cache\"] = \"false\";\n  }\n  if (dont_load_model) {\n    headers[\"X-Load-Model\"] = \"0\";\n  }\n  let url = (() => {\n    if (endpointUrl && isUrl(model)) {\n      throw new TypeError(\"Both model and endpointUrl cannot be URLs\");\n    }\n    if (isUrl(model)) {\n      console.warn(\"Using a model URL is deprecated, please use the `endpointUrl` parameter instead\");\n      return model;\n    }\n    if (endpointUrl) {\n      return endpointUrl;\n    }\n    if (task) {\n      return `${HF_INFERENCE_API_BASE_URL}/pipeline/${task}/${model}`;\n    }\n    return `${HF_INFERENCE_API_BASE_URL}/models/${model}`;\n  })();\n  if (chatCompletion2 && !url.endsWith(\"/chat/completions\")) {\n    url += \"/v1/chat/completions\";\n  }\n  let credentials;\n  if (typeof includeCredentials === \"string\") {\n    credentials = includeCredentials;\n  } else if (includeCredentials === true) {\n    credentials = \"include\";\n  }\n  const info = {\n    headers,\n    method: \"POST\",\n    body: binary ? args.data : JSON.stringify({\n      ...(otherArgs.model && isUrl(otherArgs.model) ? omit(otherArgs, \"model\") : otherArgs)\n    }),\n    ...(credentials && {\n      credentials\n    }),\n    signal: options?.signal\n  };\n  return {\n    url,\n    info\n  };\n}\n\n// src/tasks/custom/request.ts\nasync function request(args, options) {\n  const {\n    url,\n    info\n  } = await makeRequestOptions(args, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return request(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\n      }\n      if (output.error) {\n        throw new Error(JSON.stringify(output.error));\n      }\n    }\n    throw new Error(\"An error occurred while fetching the blob\");\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  return await response.blob();\n}\n\n// src/vendor/fetch-event-source/parse.ts\nfunction getLines(onLine) {\n  let buffer;\n  let position;\n  let fieldLength;\n  let discardTrailingNewline = false;\n  return function onChunk(arr) {\n    if (buffer === void 0) {\n      buffer = arr;\n      position = 0;\n      fieldLength = -1;\n    } else {\n      buffer = concat(buffer, arr);\n    }\n    const bufLength = buffer.length;\n    let lineStart = 0;\n    while (position < bufLength) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === 10 /* NewLine */) {\n          lineStart = ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineEnd = -1;\n      for (; position < bufLength && lineEnd === -1; ++position) {\n        switch (buffer[position]) {\n          case 58 /* Colon */:\n            if (fieldLength === -1) {\n              fieldLength = position - lineStart;\n            }\n            break;\n          case 13 /* CarriageReturn */:\n            discardTrailingNewline = true;\n          case 10 /* NewLine */:\n            lineEnd = position;\n            break;\n        }\n      }\n      if (lineEnd === -1) {\n        break;\n      }\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n      lineStart = position;\n      fieldLength = -1;\n    }\n    if (lineStart === bufLength) {\n      buffer = void 0;\n    } else if (lineStart !== 0) {\n      buffer = buffer.subarray(lineStart);\n      position -= lineStart;\n    }\n  };\n}\nfunction getMessages(onId, onRetry, onMessage) {\n  let message = newMessage();\n  const decoder = new TextDecoder();\n  return function onLine(line, fieldLength) {\n    if (line.length === 0) {\n      onMessage?.(message);\n      message = newMessage();\n    } else if (fieldLength > 0) {\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      switch (field) {\n        case \"data\":\n          message.data = message.data ? message.data + \"\\n\" + value : value;\n          break;\n        case \"event\":\n          message.event = value;\n          break;\n        case \"id\":\n          onId(message.id = value);\n          break;\n        case \"retry\":\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            onRetry(message.retry = retry);\n          }\n          break;\n      }\n    }\n  };\n}\nfunction concat(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction newMessage() {\n  return {\n    data: \"\",\n    event: \"\",\n    id: \"\",\n    retry: void 0\n  };\n}\n\n// src/tasks/custom/streamingRequest.ts\nasync function* streamingRequest(args, options) {\n  const {\n    url,\n    info\n  } = await makeRequestOptions({\n    ...args,\n    stream: true\n  }, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return yield* streamingRequest(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\n      }\n      if (output.error) {\n        throw new Error(output.error);\n      }\n    }\n    throw new Error(`Server response contains error: ${response.status}`);\n  }\n  if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) {\n    throw new Error(`Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\"));\n  }\n  if (!response.body) {\n    return;\n  }\n  const reader = response.body.getReader();\n  let events = [];\n  const onEvent = event => {\n    events.push(event);\n  };\n  const onChunk = getLines(getMessages(() => {}, () => {}, onEvent));\n  try {\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) return;\n      onChunk(value);\n      for (const event of events) {\n        if (event.data.length > 0) {\n          if (event.data === \"[DONE]\") {\n            return;\n          }\n          const data = JSON.parse(event.data);\n          if (typeof data === \"object\" && data !== null && \"error\" in data) {\n            throw new Error(data.error);\n          }\n          yield data;\n        }\n      }\n      events = [];\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// src/lib/InferenceOutputError.ts\nvar InferenceOutputError = class extends TypeError {\n  constructor(message) {\n    super(`Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`);\n    this.name = \"InferenceOutputError\";\n  }\n};\n\n// src/tasks/audio/audioClassification.ts\nasync function audioClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"audio-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/audio/automaticSpeechRecognition.ts\nasync function automaticSpeechRecognition(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"automatic-speech-recognition\"\n  });\n  const isValidOutput = typeof res?.text === \"string\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/audio/textToSpeech.ts\nasync function textToSpeech(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-to-speech\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/audio/audioToAudio.ts\nasync function audioToAudio(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"audio-to-audio\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.blob === \"string\" && typeof x[\"content-type\"] === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, blob: string, content-type: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageClassification.ts\nasync function imageClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageSegmentation.ts\nasync function imageSegmentation(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"image-segmentation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, mask: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToText.ts\nasync function imageToText(args, options) {\n  const res = (await request(args, {\n    ...options,\n    taskHint: \"image-to-text\"\n  }))?.[0];\n  if (typeof res?.generated_text !== \"string\") {\n    throw new InferenceOutputError(\"Expected {generated_text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/cv/objectDetection.ts\nasync function objectDetection(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"object-detection\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/textToImage.ts\nasync function textToImage(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/utils/base64FromBytes.ts\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    const bin = [];\n    arr.forEach(byte => {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\n\n// src/tasks/cv/imageToImage.ts\nasync function imageToImage(args, options) {\n  let reqArgs;\n  if (!args.parameters) {\n    reqArgs = {\n      accessToken: args.accessToken,\n      model: args.model,\n      data: args.inputs\n    };\n  } else {\n    reqArgs = {\n      ...args,\n      inputs: base64FromBytes(new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer()))\n    };\n  }\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"image-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/zeroShotImageClassification.ts\nasync function zeroShotImageClassification(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      image: base64FromBytes(new Uint8Array(args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"zero-shot-image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/featureExtraction.ts\nasync function featureExtraction(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(args, {\n    ...options,\n    taskHint: \"feature-extraction\",\n    ...(defaultTask === \"sentence-similarity\" && {\n      forceTask: \"feature-extraction\"\n    })\n  });\n  let isValidOutput = true;\n  const isNumArrayRec = (arr, maxDepth, curDepth = 0) => {\n    if (curDepth > maxDepth) return false;\n    if (arr.every(x => Array.isArray(x))) {\n      return arr.every(x => isNumArrayRec(x, maxDepth, curDepth + 1));\n    } else {\n      return arr.every(x => typeof x === \"number\");\n    }\n  };\n  isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<number[][][] | number[][] | number[] | number>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/fillMask.ts\nasync function fillMask(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"fill-mask\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/questionAnswering.ts\nasync function questionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"question-answering\"\n  });\n  const isValidOutput = typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {answer: string, end: number, score: number, start: number}\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/sentenceSimilarity.ts\nasync function sentenceSimilarity(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(args, {\n    ...options,\n    taskHint: \"sentence-similarity\",\n    ...(defaultTask === \"feature-extraction\" && {\n      forceTask: \"sentence-similarity\"\n    })\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/summarization.ts\nasync function summarization(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"summarization\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x?.summary_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{summary_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/tableQuestionAnswering.ts\nasync function tableQuestionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"table-question-answering\"\n  });\n  const isValidOutput = typeof res?.aggregator === \"string\" && typeof res.answer === \"string\" && Array.isArray(res.cells) && res.cells.every(x => typeof x === \"string\") && Array.isArray(res.coordinates) && res.coordinates.every(coord => Array.isArray(coord) && coord.every(x => typeof x === \"number\"));\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/textClassification.ts\nasync function textClassification(args, options) {\n  const res = (await request(args, {\n    ...options,\n    taskHint: \"text-classification\"\n  }))?.[0];\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x?.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/toArray.ts\nfunction toArray(obj) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\n\n// src/tasks/nlp/textGeneration.ts\nasync function textGeneration(args, options) {\n  const res = toArray(await request(args, {\n    ...options,\n    taskHint: \"text-generation\"\n  }));\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x?.generated_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{generated_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/textGenerationStream.ts\nasync function* textGenerationStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    taskHint: \"text-generation\"\n  });\n}\n\n// src/tasks/nlp/tokenClassification.ts\nasync function tokenClassification(args, options) {\n  const res = toArray(await request(args, {\n    ...options,\n    taskHint: \"token-classification\"\n  }));\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/translation.ts\nasync function translation(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"translation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x?.translation_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected type Array<{translation_text: string}>\");\n  }\n  return res?.length === 1 ? res?.[0] : res;\n}\n\n// src/tasks/nlp/zeroShotClassification.ts\nasync function zeroShotClassification(args, options) {\n  const res = toArray(await request(args, {\n    ...options,\n    taskHint: \"zero-shot-classification\"\n  }));\n  const isValidOutput = Array.isArray(res) && res.every(x => Array.isArray(x.labels) && x.labels.every(_label => typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every(_score => typeof _score === \"number\") && typeof x.sequence === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletion.ts\nasync function chatCompletion(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-generation\",\n    chatCompletion: true\n  });\n  const isValidOutput = typeof res === \"object\" && Array.isArray(res?.choices) && typeof res?.created === \"number\" && typeof res?.id === \"string\" && typeof res?.model === \"string\" && typeof res?.system_fingerprint === \"string\" && typeof res?.usage === \"object\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletionStream.ts\nasync function* chatCompletionStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    taskHint: \"text-generation\",\n    chatCompletion: true\n  });\n}\n\n// src/tasks/multimodal/documentQuestionAnswering.ts\nasync function documentQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = toArray(await request(reqArgs, {\n    ...options,\n    taskHint: \"document-question-answering\"\n  }))?.[0];\n  const isValidOutput = typeof res?.answer === \"string\" && (typeof res.end === \"number\" || typeof res.end === \"undefined\") && (typeof res.score === \"number\" || typeof res.score === \"undefined\") && (typeof res.start === \"number\" || typeof res.start === \"undefined\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/multimodal/visualQuestionAnswering.ts\nasync function visualQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = (await request(reqArgs, {\n    ...options,\n    taskHint: \"visual-question-answering\"\n  }))?.[0];\n  const isValidOutput = typeof res?.answer === \"string\" && typeof res.score === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularRegression.ts\nasync function tabularRegression(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-regression\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularClassification.ts\nasync function tabularClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/HfInference.ts\nvar HfInference = class {\n  accessToken;\n  defaultOptions;\n  constructor(accessToken = \"\", defaultOptions = {}) {\n    this.accessToken = accessToken;\n    this.defaultOptions = defaultOptions;\n    for (const [name, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name, {\n        enumerable: false,\n        value: (params, options) =>\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fn({\n          ...params,\n          accessToken\n        }, {\n          ...defaultOptions,\n          ...options\n        })\n      });\n    }\n  }\n  /**\n   * Returns copy of HfInference tied to a specified endpoint.\n   */\n  endpoint(endpointUrl) {\n    return new HfInferenceEndpoint(endpointUrl, this.accessToken, this.defaultOptions);\n  }\n};\nvar HfInferenceEndpoint = class {\n  constructor(endpointUrl, accessToken = \"\", defaultOptions = {}) {\n    accessToken;\n    defaultOptions;\n    for (const [name, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name, {\n        enumerable: false,\n        value: (params, options) =>\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fn({\n          ...params,\n          accessToken,\n          endpointUrl\n        }, {\n          ...defaultOptions,\n          ...options\n        })\n      });\n    }\n  }\n};\nexport { HfInference, HfInferenceEndpoint, InferenceOutputError, audioClassification, audioToAudio, automaticSpeechRecognition, chatCompletion, chatCompletionStream, documentQuestionAnswering, featureExtraction, fillMask, imageClassification, imageSegmentation, imageToImage, imageToText, objectDetection, questionAnswering, request, sentenceSimilarity, streamingRequest, summarization, tableQuestionAnswering, tabularClassification, tabularRegression, textClassification, textGeneration, textGenerationStream, textToImage, textToSpeech, tokenClassification, translation, visualQuestionAnswering, zeroShotClassification, zeroShotImageClassification };","map":{"version":3,"names":["__defProp","Object","defineProperty","__export","target","all","name","get","enumerable","tasks_exports","audioClassification","audioToAudio","automaticSpeechRecognition","chatCompletion","chatCompletionStream","documentQuestionAnswering","featureExtraction","fillMask","imageClassification","imageSegmentation","imageToImage","imageToText","objectDetection","questionAnswering","request","sentenceSimilarity","streamingRequest","summarization","tableQuestionAnswering","tabularClassification","tabularRegression","textClassification","textGeneration","textGenerationStream","textToImage","textToSpeech","tokenClassification","translation","visualQuestionAnswering","zeroShotClassification","zeroShotImageClassification","pick","o","props","assign","map","prop","typedInclude","arr","v","includes","omit","propsArr","Array","isArray","letsKeep","keys","filter","isUrl","modelOrUrl","test","startsWith","taskCache","Map","CACHE_DURATION","MAX_CACHE_ITEMS","HF_HUB_URL","getDefaultTask","model","accessToken","options","key","cachedTask","date","Date","now","delete","modelTask","fetch","headers","Authorization","then","resp","json","pipeline_tag","catch","task","set","size","next","value","HF_INFERENCE_API_BASE_URL","tasks","makeRequestOptions","args","endpointUrl","otherArgs","forceTask","includeCredentials","taskHint","wait_for_model","use_cache","dont_load_model","chatCompletion2","res","ok","taskInfo","models","id","Error","binary","data","url","TypeError","console","warn","endsWith","credentials","info","method","body","JSON","stringify","signal","response","retry_on_error","status","output","error","blob","getLines","onLine","buffer","position","fieldLength","discardTrailingNewline","onChunk","concat","bufLength","length","lineStart","lineEnd","subarray","getMessages","onId","onRetry","onMessage","message","newMessage","decoder","TextDecoder","line","field","decode","valueOffset","event","retry","parseInt","isNaN","a","b","Uint8Array","stream","reader","getReader","events","onEvent","push","done","read","parse","releaseLock","InferenceOutputError","constructor","isValidOutput","every","x","label","score","text","Blob","mask","generated_text","box","xmin","ymin","xmax","ymax","base64FromBytes","globalThis","Buffer","from","toString","bin","forEach","byte","String","fromCharCode","btoa","join","reqArgs","parameters","inputs","ArrayBuffer","arrayBuffer","image","defaultTask","isNumArrayRec","maxDepth","curDepth","sequence","token","token_str","answer","end","start","summary_text","aggregator","cells","coordinates","coord","toArray","obj","entity_group","word","translation_text","labels","_label","scores","_score","choices","created","system_fingerprint","usage","question","HfInference","defaultOptions","fn","entries","params","endpoint","HfInferenceEndpoint"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/node_modules/@huggingface/inference/dist/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/tasks/index.ts\nvar tasks_exports = {};\n__export(tasks_exports, {\n  audioClassification: () => audioClassification,\n  audioToAudio: () => audioToAudio,\n  automaticSpeechRecognition: () => automaticSpeechRecognition,\n  chatCompletion: () => chatCompletion,\n  chatCompletionStream: () => chatCompletionStream,\n  documentQuestionAnswering: () => documentQuestionAnswering,\n  featureExtraction: () => featureExtraction,\n  fillMask: () => fillMask,\n  imageClassification: () => imageClassification,\n  imageSegmentation: () => imageSegmentation,\n  imageToImage: () => imageToImage,\n  imageToText: () => imageToText,\n  objectDetection: () => objectDetection,\n  questionAnswering: () => questionAnswering,\n  request: () => request,\n  sentenceSimilarity: () => sentenceSimilarity,\n  streamingRequest: () => streamingRequest,\n  summarization: () => summarization,\n  tableQuestionAnswering: () => tableQuestionAnswering,\n  tabularClassification: () => tabularClassification,\n  tabularRegression: () => tabularRegression,\n  textClassification: () => textClassification,\n  textGeneration: () => textGeneration,\n  textGenerationStream: () => textGenerationStream,\n  textToImage: () => textToImage,\n  textToSpeech: () => textToSpeech,\n  tokenClassification: () => tokenClassification,\n  translation: () => translation,\n  visualQuestionAnswering: () => visualQuestionAnswering,\n  zeroShotClassification: () => zeroShotClassification,\n  zeroShotImageClassification: () => zeroShotImageClassification\n});\n\n// src/utils/pick.ts\nfunction pick(o, props) {\n  return Object.assign(\n    {},\n    ...props.map((prop) => {\n      if (o[prop] !== void 0) {\n        return { [prop]: o[prop] };\n      }\n    })\n  );\n}\n\n// src/utils/typedInclude.ts\nfunction typedInclude(arr, v) {\n  return arr.includes(v);\n}\n\n// src/utils/omit.ts\nfunction omit(o, props) {\n  const propsArr = Array.isArray(props) ? props : [props];\n  const letsKeep = Object.keys(o).filter((prop) => !typedInclude(propsArr, prop));\n  return pick(o, letsKeep);\n}\n\n// src/lib/isUrl.ts\nfunction isUrl(modelOrUrl) {\n  return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\n}\n\n// src/lib/getDefaultTask.ts\nvar taskCache = /* @__PURE__ */ new Map();\nvar CACHE_DURATION = 10 * 60 * 1e3;\nvar MAX_CACHE_ITEMS = 1e3;\nvar HF_HUB_URL = \"https://huggingface.co\";\nasync function getDefaultTask(model, accessToken, options) {\n  if (isUrl(model)) {\n    return null;\n  }\n  const key = `${model}:${accessToken}`;\n  let cachedTask = taskCache.get(key);\n  if (cachedTask && cachedTask.date < new Date(Date.now() - CACHE_DURATION)) {\n    taskCache.delete(key);\n    cachedTask = void 0;\n  }\n  if (cachedTask === void 0) {\n    const modelTask = await (options?.fetch ?? fetch)(`${HF_HUB_URL}/api/models/${model}?expand[]=pipeline_tag`, {\n      headers: accessToken ? { Authorization: `Bearer ${accessToken}` } : {}\n    }).then((resp) => resp.json()).then((json) => json.pipeline_tag).catch(() => null);\n    if (!modelTask) {\n      return null;\n    }\n    cachedTask = { task: modelTask, date: /* @__PURE__ */ new Date() };\n    taskCache.set(key, { task: modelTask, date: /* @__PURE__ */ new Date() });\n    if (taskCache.size > MAX_CACHE_ITEMS) {\n      taskCache.delete(taskCache.keys().next().value);\n    }\n  }\n  return cachedTask.task;\n}\n\n// src/lib/makeRequestOptions.ts\nvar HF_INFERENCE_API_BASE_URL = \"https://api-inference.huggingface.co\";\nvar tasks = null;\nasync function makeRequestOptions(args, options) {\n  const { accessToken, endpointUrl, ...otherArgs } = args;\n  let { model } = args;\n  const {\n    forceTask: task,\n    includeCredentials,\n    taskHint,\n    wait_for_model,\n    use_cache,\n    dont_load_model,\n    chatCompletion: chatCompletion2\n  } = options ?? {};\n  const headers = {};\n  if (accessToken) {\n    headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n  if (!model && !tasks && taskHint) {\n    const res = await fetch(`${HF_HUB_URL}/api/tasks`);\n    if (res.ok) {\n      tasks = await res.json();\n    }\n  }\n  if (!model && tasks && taskHint) {\n    const taskInfo = tasks[taskHint];\n    if (taskInfo) {\n      model = taskInfo.models[0].id;\n    }\n  }\n  if (!model) {\n    throw new Error(\"No model provided, and no default model found for this task\");\n  }\n  const binary = \"data\" in args && !!args.data;\n  if (!binary) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  if (wait_for_model) {\n    headers[\"X-Wait-For-Model\"] = \"true\";\n  }\n  if (use_cache === false) {\n    headers[\"X-Use-Cache\"] = \"false\";\n  }\n  if (dont_load_model) {\n    headers[\"X-Load-Model\"] = \"0\";\n  }\n  let url = (() => {\n    if (endpointUrl && isUrl(model)) {\n      throw new TypeError(\"Both model and endpointUrl cannot be URLs\");\n    }\n    if (isUrl(model)) {\n      console.warn(\"Using a model URL is deprecated, please use the `endpointUrl` parameter instead\");\n      return model;\n    }\n    if (endpointUrl) {\n      return endpointUrl;\n    }\n    if (task) {\n      return `${HF_INFERENCE_API_BASE_URL}/pipeline/${task}/${model}`;\n    }\n    return `${HF_INFERENCE_API_BASE_URL}/models/${model}`;\n  })();\n  if (chatCompletion2 && !url.endsWith(\"/chat/completions\")) {\n    url += \"/v1/chat/completions\";\n  }\n  let credentials;\n  if (typeof includeCredentials === \"string\") {\n    credentials = includeCredentials;\n  } else if (includeCredentials === true) {\n    credentials = \"include\";\n  }\n  const info = {\n    headers,\n    method: \"POST\",\n    body: binary ? args.data : JSON.stringify({\n      ...otherArgs.model && isUrl(otherArgs.model) ? omit(otherArgs, \"model\") : otherArgs\n    }),\n    ...credentials && { credentials },\n    signal: options?.signal\n  };\n  return { url, info };\n}\n\n// src/tasks/custom/request.ts\nasync function request(args, options) {\n  const { url, info } = await makeRequestOptions(args, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return request(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\n      }\n      if (output.error) {\n        throw new Error(JSON.stringify(output.error));\n      }\n    }\n    throw new Error(\"An error occurred while fetching the blob\");\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  return await response.blob();\n}\n\n// src/vendor/fetch-event-source/parse.ts\nfunction getLines(onLine) {\n  let buffer;\n  let position;\n  let fieldLength;\n  let discardTrailingNewline = false;\n  return function onChunk(arr) {\n    if (buffer === void 0) {\n      buffer = arr;\n      position = 0;\n      fieldLength = -1;\n    } else {\n      buffer = concat(buffer, arr);\n    }\n    const bufLength = buffer.length;\n    let lineStart = 0;\n    while (position < bufLength) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === 10 /* NewLine */) {\n          lineStart = ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineEnd = -1;\n      for (; position < bufLength && lineEnd === -1; ++position) {\n        switch (buffer[position]) {\n          case 58 /* Colon */:\n            if (fieldLength === -1) {\n              fieldLength = position - lineStart;\n            }\n            break;\n          case 13 /* CarriageReturn */:\n            discardTrailingNewline = true;\n          case 10 /* NewLine */:\n            lineEnd = position;\n            break;\n        }\n      }\n      if (lineEnd === -1) {\n        break;\n      }\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n      lineStart = position;\n      fieldLength = -1;\n    }\n    if (lineStart === bufLength) {\n      buffer = void 0;\n    } else if (lineStart !== 0) {\n      buffer = buffer.subarray(lineStart);\n      position -= lineStart;\n    }\n  };\n}\nfunction getMessages(onId, onRetry, onMessage) {\n  let message = newMessage();\n  const decoder = new TextDecoder();\n  return function onLine(line, fieldLength) {\n    if (line.length === 0) {\n      onMessage?.(message);\n      message = newMessage();\n    } else if (fieldLength > 0) {\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      switch (field) {\n        case \"data\":\n          message.data = message.data ? message.data + \"\\n\" + value : value;\n          break;\n        case \"event\":\n          message.event = value;\n          break;\n        case \"id\":\n          onId(message.id = value);\n          break;\n        case \"retry\":\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            onRetry(message.retry = retry);\n          }\n          break;\n      }\n    }\n  };\n}\nfunction concat(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction newMessage() {\n  return {\n    data: \"\",\n    event: \"\",\n    id: \"\",\n    retry: void 0\n  };\n}\n\n// src/tasks/custom/streamingRequest.ts\nasync function* streamingRequest(args, options) {\n  const { url, info } = await makeRequestOptions({ ...args, stream: true }, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return yield* streamingRequest(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\n      }\n      if (output.error) {\n        throw new Error(output.error);\n      }\n    }\n    throw new Error(`Server response contains error: ${response.status}`);\n  }\n  if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) {\n    throw new Error(\n      `Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\")\n    );\n  }\n  if (!response.body) {\n    return;\n  }\n  const reader = response.body.getReader();\n  let events = [];\n  const onEvent = (event) => {\n    events.push(event);\n  };\n  const onChunk = getLines(\n    getMessages(\n      () => {\n      },\n      () => {\n      },\n      onEvent\n    )\n  );\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done)\n        return;\n      onChunk(value);\n      for (const event of events) {\n        if (event.data.length > 0) {\n          if (event.data === \"[DONE]\") {\n            return;\n          }\n          const data = JSON.parse(event.data);\n          if (typeof data === \"object\" && data !== null && \"error\" in data) {\n            throw new Error(data.error);\n          }\n          yield data;\n        }\n      }\n      events = [];\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// src/lib/InferenceOutputError.ts\nvar InferenceOutputError = class extends TypeError {\n  constructor(message) {\n    super(\n      `Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`\n    );\n    this.name = \"InferenceOutputError\";\n  }\n};\n\n// src/tasks/audio/audioClassification.ts\nasync function audioClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"audio-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/audio/automaticSpeechRecognition.ts\nasync function automaticSpeechRecognition(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"automatic-speech-recognition\"\n  });\n  const isValidOutput = typeof res?.text === \"string\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/audio/textToSpeech.ts\nasync function textToSpeech(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-to-speech\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/audio/audioToAudio.ts\nasync function audioToAudio(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"audio-to-audio\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.label === \"string\" && typeof x.blob === \"string\" && typeof x[\"content-type\"] === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, blob: string, content-type: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageClassification.ts\nasync function imageClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageSegmentation.ts\nasync function imageSegmentation(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"image-segmentation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, mask: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToText.ts\nasync function imageToText(args, options) {\n  const res = (await request(args, {\n    ...options,\n    taskHint: \"image-to-text\"\n  }))?.[0];\n  if (typeof res?.generated_text !== \"string\") {\n    throw new InferenceOutputError(\"Expected {generated_text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/cv/objectDetection.ts\nasync function objectDetection(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"object-detection\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/cv/textToImage.ts\nasync function textToImage(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/utils/base64FromBytes.ts\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    const bin = [];\n    arr.forEach((byte) => {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\n\n// src/tasks/cv/imageToImage.ts\nasync function imageToImage(args, options) {\n  let reqArgs;\n  if (!args.parameters) {\n    reqArgs = {\n      accessToken: args.accessToken,\n      model: args.model,\n      data: args.inputs\n    };\n  } else {\n    reqArgs = {\n      ...args,\n      inputs: base64FromBytes(\n        new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer())\n      )\n    };\n  }\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"image-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/zeroShotImageClassification.ts\nasync function zeroShotImageClassification(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      image: base64FromBytes(\n        new Uint8Array(\n          args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\n        )\n      )\n    }\n  };\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"zero-shot-image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/featureExtraction.ts\nasync function featureExtraction(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(args, {\n    ...options,\n    taskHint: \"feature-extraction\",\n    ...defaultTask === \"sentence-similarity\" && { forceTask: \"feature-extraction\" }\n  });\n  let isValidOutput = true;\n  const isNumArrayRec = (arr, maxDepth, curDepth = 0) => {\n    if (curDepth > maxDepth)\n      return false;\n    if (arr.every((x) => Array.isArray(x))) {\n      return arr.every((x) => isNumArrayRec(x, maxDepth, curDepth + 1));\n    } else {\n      return arr.every((x) => typeof x === \"number\");\n    }\n  };\n  isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<number[][][] | number[][] | number[] | number>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/fillMask.ts\nasync function fillMask(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"fill-mask\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/questionAnswering.ts\nasync function questionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"question-answering\"\n  });\n  const isValidOutput = typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {answer: string, end: number, score: number, start: number}\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/sentenceSimilarity.ts\nasync function sentenceSimilarity(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(args, {\n    ...options,\n    taskHint: \"sentence-similarity\",\n    ...defaultTask === \"feature-extraction\" && { forceTask: \"sentence-similarity\" }\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/summarization.ts\nasync function summarization(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"summarization\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.summary_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{summary_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/tableQuestionAnswering.ts\nasync function tableQuestionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"table-question-answering\"\n  });\n  const isValidOutput = typeof res?.aggregator === \"string\" && typeof res.answer === \"string\" && Array.isArray(res.cells) && res.cells.every((x) => typeof x === \"string\") && Array.isArray(res.coordinates) && res.coordinates.every((coord) => Array.isArray(coord) && coord.every((x) => typeof x === \"number\"));\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/textClassification.ts\nasync function textClassification(args, options) {\n  const res = (await request(args, {\n    ...options,\n    taskHint: \"text-classification\"\n  }))?.[0];\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/toArray.ts\nfunction toArray(obj) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\n\n// src/tasks/nlp/textGeneration.ts\nasync function textGeneration(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      taskHint: \"text-generation\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.generated_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{generated_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/textGenerationStream.ts\nasync function* textGenerationStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    taskHint: \"text-generation\"\n  });\n}\n\n// src/tasks/nlp/tokenClassification.ts\nasync function tokenClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      taskHint: \"token-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/translation.ts\nasync function translation(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"translation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.translation_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected type Array<{translation_text: string}>\");\n  }\n  return res?.length === 1 ? res?.[0] : res;\n}\n\n// src/tasks/nlp/zeroShotClassification.ts\nasync function zeroShotClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      taskHint: \"zero-shot-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => Array.isArray(x.labels) && x.labels.every((_label) => typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every((_score) => typeof _score === \"number\") && typeof x.sequence === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletion.ts\nasync function chatCompletion(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-generation\",\n    chatCompletion: true\n  });\n  const isValidOutput = typeof res === \"object\" && Array.isArray(res?.choices) && typeof res?.created === \"number\" && typeof res?.id === \"string\" && typeof res?.model === \"string\" && typeof res?.system_fingerprint === \"string\" && typeof res?.usage === \"object\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletionStream.ts\nasync function* chatCompletionStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    taskHint: \"text-generation\",\n    chatCompletion: true\n  });\n}\n\n// src/tasks/multimodal/documentQuestionAnswering.ts\nasync function documentQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(\n        new Uint8Array(\n          args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\n        )\n      )\n    }\n  };\n  const res = toArray(\n    await request(reqArgs, {\n      ...options,\n      taskHint: \"document-question-answering\"\n    })\n  )?.[0];\n  const isValidOutput = typeof res?.answer === \"string\" && (typeof res.end === \"number\" || typeof res.end === \"undefined\") && (typeof res.score === \"number\" || typeof res.score === \"undefined\") && (typeof res.start === \"number\" || typeof res.start === \"undefined\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/multimodal/visualQuestionAnswering.ts\nasync function visualQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(\n        new Uint8Array(\n          args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\n        )\n      )\n    }\n  };\n  const res = (await request(reqArgs, {\n    ...options,\n    taskHint: \"visual-question-answering\"\n  }))?.[0];\n  const isValidOutput = typeof res?.answer === \"string\" && typeof res.score === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularRegression.ts\nasync function tabularRegression(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-regression\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularClassification.ts\nasync function tabularClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/HfInference.ts\nvar HfInference = class {\n  accessToken;\n  defaultOptions;\n  constructor(accessToken = \"\", defaultOptions = {}) {\n    this.accessToken = accessToken;\n    this.defaultOptions = defaultOptions;\n    for (const [name, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n  /**\n   * Returns copy of HfInference tied to a specified endpoint.\n   */\n  endpoint(endpointUrl) {\n    return new HfInferenceEndpoint(endpointUrl, this.accessToken, this.defaultOptions);\n  }\n};\nvar HfInferenceEndpoint = class {\n  constructor(endpointUrl, accessToken = \"\", defaultOptions = {}) {\n    accessToken;\n    defaultOptions;\n    for (const [name, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken, endpointUrl }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n};\nexport {\n  HfInference,\n  HfInferenceEndpoint,\n  InferenceOutputError,\n  audioClassification,\n  audioToAudio,\n  automaticSpeechRecognition,\n  chatCompletion,\n  chatCompletionStream,\n  documentQuestionAnswering,\n  featureExtraction,\n  fillMask,\n  imageClassification,\n  imageSegmentation,\n  imageToImage,\n  imageToText,\n  objectDetection,\n  questionAnswering,\n  request,\n  sentenceSimilarity,\n  streamingRequest,\n  summarization,\n  tableQuestionAnswering,\n  tabularClassification,\n  tabularRegression,\n  textClassification,\n  textGeneration,\n  textGenerationStream,\n  textToImage,\n  textToSpeech,\n  tokenClassification,\n  translation,\n  visualQuestionAnswering,\n  zeroShotClassification,\n  zeroShotImageClassification\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}