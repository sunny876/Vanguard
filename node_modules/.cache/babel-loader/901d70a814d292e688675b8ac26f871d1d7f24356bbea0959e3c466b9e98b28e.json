{"ast":null,"code":"var _jsxFileName = \"/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/ResultHallucinationScore.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { VuiBadge, VuiFlexContainer, VuiFlexItem, VuiText, VuiTextColor } from \"../../ui\";\nimport { HfInference } from \"@huggingface/inference\";\nimport { useConfigContext } from \"../../contexts/ConfigurationContext\";\n\n// Known confidence levels for hallucination scores\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Map a numerical score to a confidence level\nconst getConfidenceLevel = score => {\n  if (score < 0) {\n    return \"unavailable\";\n  }\n  if (score <= 0.33) {\n    return \"low\";\n  }\n  if (score <= 0.66) {\n    return \"medium\";\n  }\n  return \"high\";\n};\n\n// Get color and label for the badge based on confidence level\nconst getBadgeProps = confidenceLevel => {\n  switch (confidenceLevel) {\n    case \"low\":\n      return {\n        color: \"danger\",\n        label: \"High Risk\"\n      };\n    // Inverted for clarity: low consistency = high risk\n    case \"medium\":\n      return {\n        color: \"warning\",\n        label: \"Medium Risk\"\n      };\n    case \"high\":\n      return {\n        color: \"success\",\n        label: \"Low Risk\"\n      };\n    // High consistency = low risk\n    case \"unavailable\":\n    default:\n      return {\n        color: \"neutral\",\n        label: \"Score N/A\"\n      };\n  }\n};\nexport const ResultHallucinationScore = ({\n  result\n}) => {\n  _s();\n  const {\n    search\n  } = useConfigContext();\n  const [hallucinationScore, setHallucinationScore] = useState(-1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const evaluateHallucination = async () => {\n      console.log(\"Evaluating hallucination for result:\", result.id);\n      if (!search.hfToken) {\n        console.warn(\"Hugging Face token not provided. Cannot evaluate hallucination.\");\n        setError(\"No API token\");\n        setIsLoading(false);\n        return;\n      }\n      setIsLoading(true);\n      try {\n        // Get the query from sessionStorage if available\n        const searchQuery = sessionStorage.getItem('lastQuery') || \"search query\";\n        console.log(\"Using search query for evaluation:\", searchQuery);\n\n        // Format the input according to HHEM expectations\n        const {\n          snippet\n        } = result;\n        const premise = `${snippet.pre} ${snippet.text} ${snippet.post}`;\n\n        // Using the specific format required by HHEM\n        const prompt = `<pad> Determine if the hypothesis is true given the premise?\\n\\nPremise: ${premise}\\n\\nHypothesis: ${searchQuery}`;\n        console.log(\"Creating HF inference with token\", search.hfToken.substring(0, 5) + \"...\");\n        const inference = new HfInference(search.hfToken);\n        const API_URL = \"https://api-inference.huggingface.co/models/vectara/hallucination_evaluation_model\";\n        const hem = inference.endpoint(API_URL);\n        console.log(\"Sending request to Hugging Face HHEM\");\n        const responseData = await hem.textClassification({\n          inputs: prompt\n        });\n        console.log(\"HHEM response:\", responseData);\n\n        // HHEM typically returns \"consistent\" or \"hallucinated\" labels\n        // We want the score for \"consistent\" - the higher this is, the more factual\n        let score = -1;\n        if (Array.isArray(responseData)) {\n          for (const labelData of responseData) {\n            if (labelData.label === \"consistent\") {\n              score = Math.round(labelData.score * 100) / 100; // Round to 2 decimal places\n              break;\n            }\n          }\n          // If we didn't find \"consistent\", use the second score (usually that's it)\n          if (score === -1 && responseData.length > 1) {\n            score = Math.round(responseData[1].score * 100) / 100;\n          }\n        } else if (responseData && typeof responseData.score === 'number') {\n          // Handle case where the response might be a direct score\n          score = Math.round(responseData.score * 100) / 100;\n        }\n        console.log(\"Final hallucination score:\", score);\n        setHallucinationScore(score);\n        setError(null);\n      } catch (error) {\n        console.error(\"Error evaluating hallucination:\", error);\n        setError(\"API error\");\n        setHallucinationScore(-1);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    evaluateHallucination();\n  }, [result, search.hfToken]);\n  const confidenceLevel = getConfidenceLevel(hallucinationScore);\n  const {\n    color,\n    label\n  } = getBadgeProps(confidenceLevel);\n  return /*#__PURE__*/_jsxDEV(VuiFlexContainer, {\n    alignItems: \"center\",\n    spacing: \"xs\",\n    style: {\n      marginTop: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(VuiFlexItem, {\n      grow: false,\n      shrink: false,\n      children: /*#__PURE__*/_jsxDEV(VuiBadge, {\n        color: color,\n        style: {\n          padding: '4px 8px',\n          fontSize: '12px'\n        },\n        children: isLoading ? \"Evaluating...\" : error ? `Error: ${error}` : label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), hallucinationScore >= 0 && !isLoading && !error && /*#__PURE__*/_jsxDEV(VuiFlexItem, {\n      grow: false,\n      shrink: false,\n      children: /*#__PURE__*/_jsxDEV(VuiText, {\n        size: \"xs\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(VuiTextColor, {\n            color: \"subdued\",\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"FCS: \", hallucinationScore.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultHallucinationScore, \"zRIacLj3Fmp9xhHo7r1lPhtn4ug=\", false, function () {\n  return [useConfigContext];\n});\n_c = ResultHallucinationScore;\nvar _c;\n$RefreshReg$(_c, \"ResultHallucinationScore\");","map":{"version":3,"names":["useState","useEffect","VuiBadge","VuiFlexContainer","VuiFlexItem","VuiText","VuiTextColor","HfInference","useConfigContext","jsxDEV","_jsxDEV","getConfidenceLevel","score","getBadgeProps","confidenceLevel","color","label","ResultHallucinationScore","result","_s","search","hallucinationScore","setHallucinationScore","isLoading","setIsLoading","error","setError","evaluateHallucination","console","log","id","hfToken","warn","searchQuery","sessionStorage","getItem","snippet","premise","pre","text","post","prompt","substring","inference","API_URL","hem","endpoint","responseData","textClassification","inputs","Array","isArray","labelData","Math","round","length","alignItems","spacing","style","marginTop","children","grow","shrink","padding","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","size","toFixed","_c","$RefreshReg$"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/ResultHallucinationScore.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { VuiBadge, VuiFlexContainer, VuiFlexItem, VuiText, VuiTextColor } from \"../../ui\";\nimport { SearchResultWithSnippet } from \"../types\";\nimport { HfInference } from \"@huggingface/inference\";\nimport { useConfigContext } from \"../../contexts/ConfigurationContext\";\n\n// Known confidence levels for hallucination scores\nexport type ConfidenceLevel = \"unavailable\" | \"low\" | \"medium\" | \"high\";\n\n// Map a numerical score to a confidence level\nconst getConfidenceLevel = (score: number): ConfidenceLevel => {\n  if (score < 0) {\n    return \"unavailable\";\n  }\n  if (score <= 0.33) {\n    return \"low\";\n  }\n  if (score <= 0.66) {\n    return \"medium\";\n  }\n  return \"high\";\n};\n\n// Get color and label for the badge based on confidence level\nconst getBadgeProps = (\n  confidenceLevel: ConfidenceLevel\n): { color: \"success\" | \"warning\" | \"danger\" | \"neutral\"; label: string } => {\n  switch (confidenceLevel) {\n    case \"low\":\n      return { color: \"danger\", label: \"High Risk\" }; // Inverted for clarity: low consistency = high risk\n    case \"medium\":\n      return { color: \"warning\", label: \"Medium Risk\" };\n    case \"high\":\n      return { color: \"success\", label: \"Low Risk\" }; // High consistency = low risk\n    case \"unavailable\":\n    default:\n      return { color: \"neutral\", label: \"Score N/A\" };\n  }\n};\n\ninterface ResultHallucinationScoreProps {\n  result: SearchResultWithSnippet;\n}\n\nexport const ResultHallucinationScore = ({ result }: ResultHallucinationScoreProps) => {\n  const { search } = useConfigContext();\n  const [hallucinationScore, setHallucinationScore] = useState<number>(-1);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const evaluateHallucination = async () => {\n      console.log(\"Evaluating hallucination for result:\", result.id);\n      \n      if (!search.hfToken) {\n        console.warn(\"Hugging Face token not provided. Cannot evaluate hallucination.\");\n        setError(\"No API token\");\n        setIsLoading(false);\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        // Get the query from sessionStorage if available\n        const searchQuery = sessionStorage.getItem('lastQuery') || \"search query\";\n        console.log(\"Using search query for evaluation:\", searchQuery);\n        \n        // Format the input according to HHEM expectations\n        const { snippet } = result;\n        const premise = `${snippet.pre} ${snippet.text} ${snippet.post}`;\n        \n        // Using the specific format required by HHEM\n        const prompt = `<pad> Determine if the hypothesis is true given the premise?\\n\\nPremise: ${premise}\\n\\nHypothesis: ${searchQuery}`;\n        \n        console.log(\"Creating HF inference with token\", search.hfToken.substring(0, 5) + \"...\");\n        const inference = new HfInference(search.hfToken);\n        const API_URL = \"https://api-inference.huggingface.co/models/vectara/hallucination_evaluation_model\";\n        const hem = inference.endpoint(API_URL);\n        \n        console.log(\"Sending request to Hugging Face HHEM\");\n        const responseData = await hem.textClassification({ inputs: prompt });\n        console.log(\"HHEM response:\", responseData);\n        \n        // HHEM typically returns \"consistent\" or \"hallucinated\" labels\n        // We want the score for \"consistent\" - the higher this is, the more factual\n        let score = -1;\n        if (Array.isArray(responseData)) {\n          for (const labelData of responseData) {\n            if (labelData.label === \"consistent\") {\n              score = Math.round(labelData.score * 100) / 100; // Round to 2 decimal places\n              break;\n            }\n          }\n          // If we didn't find \"consistent\", use the second score (usually that's it)\n          if (score === -1 && responseData.length > 1) {\n            score = Math.round(responseData[1].score * 100) / 100;\n          }\n        } else if (responseData && typeof responseData.score === 'number') {\n          // Handle case where the response might be a direct score\n          score = Math.round(responseData.score * 100) / 100;\n        }\n        \n        console.log(\"Final hallucination score:\", score);\n        setHallucinationScore(score);\n        setError(null);\n      } catch (error) {\n        console.error(\"Error evaluating hallucination:\", error);\n        setError(\"API error\");\n        setHallucinationScore(-1);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    evaluateHallucination();\n  }, [result, search.hfToken]);\n\n  const confidenceLevel = getConfidenceLevel(hallucinationScore);\n  const { color, label } = getBadgeProps(confidenceLevel);\n\n  return (\n    <VuiFlexContainer alignItems=\"center\" spacing=\"xs\" style={{ marginTop: '8px' }}>\n      <VuiFlexItem grow={false} shrink={false}>\n        <VuiBadge color={color} style={{ padding: '4px 8px', fontSize: '12px' }}>\n          {isLoading ? \"Evaluating...\" : error ? `Error: ${error}` : label}\n        </VuiBadge>\n      </VuiFlexItem>\n      {hallucinationScore >= 0 && !isLoading && !error && (\n        <VuiFlexItem grow={false} shrink={false}>\n          <VuiText size=\"xs\">\n            <p>\n              <VuiTextColor color=\"subdued\">\n                <strong>FCS: {hallucinationScore.toFixed(2)}</strong>\n              </VuiTextColor>\n            </p>\n          </VuiText>\n        </VuiFlexItem>\n      )}\n    </VuiFlexContainer>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}