{"ast":null,"code":"import classNames from\"classnames\";import{forwardRef,useEffect,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const SIZE=[\"m\",\"l\"];export const VuiNumberInput=/*#__PURE__*/forwardRef((_ref,ref)=>{let{className,id,max,min,step,value,size=\"m\",onChange,fullWidth,isInvalid,autoFocus,...rest}=_ref;const[localValue,setLocalValue]=useState(value);// This is a hacky solution to the number input misbehaving on Firefox.\n// If we were to apply the value and onChange values directly to the\n// value and onChange props of the input, then a user who:\n//  1. Selects all\n//  2. Types 1.0\n// will have the input show \"0\" as soon as they enter a decimal point.\n// When that character is entered, onChange is called with undefined.\n// This value gets stored in the value state, which resets the value to 0.\n// For some reason, using a useState hook to store the value doesn't have\n// this problem.\nuseEffect(()=>{// Reflect the upstream value when it changes. Ignore 0\n// because that indicates the user has entered a decimal point.\nif(value!==0){setLocalValue(value);}},[value]);// Part of the hacky solution above.\nuseEffect(()=>{// Set value locally so an undefined value doesn't reset it to 0.\n// Pass the value upstream, e.g. so it can be persisted.\nonChange(localValue!==null&&localValue!==void 0?localValue:0);},[localValue]);const classes=classNames(\"vuiInput\",`vuiInput--${size}`,{\"vuiInput-isInvalid\":isInvalid,\"vuiInput--fullWidth\":fullWidth},className);const onChangeValue=e=>{// Enable resetting the value to undefined.\nif(e.target.value===\"\")return setLocalValue(undefined);const numberValue=Number(e.target.value);if(isNaN(numberValue))return setLocalValue(undefined);setLocalValue(Number(e.target.value));};const onBlur=()=>{if(min!==undefined&&value!==undefined&&value<min)onChange(min);if(max!==undefined&&value!==undefined&&value>max)onChange(max);};return/*#__PURE__*/_jsx(\"input\",{autoFocus:autoFocus,ref:ref,type:\"number\",className:classes,id:id,max:max,min:min,step:step,value:localValue!==null&&localValue!==void 0?localValue:\"\",onChange:onChangeValue,onBlur:onBlur,...rest});});","map":{"version":3,"names":["classNames","forwardRef","useEffect","useState","jsx","_jsx","SIZE","VuiNumberInput","_ref","ref","className","id","max","min","step","value","size","onChange","fullWidth","isInvalid","autoFocus","rest","localValue","setLocalValue","classes","onChangeValue","e","target","undefined","numberValue","Number","isNaN","onBlur","type"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/ui/components/form/input/NumberInput.tsx"],"sourcesContent":["import classNames from \"classnames\";\nimport { forwardRef, useEffect, useState } from \"react\";\n\nconst SIZE = [\"m\", \"l\"] as const;\n\ntype Props = {\n  className?: string;\n  id?: string;\n  isInvalid?: boolean;\n  value?: number;\n  size?: (typeof SIZE)[number];\n  fullWidth?: boolean;\n  onChange: (value?: number) => void;\n  max?: number;\n  min?: number;\n  step?: number;\n  autoFocus?: boolean;\n};\n\nexport const VuiNumberInput = forwardRef<HTMLInputElement | null, Props>(\n  (\n    { className, id, max, min, step, value, size = \"m\", onChange, fullWidth, isInvalid, autoFocus, ...rest }: Props,\n    ref\n  ) => {\n    const [localValue, setLocalValue] = useState<number | undefined>(value);\n\n    // This is a hacky solution to the number input misbehaving on Firefox.\n    // If we were to apply the value and onChange values directly to the\n    // value and onChange props of the input, then a user who:\n    //  1. Selects all\n    //  2. Types 1.0\n    // will have the input show \"0\" as soon as they enter a decimal point.\n    // When that character is entered, onChange is called with undefined.\n    // This value gets stored in the value state, which resets the value to 0.\n    // For some reason, using a useState hook to store the value doesn't have\n    // this problem.\n    useEffect(() => {\n      // Reflect the upstream value when it changes. Ignore 0\n      // because that indicates the user has entered a decimal point.\n      if (value !== 0) {\n        setLocalValue(value);\n      }\n    }, [value]);\n\n    // Part of the hacky solution above.\n    useEffect(() => {\n      // Set value locally so an undefined value doesn't reset it to 0.\n      // Pass the value upstream, e.g. so it can be persisted.\n      onChange(localValue ?? 0);\n    }, [localValue]);\n\n    const classes = classNames(\n      \"vuiInput\",\n      `vuiInput--${size}`,\n      {\n        \"vuiInput-isInvalid\": isInvalid,\n        \"vuiInput--fullWidth\": fullWidth\n      },\n      className\n    );\n\n    const onChangeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n      // Enable resetting the value to undefined.\n      if (e.target.value === \"\") return setLocalValue(undefined);\n\n      const numberValue = Number(e.target.value);\n      if (isNaN(numberValue)) return setLocalValue(undefined);\n\n      setLocalValue(Number(e.target.value));\n    };\n\n    const onBlur = () => {\n      if (min !== undefined && value !== undefined && value < min) onChange(min);\n      if (max !== undefined && value !== undefined && value > max) onChange(max);\n    };\n\n    return (\n      <input\n        autoFocus={autoFocus}\n        ref={ref}\n        type=\"number\"\n        className={classes}\n        id={id}\n        max={max}\n        min={min}\n        step={step}\n        value={localValue ?? \"\"}\n        onChange={onChangeValue}\n        onBlur={onBlur}\n        {...rest}\n      />\n    );\n  }\n);\n"],"mappings":"AAAA,MAAO,CAAAA,UAAU,KAAM,YAAY,CACnC,OAASC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExD,KAAM,CAAAC,IAAI,CAAG,CAAC,GAAG,CAAE,GAAG,CAAU,CAgBhC,MAAO,MAAM,CAAAC,cAAc,cAAGN,UAAU,CACtC,CAAAO,IAAA,CAEEC,GAAG,GACA,IAFH,CAAEC,SAAS,CAAEC,EAAE,CAAEC,GAAG,CAAEC,GAAG,CAAEC,IAAI,CAAEC,KAAK,CAAEC,IAAI,CAAG,GAAG,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,SAAS,CAAEC,SAAS,CAAE,GAAGC,IAAY,CAAC,CAAAb,IAAA,CAG/G,KAAM,CAACc,UAAU,CAAEC,aAAa,CAAC,CAAGpB,QAAQ,CAAqBY,KAAK,CAAC,CAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,SAAS,CAAC,IAAM,CACd;AACA;AACA,GAAIa,KAAK,GAAK,CAAC,CAAE,CACfQ,aAAa,CAACR,KAAK,CAAC,CACtB,CACF,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX;AACAb,SAAS,CAAC,IAAM,CACd;AACA;AACAe,QAAQ,CAACK,UAAU,SAAVA,UAAU,UAAVA,UAAU,CAAI,CAAC,CAAC,CAC3B,CAAC,CAAE,CAACA,UAAU,CAAC,CAAC,CAEhB,KAAM,CAAAE,OAAO,CAAGxB,UAAU,CACxB,UAAU,CACV,aAAagB,IAAI,EAAE,CACnB,CACE,oBAAoB,CAAEG,SAAS,CAC/B,qBAAqB,CAAED,SACzB,CAAC,CACDR,SACF,CAAC,CAED,KAAM,CAAAe,aAAa,CAAIC,CAAsC,EAAK,CAChE;AACA,GAAIA,CAAC,CAACC,MAAM,CAACZ,KAAK,GAAK,EAAE,CAAE,MAAO,CAAAQ,aAAa,CAACK,SAAS,CAAC,CAE1D,KAAM,CAAAC,WAAW,CAAGC,MAAM,CAACJ,CAAC,CAACC,MAAM,CAACZ,KAAK,CAAC,CAC1C,GAAIgB,KAAK,CAACF,WAAW,CAAC,CAAE,MAAO,CAAAN,aAAa,CAACK,SAAS,CAAC,CAEvDL,aAAa,CAACO,MAAM,CAACJ,CAAC,CAACC,MAAM,CAACZ,KAAK,CAAC,CAAC,CACvC,CAAC,CAED,KAAM,CAAAiB,MAAM,CAAGA,CAAA,GAAM,CACnB,GAAInB,GAAG,GAAKe,SAAS,EAAIb,KAAK,GAAKa,SAAS,EAAIb,KAAK,CAAGF,GAAG,CAAEI,QAAQ,CAACJ,GAAG,CAAC,CAC1E,GAAID,GAAG,GAAKgB,SAAS,EAAIb,KAAK,GAAKa,SAAS,EAAIb,KAAK,CAAGH,GAAG,CAAEK,QAAQ,CAACL,GAAG,CAAC,CAC5E,CAAC,CAED,mBACEP,IAAA,UACEe,SAAS,CAAEA,SAAU,CACrBX,GAAG,CAAEA,GAAI,CACTwB,IAAI,CAAC,QAAQ,CACbvB,SAAS,CAAEc,OAAQ,CACnBb,EAAE,CAAEA,EAAG,CACPC,GAAG,CAAEA,GAAI,CACTC,GAAG,CAAEA,GAAI,CACTC,IAAI,CAAEA,IAAK,CACXC,KAAK,CAAEO,UAAU,SAAVA,UAAU,UAAVA,UAAU,CAAI,EAAG,CACxBL,QAAQ,CAAEQ,aAAc,CACxBO,MAAM,CAAEA,MAAO,IACXX,IAAI,CACT,CAAC,CAEN,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}