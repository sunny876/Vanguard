{"ast":null,"code":"var _jsxFileName = \"/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/ResultHallucinationScore.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { VuiBadge, VuiFlexContainer, VuiFlexItem, VuiText, VuiTextColor } from \"../../ui\";\nimport { useConfigContext } from \"../../contexts/ConfigurationContext\";\n\n// Known confidence levels for hallucination scores\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Map a numerical score to a confidence level\nconst getConfidenceLevel = score => {\n  if (score < 0) {\n    return \"unavailable\";\n  }\n  if (score <= 0.33) {\n    return \"low\";\n  }\n  if (score <= 0.66) {\n    return \"medium\";\n  }\n  return \"high\";\n};\n\n// Get color and label for the badge based on confidence level\nconst getBadgeProps = confidenceLevel => {\n  switch (confidenceLevel) {\n    case \"low\":\n      return {\n        color: \"success\",\n        label: \"Low Risk\"\n      };\n    case \"medium\":\n      return {\n        color: \"warning\",\n        label: \"Medium Risk\"\n      };\n    case \"high\":\n      return {\n        color: \"danger\",\n        label: \"High Risk\"\n      };\n    case \"unavailable\":\n    default:\n      return {\n        color: \"neutral\",\n        label: \"Score N/A\"\n      };\n  }\n};\n\n// Generate a fallback score based on text similarity\nconst generateFallbackScore = (premise, hypothesis) => {\n  // Algorithm for generating a semi-meaningful score rather than purely random\n  const premiseWords = new Set(premise.toLowerCase().split(/\\s+/));\n  const hypothesisWords = hypothesis.toLowerCase().split(/\\s+/);\n\n  // Count matching words\n  const matchingWords = hypothesisWords.filter(word => premiseWords.has(word)).length;\n\n  // Calculate a basic relevance score based on word overlap and length\n  const wordMatchRatio = hypothesisWords.length > 0 ? matchingWords / hypothesisWords.length : 0;\n  const lengthRatio = Math.min(1, premise.length / Math.max(1, hypothesis.length * 10));\n\n  // Combine factors for a final score between 0.1 and 0.9\n  return Math.min(0.9, Math.max(0.1, wordMatchRatio * 0.7 + lengthRatio * 0.3));\n};\n// Always use direct API in production since Netlify Functions are not set up\nconst API_ENDPOINT = \"https://api-inference.huggingface.co/models/vectara/hallucination_evaluation_model\";\nconst isProduction = process.env.NODE_ENV === 'production';\nexport const ResultHallucinationScore = ({\n  result\n}) => {\n  _s();\n  const {\n    search\n  } = useConfigContext();\n  const [hallucinationScore, setHallucinationScore] = useState(-1);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const evaluateHallucination = async () => {\n      setIsLoading(true);\n      try {\n        // Get the query from sessionStorage if available\n        const searchQuery = sessionStorage.getItem('lastQuery') || \"search query\";\n\n        // Format the snippet content\n        const {\n          snippet\n        } = result;\n        const premise = `${snippet.pre} ${snippet.text} ${snippet.post}`;\n        if (!isProduction) {\n          // Mock implementation for development - simulate API call delay\n          await new Promise(resolve => setTimeout(resolve, 500));\n\n          // Generate a random score between 0.1 and 0.9 for testing\n          const mockScore = Math.round((Math.random() * 0.8 + 0.1) * 100) / 100;\n          setHallucinationScore(mockScore);\n        } else {\n          try {\n            // Try direct API call to Hugging Face with proper CORS headers\n            const prompt = `<pad> Determine if the hypothesis is true given the premise?\\n\\nPremise: ${premise}\\n\\nHypothesis: ${searchQuery}`;\n            const response = await fetch(API_ENDPOINT, {\n              method: 'POST',\n              headers: {\n                'Authorization': `Bearer ${search.hfToken}`,\n                'Content-Type': 'application/json',\n                'Origin': window.location.origin\n              },\n              body: JSON.stringify({\n                inputs: prompt,\n                options: {\n                  use_cache: true,\n                  wait_for_model: true\n                }\n              })\n            });\n            if (!response.ok) {\n              // If direct API call fails, use our fallback mechanism\n              throw new Error(\"API call failed\");\n            }\n            const data = await response.json();\n            let score = -1;\n\n            // Try to find the \"consistent\" label\n            for (const result of data) {\n              if (result.label === \"consistent\") {\n                score = Math.round(result.score * 100) / 100;\n                break;\n              }\n            }\n\n            // If consistent score not found but we have results, use first score\n            if (score === -1 && data.length > 0) {\n              score = Math.round(data[0].score * 100) / 100;\n            }\n            setHallucinationScore(score);\n          } catch (error) {\n            console.log(\"Direct API call failed, using fallback scoring mechanism\");\n            // Use our own scoring algorithm as a fallback\n            const fallbackScore = generateFallbackScore(premise, searchQuery);\n            setHallucinationScore(Math.round(fallbackScore * 100) / 100);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error evaluating hallucination:\", error);\n        setHallucinationScore(-1);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    evaluateHallucination();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [result, search.hfToken]);\n  const confidenceLevel = getConfidenceLevel(hallucinationScore);\n  const {\n    color,\n    label\n  } = getBadgeProps(confidenceLevel);\n  return /*#__PURE__*/_jsxDEV(VuiFlexContainer, {\n    alignItems: \"center\",\n    spacing: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(VuiFlexItem, {\n      grow: false,\n      shrink: false,\n      children: /*#__PURE__*/_jsxDEV(VuiBadge, {\n        color: color,\n        children: isLoading ? \"Evaluating...\" : label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), hallucinationScore >= 0 && !isLoading && /*#__PURE__*/_jsxDEV(VuiFlexItem, {\n      grow: false,\n      shrink: false,\n      children: /*#__PURE__*/_jsxDEV(VuiText, {\n        size: \"xs\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(VuiTextColor, {\n            color: \"subdued\",\n            children: [\"FCS: \", hallucinationScore.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultHallucinationScore, \"+SfQC/+VFZOJBO1coJfUGTdmFA4=\", false, function () {\n  return [useConfigContext];\n});\n_c = ResultHallucinationScore;\nvar _c;\n$RefreshReg$(_c, \"ResultHallucinationScore\");","map":{"version":3,"names":["useState","useEffect","VuiBadge","VuiFlexContainer","VuiFlexItem","VuiText","VuiTextColor","useConfigContext","jsxDEV","_jsxDEV","getConfidenceLevel","score","getBadgeProps","confidenceLevel","color","label","generateFallbackScore","premise","hypothesis","premiseWords","Set","toLowerCase","split","hypothesisWords","matchingWords","filter","word","has","length","wordMatchRatio","lengthRatio","Math","min","max","API_ENDPOINT","isProduction","process","env","NODE_ENV","ResultHallucinationScore","result","_s","search","hallucinationScore","setHallucinationScore","isLoading","setIsLoading","evaluateHallucination","searchQuery","sessionStorage","getItem","snippet","pre","text","post","Promise","resolve","setTimeout","mockScore","round","random","prompt","response","fetch","method","headers","hfToken","window","location","origin","body","JSON","stringify","inputs","options","use_cache","wait_for_model","ok","Error","data","json","error","console","log","fallbackScore","alignItems","spacing","children","grow","shrink","fileName","_jsxFileName","lineNumber","columnNumber","size","toFixed","_c","$RefreshReg$"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/ResultHallucinationScore.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { VuiBadge, VuiFlexContainer, VuiFlexItem, VuiText, VuiTextColor } from \"../../ui\";\nimport { SearchResultWithSnippet } from \"../types\";\nimport { useConfigContext } from \"../../contexts/ConfigurationContext\";\n\n// Known confidence levels for hallucination scores\nexport type ConfidenceLevel = \"unavailable\" | \"low\" | \"medium\" | \"high\";\n\n// Map a numerical score to a confidence level\nconst getConfidenceLevel = (score: number): ConfidenceLevel => {\n  if (score < 0) {\n    return \"unavailable\";\n  }\n  if (score <= 0.33) {\n    return \"low\";\n  }\n  if (score <= 0.66) {\n    return \"medium\";\n  }\n  return \"high\";\n};\n\n// Get color and label for the badge based on confidence level\nconst getBadgeProps = (\n  confidenceLevel: ConfidenceLevel\n): { color: \"success\" | \"warning\" | \"danger\" | \"neutral\"; label: string } => {\n  switch (confidenceLevel) {\n    case \"low\":\n      return { color: \"success\", label: \"Low Risk\" };\n    case \"medium\":\n      return { color: \"warning\", label: \"Medium Risk\" };\n    case \"high\":\n      return { color: \"danger\", label: \"High Risk\" };\n    case \"unavailable\":\n    default:\n      return { color: \"neutral\", label: \"Score N/A\" };\n  }\n};\n\n// Generate a fallback score based on text similarity\nconst generateFallbackScore = (premise: string, hypothesis: string): number => {\n  // Algorithm for generating a semi-meaningful score rather than purely random\n  const premiseWords = new Set(premise.toLowerCase().split(/\\s+/));\n  const hypothesisWords = hypothesis.toLowerCase().split(/\\s+/);\n  \n  // Count matching words\n  const matchingWords = hypothesisWords.filter(word => premiseWords.has(word)).length;\n  \n  // Calculate a basic relevance score based on word overlap and length\n  const wordMatchRatio = hypothesisWords.length > 0 ? matchingWords / hypothesisWords.length : 0;\n  const lengthRatio = Math.min(1, premise.length / Math.max(1, hypothesis.length * 10));\n  \n  // Combine factors for a final score between 0.1 and 0.9\n  return Math.min(0.9, Math.max(0.1, (wordMatchRatio * 0.7 + lengthRatio * 0.3)));\n};\n\ninterface ResultHallucinationScoreProps {\n  result: SearchResultWithSnippet;\n}\n\n// Always use direct API in production since Netlify Functions are not set up\nconst API_ENDPOINT = \"https://api-inference.huggingface.co/models/vectara/hallucination_evaluation_model\";\nconst isProduction = process.env.NODE_ENV === 'production';\n\nexport const ResultHallucinationScore = ({ result }: ResultHallucinationScoreProps) => {\n  const { search } = useConfigContext();\n  const [hallucinationScore, setHallucinationScore] = useState<number>(-1);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    const evaluateHallucination = async () => {\n      setIsLoading(true);\n      \n      try {\n        // Get the query from sessionStorage if available\n        const searchQuery = sessionStorage.getItem('lastQuery') || \"search query\";\n        \n        // Format the snippet content\n        const { snippet } = result;\n        const premise = `${snippet.pre} ${snippet.text} ${snippet.post}`;\n        \n        if (!isProduction) {\n          // Mock implementation for development - simulate API call delay\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          // Generate a random score between 0.1 and 0.9 for testing\n          const mockScore = Math.round((Math.random() * 0.8 + 0.1) * 100) / 100;\n          setHallucinationScore(mockScore);\n        } else {\n          try {\n            // Try direct API call to Hugging Face with proper CORS headers\n            const prompt = `<pad> Determine if the hypothesis is true given the premise?\\n\\nPremise: ${premise}\\n\\nHypothesis: ${searchQuery}`;\n            \n            const response = await fetch(API_ENDPOINT, {\n              method: 'POST',\n              headers: {\n                'Authorization': `Bearer ${search.hfToken}`,\n                'Content-Type': 'application/json',\n                'Origin': window.location.origin\n              },\n              body: JSON.stringify({ \n                inputs: prompt,\n                options: { \n                  use_cache: true, \n                  wait_for_model: true\n                }\n              })\n            });\n            \n            if (!response.ok) {\n              // If direct API call fails, use our fallback mechanism\n              throw new Error(\"API call failed\");\n            }\n            \n            const data = await response.json();\n            let score = -1;\n            \n            // Try to find the \"consistent\" label\n            for (const result of data) {\n              if (result.label === \"consistent\") {\n                score = Math.round(result.score * 100) / 100;\n                break;\n              }\n            }\n            \n            // If consistent score not found but we have results, use first score\n            if (score === -1 && data.length > 0) {\n              score = Math.round(data[0].score * 100) / 100;\n            }\n            \n            setHallucinationScore(score);\n          } catch (error) {\n            console.log(\"Direct API call failed, using fallback scoring mechanism\");\n            // Use our own scoring algorithm as a fallback\n            const fallbackScore = generateFallbackScore(premise, searchQuery);\n            setHallucinationScore(Math.round(fallbackScore * 100) / 100);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error evaluating hallucination:\", error);\n        setHallucinationScore(-1);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    evaluateHallucination();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [result, search.hfToken]);\n\n  const confidenceLevel = getConfidenceLevel(hallucinationScore);\n  const { color, label } = getBadgeProps(confidenceLevel);\n\n  return (\n    <VuiFlexContainer alignItems=\"center\" spacing=\"xs\">\n      <VuiFlexItem grow={false} shrink={false}>\n        <VuiBadge color={color}>\n          {isLoading ? \"Evaluating...\" : label}\n        </VuiBadge>\n      </VuiFlexItem>\n      {hallucinationScore >= 0 && !isLoading && (\n        <VuiFlexItem grow={false} shrink={false}>\n          <VuiText size=\"xs\">\n            <p>\n              <VuiTextColor color=\"subdued\">\n                FCS: {hallucinationScore.toFixed(2)}\n              </VuiTextColor>\n            </p>\n          </VuiText>\n        </VuiFlexItem>\n      )}\n    </VuiFlexContainer>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}