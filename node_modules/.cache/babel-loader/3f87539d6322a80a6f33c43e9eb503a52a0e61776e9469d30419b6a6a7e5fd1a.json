{"ast":null,"code":"var _jsxFileName = \"/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/ResultHallucinationScore.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { VuiBadge, VuiFlexContainer, VuiFlexItem, VuiText, VuiTextColor } from \"../../ui\";\nimport { useConfigContext } from \"../../contexts/ConfigurationContext\";\n\n// Known confidence levels for hallucination scores\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Map a numerical score to a confidence level\nconst getConfidenceLevel = score => {\n  if (score < 0) {\n    return \"unavailable\";\n  }\n  if (score <= 0.33) {\n    return \"low\";\n  }\n  if (score <= 0.66) {\n    return \"medium\";\n  }\n  return \"high\";\n};\n\n// Get color and label for the badge based on confidence level\nconst getBadgeProps = confidenceLevel => {\n  switch (confidenceLevel) {\n    case \"low\":\n      return {\n        color: \"success\",\n        label: \"Low Risk\"\n      };\n    case \"medium\":\n      return {\n        color: \"warning\",\n        label: \"Medium Risk\"\n      };\n    case \"high\":\n      return {\n        color: \"danger\",\n        label: \"High Risk\"\n      };\n    case \"unavailable\":\n    default:\n      return {\n        color: \"neutral\",\n        label: \"Score N/A\"\n      };\n  }\n};\n// In production, this would be a Netlify Function URL\n// During development, we use a mock score for demonstration\nconst isProduction = process.env.NODE_ENV === 'production';\nconst API_ENDPOINT = isProduction ? '/.netlify/functions/hallucination-check' : '/api/mock-hallucination-check';\nexport const ResultHallucinationScore = ({\n  result\n}) => {\n  _s();\n  const {\n    search\n  } = useConfigContext();\n  const [hallucinationScore, setHallucinationScore] = useState(-1);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const evaluateHallucination = async () => {\n      setIsLoading(true);\n      try {\n        // Get the query from sessionStorage if available\n        const searchQuery = sessionStorage.getItem('lastQuery') || \"search query\";\n\n        // Format the snippet content\n        const {\n          snippet\n        } = result;\n        const premise = `${snippet.pre} ${snippet.text} ${snippet.post}`;\n        if (!isProduction) {\n          // Mock implementation for development - simulate API call delay\n          await new Promise(resolve => setTimeout(resolve, 500));\n\n          // Generate a random score between 0.1 and 0.9 for testing\n          const mockScore = Math.round((Math.random() * 0.8 + 0.1) * 100) / 100;\n          setHallucinationScore(mockScore);\n        } else {\n          // Production implementation - call Netlify Function\n          const response = await fetch(API_ENDPOINT, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              premise,\n              hypothesis: searchQuery,\n              hfToken: search.hfToken\n            })\n          });\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const data = await response.json();\n          setHallucinationScore(data.score);\n        }\n      } catch (error) {\n        console.error(\"Error evaluating hallucination:\", error);\n        setHallucinationScore(-1);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    evaluateHallucination();\n  }, [result, search.hfToken, isProduction]);\n  const confidenceLevel = getConfidenceLevel(hallucinationScore);\n  const {\n    color,\n    label\n  } = getBadgeProps(confidenceLevel);\n  return /*#__PURE__*/_jsxDEV(VuiFlexContainer, {\n    alignItems: \"center\",\n    spacing: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(VuiFlexItem, {\n      grow: false,\n      shrink: false,\n      children: /*#__PURE__*/_jsxDEV(VuiBadge, {\n        color: color,\n        children: isLoading ? \"Evaluating...\" : label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), hallucinationScore >= 0 && !isLoading && /*#__PURE__*/_jsxDEV(VuiFlexItem, {\n      grow: false,\n      shrink: false,\n      children: /*#__PURE__*/_jsxDEV(VuiText, {\n        size: \"xs\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(VuiTextColor, {\n            color: \"subdued\",\n            children: [\"FCS: \", hallucinationScore.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultHallucinationScore, \"+SfQC/+VFZOJBO1coJfUGTdmFA4=\", false, function () {\n  return [useConfigContext];\n});\n_c = ResultHallucinationScore;\nvar _c;\n$RefreshReg$(_c, \"ResultHallucinationScore\");","map":{"version":3,"names":["useState","useEffect","VuiBadge","VuiFlexContainer","VuiFlexItem","VuiText","VuiTextColor","useConfigContext","jsxDEV","_jsxDEV","getConfidenceLevel","score","getBadgeProps","confidenceLevel","color","label","isProduction","process","env","NODE_ENV","API_ENDPOINT","ResultHallucinationScore","result","_s","search","hallucinationScore","setHallucinationScore","isLoading","setIsLoading","evaluateHallucination","searchQuery","sessionStorage","getItem","snippet","premise","pre","text","post","Promise","resolve","setTimeout","mockScore","Math","round","random","response","fetch","method","headers","body","JSON","stringify","hypothesis","hfToken","ok","Error","status","data","json","error","console","alignItems","spacing","children","grow","shrink","fileName","_jsxFileName","lineNumber","columnNumber","size","toFixed","_c","$RefreshReg$"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/ResultHallucinationScore.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { VuiBadge, VuiFlexContainer, VuiFlexItem, VuiText, VuiTextColor } from \"../../ui\";\nimport { SearchResultWithSnippet } from \"../types\";\nimport { useConfigContext } from \"../../contexts/ConfigurationContext\";\n\n// Known confidence levels for hallucination scores\nexport type ConfidenceLevel = \"unavailable\" | \"low\" | \"medium\" | \"high\";\n\n// Map a numerical score to a confidence level\nconst getConfidenceLevel = (score: number): ConfidenceLevel => {\n  if (score < 0) {\n    return \"unavailable\";\n  }\n  if (score <= 0.33) {\n    return \"low\";\n  }\n  if (score <= 0.66) {\n    return \"medium\";\n  }\n  return \"high\";\n};\n\n// Get color and label for the badge based on confidence level\nconst getBadgeProps = (\n  confidenceLevel: ConfidenceLevel\n): { color: \"success\" | \"warning\" | \"danger\" | \"neutral\"; label: string } => {\n  switch (confidenceLevel) {\n    case \"low\":\n      return { color: \"success\", label: \"Low Risk\" };\n    case \"medium\":\n      return { color: \"warning\", label: \"Medium Risk\" };\n    case \"high\":\n      return { color: \"danger\", label: \"High Risk\" };\n    case \"unavailable\":\n    default:\n      return { color: \"neutral\", label: \"Score N/A\" };\n  }\n};\n\ninterface ResultHallucinationScoreProps {\n  result: SearchResultWithSnippet;\n}\n\n// In production, this would be a Netlify Function URL\n// During development, we use a mock score for demonstration\nconst isProduction = process.env.NODE_ENV === 'production';\nconst API_ENDPOINT = isProduction ? '/.netlify/functions/hallucination-check' : '/api/mock-hallucination-check';\n\nexport const ResultHallucinationScore = ({ result }: ResultHallucinationScoreProps) => {\n  const { search } = useConfigContext();\n  const [hallucinationScore, setHallucinationScore] = useState<number>(-1);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    const evaluateHallucination = async () => {\n      setIsLoading(true);\n      \n      try {\n        // Get the query from sessionStorage if available\n        const searchQuery = sessionStorage.getItem('lastQuery') || \"search query\";\n        \n        // Format the snippet content\n        const { snippet } = result;\n        const premise = `${snippet.pre} ${snippet.text} ${snippet.post}`;\n        \n        if (!isProduction) {\n          // Mock implementation for development - simulate API call delay\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          // Generate a random score between 0.1 and 0.9 for testing\n          const mockScore = Math.round((Math.random() * 0.8 + 0.1) * 100) / 100;\n          setHallucinationScore(mockScore);\n        } else {\n          // Production implementation - call Netlify Function\n          const response = await fetch(API_ENDPOINT, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              premise,\n              hypothesis: searchQuery,\n              hfToken: search.hfToken\n            })\n          });\n          \n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          \n          const data = await response.json();\n          setHallucinationScore(data.score);\n        }\n      } catch (error) {\n        console.error(\"Error evaluating hallucination:\", error);\n        setHallucinationScore(-1);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    evaluateHallucination();\n  }, [result, search.hfToken, isProduction]);\n\n  const confidenceLevel = getConfidenceLevel(hallucinationScore);\n  const { color, label } = getBadgeProps(confidenceLevel);\n\n  return (\n    <VuiFlexContainer alignItems=\"center\" spacing=\"xs\">\n      <VuiFlexItem grow={false} shrink={false}>\n        <VuiBadge color={color}>\n          {isLoading ? \"Evaluating...\" : label}\n        </VuiBadge>\n      </VuiFlexItem>\n      {hallucinationScore >= 0 && !isLoading && (\n        <VuiFlexItem grow={false} shrink={false}>\n          <VuiText size=\"xs\">\n            <p>\n              <VuiTextColor color=\"subdued\">\n                FCS: {hallucinationScore.toFixed(2)}\n              </VuiTextColor>\n            </p>\n          </VuiText>\n        </VuiFlexItem>\n      )}\n    </VuiFlexContainer>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}