{"ast":null,"code":"import * as e from \"react\";\nfunction t() {\n  return t = Object.assign ? Object.assign.bind() : function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n    }\n    return e;\n  }, t.apply(this, arguments);\n}\nconst n = [\"children\", \"options\"],\n  r = {\n    blockQuote: \"0\",\n    breakLine: \"1\",\n    breakThematic: \"2\",\n    codeBlock: \"3\",\n    codeFenced: \"4\",\n    codeInline: \"5\",\n    footnote: \"6\",\n    footnoteReference: \"7\",\n    gfmTask: \"8\",\n    heading: \"9\",\n    headingSetext: \"10\",\n    htmlBlock: \"11\",\n    htmlComment: \"12\",\n    htmlSelfClosing: \"13\",\n    image: \"14\",\n    link: \"15\",\n    linkAngleBraceStyleDetector: \"16\",\n    linkBareUrlDetector: \"17\",\n    linkMailtoDetector: \"18\",\n    newlineCoalescer: \"19\",\n    orderedList: \"20\",\n    paragraph: \"21\",\n    ref: \"22\",\n    refImage: \"23\",\n    refLink: \"24\",\n    table: \"25\",\n    tableSeparator: \"26\",\n    text: \"27\",\n    textBolded: \"28\",\n    textEmphasized: \"29\",\n    textEscaped: \"30\",\n    textMarked: \"31\",\n    textStrikethroughed: \"32\",\n    unorderedList: \"33\"\n  };\nvar i;\n!function (e) {\n  e[e.MAX = 0] = \"MAX\", e[e.HIGH = 1] = \"HIGH\", e[e.MED = 2] = \"MED\", e[e.LOW = 3] = \"LOW\", e[e.MIN = 4] = \"MIN\";\n}(i || (i = {}));\nconst l = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce((e, t) => (e[t.toLowerCase()] = t, e), {\n    class: \"className\",\n    for: \"htmlFor\"\n  }),\n  a = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  o = [\"style\", \"script\"],\n  c = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  s = /mailto:/i,\n  d = /\\n{2,}$/,\n  u = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/,\n  p = /^ *> ?/gm,\n  f = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/,\n  h = /^ {2,}\\n/,\n  m = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/,\n  g = /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/,\n  y = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  k = /^(`+)((?:\\\\`|[^`])+)\\1/,\n  x = /^(?:\\n *)*\\n/,\n  b = /\\r\\n?/g,\n  v = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/,\n  C = /^\\[\\^([^\\]]+)]/,\n  $ = /\\f/g,\n  S = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/,\n  w = /^\\s*?\\[(x|\\s)\\]/,\n  E = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  z = /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  L = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  A = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i,\n  T = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,\n  B = /^<!--[\\s\\S]*?(?:-->)/,\n  O = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  M = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  R = /^\\{.*\\}$/,\n  I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  U = /^<([^ >]+@[^ >]+)>/,\n  D = /^<([^ >]+:\\/[^ >]+)>/,\n  N = /-([a-z])?/gi,\n  j = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/,\n  H = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/,\n  P = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  _ = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  F = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  G = /\\t/g,\n  W = /(^ *\\||\\| *$)/g,\n  Z = /^ *:-+: *$/,\n  q = /^ *:-+ *$/,\n  Q = /^ *-+: *$/,\n  V = \"((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)\",\n  X = new RegExp(`^([*_])\\\\1${V}\\\\1\\\\1(?!\\\\1)`),\n  J = new RegExp(`^([*_])${V}\\\\1(?!\\\\1)`),\n  K = new RegExp(`^(==)${V}\\\\1`),\n  Y = new RegExp(`^(~~)${V}\\\\1`),\n  ee = /^\\\\([^0-9A-Za-z\\s])/,\n  te = /\\\\([^0-9A-Za-z\\s])/g,\n  ne = /^([\\s\\S](?:(?!  |[0-9]\\.)[^*_~\\-\\n<`\\\\\\[!])*)/,\n  re = /^\\n+/,\n  ie = /^([ \\t]*)/,\n  le = /\\\\([^\\\\])/g,\n  ae = /(?:^|\\n)( *)$/,\n  oe = \"(?:\\\\d+\\\\.)\",\n  ce = \"(?:[*+-])\";\nfunction se(e) {\n  return \"( *)(\" + (1 === e ? oe : ce) + \") +\";\n}\nconst de = se(1),\n  ue = se(2);\nfunction pe(e) {\n  return new RegExp(\"^\" + (1 === e ? de : ue));\n}\nconst fe = pe(1),\n  he = pe(2);\nfunction me(e) {\n  return new RegExp(\"^\" + (1 === e ? de : ue) + \"[^\\\\n]*(?:\\\\n(?!\\\\1\" + (1 === e ? oe : ce) + \" )[^\\\\n]*)*(\\\\n|$)\", \"gm\");\n}\nconst ge = me(1),\n  ye = me(2);\nfunction ke(e) {\n  const t = 1 === e ? oe : ce;\n  return new RegExp(\"^( *)(\" + t + \") [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1\" + t + \" (?!\" + t + \" ))\\\\n*|\\\\s*\\\\n*$)\");\n}\nconst xe = ke(1),\n  be = ke(2);\nfunction ve(e, t) {\n  const n = 1 === t,\n    i = n ? xe : be,\n    l = n ? ge : ye,\n    a = n ? fe : he;\n  return {\n    match: Oe(function (e, t) {\n      const n = ae.exec(t.prevCapture);\n      return n && (t.list || !t.inline && !t.simple) ? i.exec(e = n[1] + e) : null;\n    }),\n    order: 1,\n    parse(e, t, r) {\n      const i = n ? +e[2] : void 0,\n        o = e[0].replace(d, \"\\n\").match(l);\n      let c = !1;\n      return {\n        items: o.map(function (e, n) {\n          const i = a.exec(e)[0].length,\n            l = new RegExp(\"^ {1,\" + i + \"}\", \"gm\"),\n            s = e.replace(l, \"\").replace(a, \"\"),\n            d = n === o.length - 1,\n            u = -1 !== s.indexOf(\"\\n\\n\") || d && c;\n          c = u;\n          const p = r.inline,\n            f = r.list;\n          let h;\n          r.list = !0, u ? (r.inline = !1, h = Ee(s) + \"\\n\\n\") : (r.inline = !0, h = Ee(s));\n          const m = t(h, r);\n          return r.inline = p, r.list = f, m;\n        }),\n        ordered: n,\n        start: i\n      };\n    },\n    render: (t, n, i) => e(t.ordered ? \"ol\" : \"ul\", {\n      key: i.key,\n      start: t.type === r.orderedList ? t.start : void 0\n    }, t.items.map(function (t, r) {\n      return e(\"li\", {\n        key: r\n      }, n(t, i));\n    }))\n  };\n}\nconst Ce = new RegExp(\"^\\\\[((?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*)\\\\]\\\\(\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  $e = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,\n  Se = [u, g, y, E, L, z, j, xe, be],\n  we = [...Se, /^[^\\n]+(?:  \\n|\\n{2,})/, A, B, M];\nfunction Ee(e) {\n  let t = e.length;\n  for (; t > 0 && e[t - 1] <= \" \";) t--;\n  return e.slice(0, t);\n}\nfunction ze(e) {\n  return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction Le(e) {\n  return Q.test(e) ? \"right\" : Z.test(e) ? \"center\" : q.test(e) ? \"left\" : null;\n}\nfunction Ae(e, t, n, r) {\n  const i = n.inTable;\n  n.inTable = !0;\n  let l = [[]],\n    a = \"\";\n  function o() {\n    if (!a) return;\n    const e = l[l.length - 1];\n    e.push.apply(e, t(a, n)), a = \"\";\n  }\n  return e.trim().split(/(`[^`]*`|\\\\\\||\\|)/).filter(Boolean).forEach((e, t, n) => {\n    \"|\" === e.trim() && (o(), r) ? 0 !== t && t !== n.length - 1 && l.push([]) : a += e;\n  }), o(), n.inTable = i, l;\n}\nfunction Te(e, t, n) {\n  n.inline = !0;\n  const i = e[2] ? e[2].replace(W, \"\").split(\"|\").map(Le) : [],\n    l = e[3] ? function (e, t, n) {\n      return e.trim().split(\"\\n\").map(function (e) {\n        return Ae(e, t, n, !0);\n      });\n    }(e[3], t, n) : [],\n    a = Ae(e[1], t, n, !!l.length);\n  return n.inline = !1, l.length ? {\n    align: i,\n    cells: l,\n    header: a,\n    type: r.table\n  } : {\n    children: a,\n    type: r.paragraph\n  };\n}\nfunction Be(e, t) {\n  return null == e.align[t] ? {} : {\n    textAlign: e.align[t]\n  };\n}\nfunction Oe(e) {\n  return e.inline = 1, e;\n}\nfunction Me(e) {\n  return Oe(function (t, n) {\n    return n.inline ? e.exec(t) : null;\n  });\n}\nfunction Re(e) {\n  return Oe(function (t, n) {\n    return n.inline || n.simple ? e.exec(t) : null;\n  });\n}\nfunction Ie(e) {\n  return function (t, n) {\n    return n.inline || n.simple ? null : e.exec(t);\n  };\n}\nfunction Ue(e) {\n  return Oe(function (t) {\n    return e.exec(t);\n  });\n}\nfunction De(e, t) {\n  if (t.inline || t.simple) return null;\n  let n = \"\";\n  e.split(\"\\n\").every(e => (e += \"\\n\", !Se.some(t => t.test(e)) && (n += e, !!e.trim())));\n  const r = Ee(n);\n  return \"\" == r ? null : [n,, r];\n}\nfunction Ne(e) {\n  try {\n    if (decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) return null;\n  } catch (e) {\n    return null;\n  }\n  return e;\n}\nfunction je(e) {\n  return e.replace(le, \"$1\");\n}\nfunction He(e, t, n) {\n  const r = n.inline || !1,\n    i = n.simple || !1;\n  n.inline = !0, n.simple = !0;\n  const l = e(t, n);\n  return n.inline = r, n.simple = i, l;\n}\nfunction Pe(e, t, n) {\n  const r = n.inline || !1,\n    i = n.simple || !1;\n  n.inline = !1, n.simple = !0;\n  const l = e(t, n);\n  return n.inline = r, n.simple = i, l;\n}\nfunction _e(e, t, n) {\n  const r = n.inline || !1;\n  n.inline = !1;\n  const i = e(t, n);\n  return n.inline = r, i;\n}\nconst Fe = (e, t, n) => ({\n  children: He(t, e[2], n)\n});\nfunction Ge() {\n  return {};\n}\nfunction We() {\n  return null;\n}\nfunction Ze() {\n  for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n    e[_key] = arguments[_key];\n  }\n  return e.filter(Boolean).join(\" \");\n}\nfunction qe(e, t, n) {\n  let r = e;\n  const i = t.split(\".\");\n  for (; i.length && (r = r[i[0]], void 0 !== r);) i.shift();\n  return r || n;\n}\nfunction Qe() {\n  let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  function d(e, n) {\n    const l = qe(i.overrides, `${e}.props`, {});\n    for (var _len2 = arguments.length, r = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      r[_key2 - 2] = arguments[_key2];\n    }\n    return i.createElement(function (e, t) {\n      const n = qe(t, e);\n      return n ? \"function\" == typeof n || \"object\" == typeof n && \"render\" in n ? n : qe(t, `${e}.component`, e) : e;\n    }(e, i.overrides), t({}, n, l, {\n      className: Ze(null == n ? void 0 : n.className, l.className) || void 0\n    }), ...r);\n  }\n  function W(e) {\n    e = e.replace(S, \"\");\n    let t = !1;\n    i.forceInline ? t = !0 : i.forceBlock || (t = !1 === F.test(e));\n    const n = ae(le(t ? e : `${Ee(e).replace(re, \"\")}\\n\\n`, {\n      inline: t\n    }));\n    for (; \"string\" == typeof n[n.length - 1] && !n[n.length - 1].trim();) n.pop();\n    if (null === i.wrapper) return n;\n    const r = i.wrapper || (t ? \"span\" : \"div\");\n    let l;\n    if (n.length > 1 || i.forceWrapper) l = n;else {\n      if (1 === n.length) return l = n[0], \"string\" == typeof l ? d(\"span\", {\n        key: \"outer\"\n      }, l) : l;\n      l = null;\n    }\n    return i.createElement(r, {\n      key: \"outer\"\n    }, l);\n  }\n  function Z(e, t) {\n    const n = t.match(c);\n    return n ? n.reduce(function (t, n) {\n      const r = n.indexOf(\"=\");\n      if (-1 !== r) {\n        const a = function (e) {\n            return -1 !== e.indexOf(\"-\") && null === e.match(O) && (e = e.replace(N, function (e, t) {\n              return t.toUpperCase();\n            })), e;\n          }(n.slice(0, r)).trim(),\n          o = function (e) {\n            const t = e[0];\n            return ('\"' === t || \"'\" === t) && e.length >= 2 && e[e.length - 1] === t ? e.slice(1, -1) : e;\n          }(n.slice(r + 1).trim()),\n          c = l[a] || a;\n        if (\"ref\" === c) return t;\n        const s = t[c] = function (e, t, n, r) {\n          return \"style\" === t ? n.split(/;\\s?/).reduce(function (e, t) {\n            const n = t.slice(0, t.indexOf(\":\"));\n            return e[n.trim().replace(/(-[a-z])/g, e => e[1].toUpperCase())] = t.slice(n.length + 1).trim(), e;\n          }, {}) : \"href\" === t || \"src\" === t ? r(n, e, t) : (n.match(R) && (n = n.slice(1, n.length - 1)), \"true\" === n || \"false\" !== n && n);\n        }(e, a, o, i.sanitizer);\n        \"string\" == typeof s && (A.test(s) || M.test(s)) && (t[c] = W(s.trim()));\n      } else \"style\" !== n && (t[l[n] || n] = !0);\n      return t;\n    }, {}) : null;\n  }\n  i.overrides = i.overrides || {}, i.sanitizer = i.sanitizer || Ne, i.slugify = i.slugify || ze, i.namedCodesToUnicode = i.namedCodesToUnicode ? t({}, a, i.namedCodesToUnicode) : a, i.createElement = i.createElement || e.createElement;\n  const q = [],\n    Q = {},\n    V = {\n      [r.blockQuote]: {\n        match: Ie(u),\n        order: 1,\n        parse(e, t, n) {\n          const [, r, i] = e[0].replace(p, \"\").match(f);\n          return {\n            alert: r,\n            children: t(i, n)\n          };\n        },\n        render(e, t, n) {\n          const l = {\n            key: n.key\n          };\n          return e.alert && (l.className = \"markdown-alert-\" + i.slugify(e.alert.toLowerCase(), ze), e.children.unshift({\n            attrs: {},\n            children: [{\n              type: r.text,\n              text: e.alert\n            }],\n            noInnerParse: !0,\n            type: r.htmlBlock,\n            tag: \"header\"\n          })), d(\"blockquote\", l, t(e.children, n));\n        }\n      },\n      [r.breakLine]: {\n        match: Ue(h),\n        order: 1,\n        parse: Ge,\n        render: (e, t, n) => d(\"br\", {\n          key: n.key\n        })\n      },\n      [r.breakThematic]: {\n        match: Ie(m),\n        order: 1,\n        parse: Ge,\n        render: (e, t, n) => d(\"hr\", {\n          key: n.key\n        })\n      },\n      [r.codeBlock]: {\n        match: Ie(y),\n        order: 0,\n        parse: e => ({\n          lang: void 0,\n          text: Ee(e[0].replace(/^ {4}/gm, \"\")).replace(te, \"$1\")\n        }),\n        render: (e, n, r) => d(\"pre\", {\n          key: r.key\n        }, d(\"code\", t({}, e.attrs, {\n          className: e.lang ? `lang-${e.lang}` : \"\"\n        }), e.text))\n      },\n      [r.codeFenced]: {\n        match: Ie(g),\n        order: 0,\n        parse: e => ({\n          attrs: Z(\"code\", e[3] || \"\"),\n          lang: e[2] || void 0,\n          text: e[4].replace(te, \"$1\"),\n          type: r.codeBlock\n        })\n      },\n      [r.codeInline]: {\n        match: Re(k),\n        order: 3,\n        parse: e => ({\n          text: e[2].replace(te, \"$1\")\n        }),\n        render: (e, t, n) => d(\"code\", {\n          key: n.key\n        }, e.text)\n      },\n      [r.footnote]: {\n        match: Ie(v),\n        order: 0,\n        parse: e => (q.push({\n          footnote: e[2],\n          identifier: e[1]\n        }), {}),\n        render: We\n      },\n      [r.footnoteReference]: {\n        match: Me(C),\n        order: 1,\n        parse: e => ({\n          target: `#${i.slugify(e[1], ze)}`,\n          text: e[1]\n        }),\n        render: (e, t, n) => d(\"a\", {\n          key: n.key,\n          href: i.sanitizer(e.target, \"a\", \"href\")\n        }, d(\"sup\", {\n          key: n.key\n        }, e.text))\n      },\n      [r.gfmTask]: {\n        match: Me(w),\n        order: 1,\n        parse: e => ({\n          completed: \"x\" === e[1].toLowerCase()\n        }),\n        render: (e, t, n) => d(\"input\", {\n          checked: e.completed,\n          key: n.key,\n          readOnly: !0,\n          type: \"checkbox\"\n        })\n      },\n      [r.heading]: {\n        match: Ie(i.enforceAtxHeadings ? z : E),\n        order: 1,\n        parse: (e, t, n) => ({\n          children: He(t, e[2], n),\n          id: i.slugify(e[2], ze),\n          level: e[1].length\n        }),\n        render: (e, t, n) => d(`h${e.level}`, {\n          id: e.id,\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.headingSetext]: {\n        match: Ie(L),\n        order: 0,\n        parse: (e, t, n) => ({\n          children: He(t, e[1], n),\n          level: \"=\" === e[2] ? 1 : 2,\n          type: r.heading\n        })\n      },\n      [r.htmlBlock]: {\n        match: Ue(A),\n        order: 1,\n        parse(e, t, n) {\n          const [, r] = e[3].match(ie),\n            i = new RegExp(`^${r}`, \"gm\"),\n            l = e[3].replace(i, \"\"),\n            a = (c = l, we.some(e => e.test(c)) ? _e : He);\n          var c;\n          const s = e[1].toLowerCase(),\n            d = -1 !== o.indexOf(s),\n            u = (d ? s : e[1]).trim(),\n            p = {\n              attrs: Z(u, e[2]),\n              noInnerParse: d,\n              tag: u\n            };\n          return n.inAnchor = n.inAnchor || \"a\" === s, d ? p.text = e[3] : p.children = a(t, l, n), n.inAnchor = !1, p;\n        },\n        render: (e, n, r) => d(e.tag, t({\n          key: r.key\n        }, e.attrs), e.text || (e.children ? n(e.children, r) : \"\"))\n      },\n      [r.htmlSelfClosing]: {\n        match: Ue(M),\n        order: 1,\n        parse(e) {\n          const t = e[1].trim();\n          return {\n            attrs: Z(t, e[2] || \"\"),\n            tag: t\n          };\n        },\n        render: (e, n, r) => d(e.tag, t({}, e.attrs, {\n          key: r.key\n        }))\n      },\n      [r.htmlComment]: {\n        match: Ue(B),\n        order: 1,\n        parse: () => ({}),\n        render: We\n      },\n      [r.image]: {\n        match: Re($e),\n        order: 1,\n        parse: e => ({\n          alt: e[1],\n          target: je(e[2]),\n          title: e[3]\n        }),\n        render: (e, t, n) => d(\"img\", {\n          key: n.key,\n          alt: e.alt || void 0,\n          title: e.title || void 0,\n          src: i.sanitizer(e.target, \"img\", \"src\")\n        })\n      },\n      [r.link]: {\n        match: Me(Ce),\n        order: 3,\n        parse: (e, t, n) => ({\n          children: Pe(t, e[1], n),\n          target: je(e[2]),\n          title: e[3]\n        }),\n        render: (e, t, n) => d(\"a\", {\n          key: n.key,\n          href: i.sanitizer(e.target, \"a\", \"href\"),\n          title: e.title\n        }, t(e.children, n))\n      },\n      [r.linkAngleBraceStyleDetector]: {\n        match: Me(D),\n        order: 0,\n        parse: e => ({\n          children: [{\n            text: e[1],\n            type: r.text\n          }],\n          target: e[1],\n          type: r.link\n        })\n      },\n      [r.linkBareUrlDetector]: {\n        match: Oe((e, t) => t.inAnchor || i.disableAutoLink ? null : Me(I)(e, t)),\n        order: 0,\n        parse: e => ({\n          children: [{\n            text: e[1],\n            type: r.text\n          }],\n          target: e[1],\n          title: void 0,\n          type: r.link\n        })\n      },\n      [r.linkMailtoDetector]: {\n        match: Me(U),\n        order: 0,\n        parse(e) {\n          let t = e[1],\n            n = e[1];\n          return s.test(n) || (n = \"mailto:\" + n), {\n            children: [{\n              text: t.replace(\"mailto:\", \"\"),\n              type: r.text\n            }],\n            target: n,\n            type: r.link\n          };\n        }\n      },\n      [r.orderedList]: ve(d, 1),\n      [r.unorderedList]: ve(d, 2),\n      [r.newlineCoalescer]: {\n        match: Ie(x),\n        order: 3,\n        parse: Ge,\n        render: () => \"\\n\"\n      },\n      [r.paragraph]: {\n        match: Oe(De),\n        order: 3,\n        parse: Fe,\n        render: (e, t, n) => d(\"p\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.ref]: {\n        match: Me(H),\n        order: 0,\n        parse: e => (Q[e[1]] = {\n          target: e[2],\n          title: e[4]\n        }, {}),\n        render: We\n      },\n      [r.refImage]: {\n        match: Re(P),\n        order: 0,\n        parse: e => ({\n          alt: e[1] || void 0,\n          ref: e[2]\n        }),\n        render: (e, t, n) => Q[e.ref] ? d(\"img\", {\n          key: n.key,\n          alt: e.alt,\n          src: i.sanitizer(Q[e.ref].target, \"img\", \"src\"),\n          title: Q[e.ref].title\n        }) : null\n      },\n      [r.refLink]: {\n        match: Me(_),\n        order: 0,\n        parse: (e, t, n) => ({\n          children: t(e[1], n),\n          fallbackChildren: e[0],\n          ref: e[2]\n        }),\n        render: (e, t, n) => Q[e.ref] ? d(\"a\", {\n          key: n.key,\n          href: i.sanitizer(Q[e.ref].target, \"a\", \"href\"),\n          title: Q[e.ref].title\n        }, t(e.children, n)) : d(\"span\", {\n          key: n.key\n        }, e.fallbackChildren)\n      },\n      [r.table]: {\n        match: Ie(j),\n        order: 1,\n        parse: Te,\n        render(e, t, n) {\n          const r = e;\n          return d(\"table\", {\n            key: n.key\n          }, d(\"thead\", null, d(\"tr\", null, r.header.map(function (e, i) {\n            return d(\"th\", {\n              key: i,\n              style: Be(r, i)\n            }, t(e, n));\n          }))), d(\"tbody\", null, r.cells.map(function (e, i) {\n            return d(\"tr\", {\n              key: i\n            }, e.map(function (e, i) {\n              return d(\"td\", {\n                key: i,\n                style: Be(r, i)\n              }, t(e, n));\n            }));\n          })));\n        }\n      },\n      [r.text]: {\n        match: Ue(ne),\n        order: 4,\n        parse: e => ({\n          text: e[0].replace(T, (e, t) => i.namedCodesToUnicode[t] ? i.namedCodesToUnicode[t] : e)\n        }),\n        render: e => e.text\n      },\n      [r.textBolded]: {\n        match: Re(X),\n        order: 2,\n        parse: (e, t, n) => ({\n          children: t(e[2], n)\n        }),\n        render: (e, t, n) => d(\"strong\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.textEmphasized]: {\n        match: Re(J),\n        order: 3,\n        parse: (e, t, n) => ({\n          children: t(e[2], n)\n        }),\n        render: (e, t, n) => d(\"em\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.textEscaped]: {\n        match: Re(ee),\n        order: 1,\n        parse: e => ({\n          text: e[1],\n          type: r.text\n        })\n      },\n      [r.textMarked]: {\n        match: Re(K),\n        order: 3,\n        parse: Fe,\n        render: (e, t, n) => d(\"mark\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.textStrikethroughed]: {\n        match: Re(Y),\n        order: 3,\n        parse: Fe,\n        render: (e, t, n) => d(\"del\", {\n          key: n.key\n        }, t(e.children, n))\n      }\n    };\n  !0 === i.disableParsingRawHTML && (delete V[r.htmlBlock], delete V[r.htmlSelfClosing]);\n  const le = function (e) {\n      let t = Object.keys(e);\n      function n(r, i) {\n        let l,\n          a,\n          o = [],\n          c = \"\",\n          s = \"\";\n        for (i.prevCapture = i.prevCapture || \"\"; r;) {\n          let d = 0;\n          for (; d < t.length;) {\n            if (c = t[d], l = e[c], i.inline && !l.match.inline) {\n              d++;\n              continue;\n            }\n            const u = l.match(r, i);\n            if (u) {\n              s = u[0], i.prevCapture += s, r = r.substring(s.length), a = l.parse(u, n, i), null == a.type && (a.type = c), o.push(a);\n              break;\n            }\n            d++;\n          }\n        }\n        return i.prevCapture = \"\", o;\n      }\n      return t.sort(function (t, n) {\n        let r = e[t].order,\n          i = e[n].order;\n        return r !== i ? r - i : t < n ? -1 : 1;\n      }), function (e, t) {\n        return n(function (e) {\n          return e.replace(b, \"\\n\").replace($, \"\").replace(G, \"    \");\n        }(e), t);\n      };\n    }(V),\n    ae = (oe = function (e, t) {\n      return function (n, r, i) {\n        const l = e[n.type].render;\n        return t ? t(() => l(n, r, i), n, r, i) : l(n, r, i);\n      };\n    }(V, i.renderRule), function e(t) {\n      let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (Array.isArray(t)) {\n        const r = n.key,\n          i = [];\n        let l = !1;\n        for (let r = 0; r < t.length; r++) {\n          n.key = r;\n          const a = e(t[r], n),\n            o = \"string\" == typeof a;\n          o && l ? i[i.length - 1] += a : null !== a && i.push(a), l = o;\n        }\n        return n.key = r, i;\n      }\n      return oe(t, e, n);\n    });\n  var oe;\n  const ce = W(n);\n  return q.length ? d(\"div\", null, ce, d(\"footer\", {\n    key: \"footer\"\n  }, q.map(function (e) {\n    return d(\"div\", {\n      id: i.slugify(e.identifier, ze),\n      key: e.identifier\n    }, e.identifier, ae(le(e.footnote, {\n      inline: !0\n    })));\n  }))) : ce;\n}\nexport default t => {\n  let {\n      children: r = \"\",\n      options: i\n    } = t,\n    l = function (e, t) {\n      if (null == e) return {};\n      var n,\n        r,\n        i = {},\n        l = Object.keys(e);\n      for (r = 0; r < l.length; r++) t.indexOf(n = l[r]) >= 0 || (i[n] = e[n]);\n      return i;\n    }(t, n);\n  return e.cloneElement(Qe(r, i), l);\n};\nexport { r as RuleType, Qe as compiler, Ne as sanitizer, ze as slugify };","map":{"version":3,"names":["r","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","i","e","MAX","HIGH","MED","LOW","MIN","l","reduce","t","toLowerCase","class","for","a","amp","apos","gt","lt","nbsp","quot","o","c","s","d","u","p","f","h","m","g","y","k","x","b","v","C","$","S","w","E","z","L","A","T","B","O","M","R","I","U","D","N","j","H","P","_","F","G","W","Z","q","Q","V","X","RegExp","J","K","Y","ee","te","ne","re","ie","le","ae","oe","ce","se","de","ue","pe","fe","he","me","ge","ye","ke","xe","be","ve","n","match","Oe","exec","prevCapture","list","inline","simple","order","parse","replace","items","map","length","indexOf","Ee","ordered","start","render","key","type","Ce","$e","Se","we","slice","ze","Le","test","Ae","inTable","push","apply","trim","split","filter","Boolean","forEach","Te","align","cells","header","children","Be","textAlign","Me","Re","Ie","Ue","De","every","some","Ne","decodeURIComponent","je","He","Pe","_e","Fe","Ge","We","Ze","_len","arguments","Array","_key","join","qe","shift","Qe","undefined","overrides","_len2","_key2","createElement","className","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","sanitizer","slugify","namedCodesToUnicode","alert","unshift","attrs","noInnerParse","tag","lang","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","inAnchor","alt","title","src","disableAutoLink","fallbackChildren","style","disableParsingRawHTML","Object","keys","substring","sort","renderRule","isArray","options","cloneElement","RuleType","compiler"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/node_modules/markdown-to-jsx/index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.keys(RuleType).forEach(key => (RuleType[key] = key))\n}\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)((?:\\\\`|[^`])+)\\1/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^(==)${INLINE_SKIP_R}\\\\1`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^(~~)${INLINE_SKIP_R}\\\\1`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_UNESCAPE_R = /\\\\([^0-9A-Za-z\\s])/g\n\n/**\n * Always take the first character, then eagerly take text until a double space\n * (potential line break) or some markdown-like punctuation is reached.\n */\nconst TEXT_PLAIN_R = /^([\\s\\S](?:(?!  |[0-9]\\.)[^*_~\\-\\n<`\\\\\\[!])*)/\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match: allowInline(function (source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListAllowed = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListAllowed) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    }),\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for delta afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = trimEnd(content) + '\\n\\n'\n        } else {\n          state.inline = true\n          adjustedContent = trimEnd(content)\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction trimEnd(str: string) {\n  let end = str.length\n  while (end > 0 && str[end - 1] <= ' ') end--\n  return str.slice(0, end)\n}\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n\n  state.inTable = true\n\n  let cells: MarkdownToJSX.ParserResult[][] = [[]]\n  let acc = ''\n\n  function flush() {\n    if (!acc) return\n\n    const cell = cells[cells.length - 1]\n    cell.push.apply(cell, parse(acc, state))\n    acc = ''\n  }\n\n  source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/(`[^`]*`|\\\\\\||\\|)/)\n    .filter(Boolean)\n    .forEach((fragment, i, arr) => {\n      if (fragment.trim() === '|') {\n        flush()\n\n        if (tableOutput) {\n          if (i !== 0 && i !== arr.length - 1) {\n            // Split the current row\n            cells.push([])\n          }\n\n          return\n        }\n      }\n\n      acc += fragment\n    })\n\n  flush()\n\n  state.inTable = prevInTable\n\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n    let rule\n    let ruleType = ''\n    let parsed\n    let currCaptureString = ''\n\n    state.prevCapture = state.prevCapture || ''\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        ruleType = ruleList[i]\n        rule = rules[ruleType]\n\n        if (state.inline && !rule.match.inline) {\n          i++\n          continue\n        }\n\n        const capture = rule.match(source, state)\n\n        if (capture) {\n          currCaptureString = capture[0]\n\n          // retain what's been processed so far for lookbacks\n          state.prevCapture += currCaptureString\n\n          source = source.substring(currCaptureString.length)\n\n          parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n          break\n        }\n\n        i++\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n/**\n * Marks a matcher function as eligible for being run inside an inline context;\n * allows us to do a little less work in the nested parser.\n */\nfunction allowInline<T extends Function & { inline?: 0 | 1 }>(fn: T) {\n  fn.inline = 1\n\n  return fn\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return allowInline(function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return allowInline(function match(\n    source: string,\n    state: MarkdownToJSX.State\n  ) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return allowInline(function match(source: string /*, state*/) {\n    return regex.exec(source)\n  })\n}\n\nfunction matchParagraph(source: string, state: MarkdownToJSX.State) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    line += '\\n'\n\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n\n    match += line\n\n    return !!line.trim()\n  })\n\n  const captured = trimEnd(match)\n  if (captured == '') {\n    return null\n  }\n\n  // parseCaptureInline expects the inner content to be at index 2\n  // because index 1 is the delimiter for text formatting syntaxes\n  return [match, , captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[2], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactNode[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactNode {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${trimEnd(input).replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return options.createElement(\n      wrapper,\n      { key: 'outer' },\n      jsx\n    ) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' +\n            options.slugify(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: trimEnd(capture[0].replace(/^ {4}/gm, '')).replace(\n            TEXT_UNESCAPE_R,\n            '$1'\n          ),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4].replace(TEXT_UNESCAPE_R, '$1'),\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2].replace(TEXT_UNESCAPE_R, '$1'),\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: allowInline((source, state) => {\n        if (state.inAnchor || options.disableAutoLink) {\n          return null\n        }\n\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      }),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: allowInline(matchParagraph),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   // rules[key].match = (...args) => {\n  //   //   const start = performance.now()\n  //   //   const result = match(...args)\n  //   //   const delta = performance.now() - start\n\n  //   //   if (delta > 5)\n  //   //     console.warn(\n  //   //       `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //   //     )\n\n  //   //   return result\n  //   // }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     console[delta > 5 ? 'warn' : 'log'](\n  //       `${key}:parse`,\n  //       `${delta.toFixed(3)}ms`,\n  //       args[0]\n  //     )\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactNode\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactNode[]\n    ) => React.ReactNode\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactNode,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactNode\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"],"mappings":";;;;;;;;;;;EAcaA,CAAA,GAAW;IACtBC,UAAA,EAAY;IACZC,SAAA,EAAW;IACXC,aAAA,EAAe;IACfC,SAAA,EAAW;IACXC,UAAA,EAAY;IACZC,UAAA,EAAY;IACZC,QAAA,EAAU;IACVC,iBAAA,EAAmB;IACnBC,OAAA,EAAS;IACTC,OAAA,EAAS;IACTC,aAAA,EAAe;IAEfC,SAAA,EAAW;IACXC,WAAA,EAAa;IAEbC,eAAA,EAAiB;IACjBC,KAAA,EAAO;IACPC,IAAA,EAAM;IAENC,2BAAA,EAA6B;IAE7BC,mBAAA,EAAqB;IAErBC,kBAAA,EAAoB;IACpBC,gBAAA,EAAkB;IAClBC,WAAA,EAAa;IACbC,SAAA,EAAW;IACXC,GAAA,EAAK;IACLC,QAAA,EAAU;IACVC,OAAA,EAAS;IACTC,KAAA,EAAO;IACPC,cAAA,EAAgB;IAChBC,IAAA,EAAM;IACNC,UAAA,EAAY;IACZC,cAAA,EAAgB;IAChBC,WAAA,EAAa;IACbC,UAAA,EAAY;IACZC,mBAAA,EAAqB;IACrBC,aAAA,EAAe;EAAA;AASjB,IAAWC,CAAA;AAAA,CAAX,UAAWC,CAAA;EAITA,CAAA,CAAAA,CAAA,CAAAC,GAAA,eAIAD,CAAA,CAAAA,CAAA,CAAAE,IAAA,gBAIAF,CAAA,CAAAA,CAAA,CAAAG,GAAA,eAIAH,CAAA,CAAAA,CAAA,CAAAI,GAAA,eAIAJ,CAAA,CAAAA,CAAA,CAAAK,GAAA,aACD;AAAA,CArBD,CAAWN,CAAA,KAAAA,CAAA;AAwBX,MAAMO,CAAA,GAA4B,CAChC,mBACA,qBACA,gBACA,aACA,YACA,eACA,eACA,WACA,WACA,WACA,mBACA,eACA,eACA,WACA,cACA,eACA,cACA,kBACA,cACA,eACA,YACA,aACA,aACA,WACA,gBACA,eACA,aACA,cACA,aACA,cACA,cACA,YACA,WACA,cACA,UACA,WACA,UACA,YACA,UACAC,MAAA,CACA,CAACP,CAAA,EAAKQ,CAAA,MACJR,CAAA,CAAIQ,CAAA,CAAEC,WAAA,MAAiBD,CAAA,EAChBR,CAAA,GAET;IAAEU,KAAA,EAAO;IAAaC,GAAA,EAAK;EAAA;EAGvBC,CAAA,GAAsB;IAC1BC,GAAA,EAAK;IACLC,IAAA,EAAM;IACNC,EAAA,EAAI;IACJC,EAAA,EAAI;IACJC,IAAA,EAAM;IACNC,IAAA,EAAM;EAAA;EAGFC,CAAA,GAA+B,CAAC,SAAS;EAkCzCC,CAAA,GACJ;EAIIC,CAAA,GAA0B;EAC1BC,CAAA,GAAc;EACdC,CAAA,GAAe;EACfC,CAAA,GAAmC;EACnCC,CAAA,GAAqB;EACrBC,CAAA,GAAe;EACfC,CAAA,GAAmB;EACnBC,CAAA,GACJ;EACIC,CAAA,GAAe;EACfC,CAAA,GAAgB;EAChBC,CAAA,GAAwB;EACxBC,CAAA,GAAe;EAkCfC,CAAA,GAAa;EAEbC,CAAA,GAAuB;EACvBC,CAAA,GAAa;EACbC,CAAA,GAAiB;EACjBC,CAAA,GAAa;EACbC,CAAA,GAAY;EACZC,CAAA,GACJ;EACIC,CAAA,GAAmB;EAwBnBC,CAAA,GACJ;EAEIC,CAAA,GAAmB;EAEnBC,CAAA,GAAiB;EAKjBC,CAAA,GAAqB;EAErBC,CAAA,GACJ;EACIC,CAAA,GAAkB;EAClBC,CAAA,GAA2B;EAC3BC,CAAA,GAAyB;EACzBC,CAAA,GAAkB;EAClBC,CAAA,GAA8B;EAC9BC,CAAA,GAAa;EAEbC,CAAA,GAA0B;EAC1BC,CAAA,GAAoB;EACpBC,CAAA,GAAmB;EACnBC,CAAA,GAA2B;EAC3BC,CAAA,GAAQ;EACRC,CAAA,GAAmB;EACnBC,CAAA,GAAqB;EACrBC,CAAA,GAAmB;EACnBC,CAAA,GAAoB;EAOpBC,CAAA,GACJ;EAMIC,CAAA,GAAc,IAAIC,MAAA,cAAoBF,CAAA;EAKtCG,CAAA,GAAoB,IAAID,MAAA,WAAiBF,CAAA;EAKzCI,CAAA,GAAgB,IAAIF,MAAA,SAAeF,CAAA;EAKnCK,CAAA,GAAyB,IAAIH,MAAA,SAAeF,CAAA;EAE5CM,EAAA,GAAiB;EACjBC,EAAA,GAAkB;EAMlBC,EAAA,GAAe;EAEfC,EAAA,GAAyB;EAEzBC,EAAA,GAA0B;EAE1BC,EAAA,GAAiB;EAOjBC,EAAA,GAAoB;EAGpBC,EAAA,GAAsB;EACtBC,EAAA,GAAwB;AAE9B,SAASC,GAAuB5E,CAAA;EAC9B,OACE,WAZuB,MAatBA,CAAA,GAAmB0E,EAAA,GAAsBC,EAAA,IAC1C,KAEJ;AAAA;AAIA,MAAME,EAAA,GAA2BD,EAAA,CApBN;EAqBrBE,EAAA,GAA6BF,EAAA,CApBN;AAsB7B,SAASG,GAA4B/E,CAAA;EACnC,WAAW+D,MAAA,CACT,OAzBuB,MA0BpB/D,CAAA,GAAmB6E,EAAA,GAA2BC,EAAA,EAErD;AAAA;AAEA,MAAME,EAAA,GAA6BD,EAAA,CA9BR;EA+BrBE,EAAA,GAA+BF,EAAA,CA9BR;AAgC7B,SAASG,GAAsBlF,CAAA;EAQ7B,WAAW+D,MAAA,CACT,OA1CuB,MA2CpB/D,CAAA,GACG6E,EAAA,GACAC,EAAA,IAHN,yBA1CuB,MAgDpB9E,CAAA,GAAmB0E,EAAA,GAAsBC,EAAA,IAC1C,sBACF,KAEJ;AAAA;AAEA,MAAMQ,EAAA,GAAsBD,EAAA,CAtDD;EAuDrBE,EAAA,GAAwBF,EAAA,CAtDD;AA0D7B,SAASG,GAAkBrF,CAAA;EACzB,MAAMQ,CAAA,GA5DmB,MA4DVR,CAAA,GAAmB0E,EAAA,GAAsBC,EAAA;EAExD,WAAWZ,MAAA,CACT,WACEvD,CAAA,GADF,sCAKEA,CAAA,GACA,SACAA,CAAA,GAPF,qBAaJ;AAAA;AAEA,MAAM8E,EAAA,GAAiBD,EAAA,CA9EI;EA+ErBE,EAAA,GAAmBF,EAAA,CA9EI;AAgF7B,SAASG,GACPxF,CAAA,EACAQ,CAAA;EAIA,MAAMiF,CAAA,GAvFmB,MAuFTjF,CAAA;IACVT,CAAA,GAAS0F,CAAA,GAAUH,EAAA,GAAiBC,EAAA;IACpCjF,CAAA,GAAcmF,CAAA,GAAUN,EAAA,GAAsBC,EAAA;IAC9CxE,CAAA,GAAqB6E,CAAA,GACvBT,EAAA,GACAC,EAAA;EAEJ,OAAO;IACLS,KAAA,EAAOC,EAAA,CAAY,UAAU3F,CAAA,EAAQQ,CAAA;MASnC,MAAMiF,CAAA,GAAgBhB,EAAA,CAAkBmB,IAAA,CAAKpF,CAAA,CAAMqF,WAAA;MAGnD,OAAIJ,CAAA,KAFkBjF,CAAA,CAAMsF,IAAA,KAAUtF,CAAA,CAAMuF,MAAA,KAAWvF,CAAA,CAAMwF,MAAA,IAKpDjG,CAAA,CAAO6F,IAAA,CAFd5F,CAAA,GAASyF,CAAA,CAAc,KAAKzF,CAAA,QAMhC;IAAA;IACAiG,KAAA;IACAC,MAAMlG,CAAA,EAASQ,CAAA,EAAO5C,CAAA;MACpB,MACMmC,CAAA,GAAQ0F,CAAA,IADCzF,CAAA,CAAQ,UACW;QAC5BmB,CAAA,GAAQnB,CAAA,CAAQ,GAGnBmG,OAAA,CAAQ7E,CAAA,EAAa,MACrBoE,KAAA,CAAMpF,CAAA;MAET,IAAIc,CAAA,IAAwB;MAgE5B,OAAO;QACLgF,KAAA,EA/DkBjF,CAAA,CAAMkF,GAAA,CAAI,UAAUrG,CAAA,EAAMyF,CAAA;UAE5C,MAAM1F,CAAA,GAAQa,CAAA,CAAmBgF,IAAA,CAAK5F,CAAA,EAAM,GAAGsG,MAAA;YAIzChG,CAAA,GAAa,IAAIyD,MAAA,CAAO,UAAUhE,CAAA,GAAQ,KAAK;YAG/CsB,CAAA,GAAUrB,CAAA,CAEbmG,OAAA,CAAQ7F,CAAA,EAAY,IAEpB6F,OAAA,CAAQvF,CAAA,EAAoB;YASzBU,CAAA,GAAamE,CAAA,KAAMtE,CAAA,CAAMmF,MAAA,GAAS;YASlC/E,CAAA,IAR8C,MAA7BF,CAAA,CAAQkF,OAAA,CAAQ,WASlBjF,CAAA,IAAcF,CAAA;UACnCA,CAAA,GAAwBG,CAAA;UAKxB,MAAMC,CAAA,GAAiB5D,CAAA,CAAMmI,MAAA;YACvBtE,CAAA,GAAe7D,CAAA,CAAMkI,IAAA;UAK3B,IAAIpE,CAAA;UAJJ9D,CAAA,CAAMkI,IAAA,IAAO,GAKTvE,CAAA,IACF3D,CAAA,CAAMmI,MAAA,IAAS,GACfrE,CAAA,GAAkB8E,EAAA,CAAQnF,CAAA,IAAW,WAErCzD,CAAA,CAAMmI,MAAA,IAAS,GACfrE,CAAA,GAAkB8E,EAAA,CAAQnF,CAAA;UAG5B,MAAMM,CAAA,GAASnB,CAAA,CAAMkB,CAAA,EAAiB9D,CAAA;UAMtC,OAHAA,CAAA,CAAMmI,MAAA,GAASvE,CAAA,EACf5D,CAAA,CAAMkI,IAAA,GAAOrE,CAAA,EAENE,CACT;QAAA;QAIE8E,OAAA,EAAShB,CAAA;QACTiB,KAAA,EAAO3G;MAAA,CAEX;IAAA;IACA4G,MAAA,EAAMA,CAACnG,CAAA,EAAMiF,CAAA,EAAQ1F,CAAA,KAIjBC,CAAA,CAHUQ,CAAA,CAAKiG,OAAA,GAAU,OAAO;MAI9BG,GAAA,EAAK7G,CAAA,CAAM6G,GAAA;MACXF,KAAA,EAAOlG,CAAA,CAAKqG,IAAA,KAASjJ,CAAA,CAASqB,WAAA,GAAcuB,CAAA,CAAKkG,KAAA,QAAQ;IAAA,GAExDlG,CAAA,CAAK4F,KAAA,CAAMC,GAAA,CAAI,UAA0B7F,CAAA,EAAM5C,CAAA;MAC9C,OAAOoC,CAAA;QAAI4G,GAAA,EAAKhJ;MAAA,GAAI6H,CAAA,CAAOjF,CAAA,EAAMT,CAAA,EACnC;IAAA;EAAA,CAKV;AAAA;AAEA,MAGM+G,EAAA,GAAS,IAAI/C,MAAA,CACjB;EAEIgD,EAAA,GAAU;EAEVC,EAAA,GAA+B,CACnCzF,CAAA,EACAK,CAAA,EACAC,CAAA,EACAS,CAAA,EACAE,CAAA,EACAD,CAAA,EACAY,CAAA,EACAmC,EAAA,EACAC,EAAA;EAGI0B,EAAA,GAAiB,IAClBD,EAAA,EAjSe,0BAmSlBvE,CAAA,EACAE,CAAA,EACAE,CAAA;AAGF,SAAS2D,GAAQxG,CAAA;EACf,IAAIQ,CAAA,GAAMR,CAAA,CAAIsG,MAAA;EACd,OAAO9F,CAAA,GAAM,KAAKR,CAAA,CAAIQ,CAAA,GAAM,MAAM,MAAKA,CAAA;EACvC,OAAOR,CAAA,CAAIkH,KAAA,CAAM,GAAG1G,CAAA,CACtB;AAAA;AAAA,SAqBgB2G,GAAQnH,CAAA;EACtB,OAAOA,CAAA,CACJmG,OAAA,CAAQ,qBAAqB,KAC7BA,OAAA,CAAQ,SAAS,KACjBA,OAAA,CAAQ,SAAS,KACjBA,OAAA,CAAQ,eAAe,KACvBA,OAAA,CAAQ,eAAe,KACvBA,OAAA,CAAQ,SAAS,KACjBA,OAAA,CAAQ,mBAAmB,KAC3BA,OAAA,CAAQ,eAAe,KACvBA,OAAA,CAAQ,WAAW,KACnBA,OAAA,CAAQ,iBAAiB,IACzBA,OAAA,CAAQ,OAAO,KACf1F,WAAA,EACL;AAAA;AAEA,SAAS2G,GAAuBpH,CAAA;EAC9B,OAAI4D,CAAA,CAAkByD,IAAA,CAAKrH,CAAA,IAClB,UACE0D,CAAA,CAAmB2D,IAAA,CAAKrH,CAAA,IAC1B,WACE2D,CAAA,CAAiB0D,IAAA,CAAKrH,CAAA,IACxB,aAIX;AAAA;AAEA,SAASsH,GACPtH,CAAA,EACAQ,CAAA,EACAiF,CAAA,EACA7H,CAAA;EAEA,MAAMmC,CAAA,GAAc0F,CAAA,CAAM8B,OAAA;EAE1B9B,CAAA,CAAM8B,OAAA,IAAU;EAEhB,IAAIjH,CAAA,GAAwC,CAAC;IACzCM,CAAA,GAAM;EAEV,SAASO,EAAA;IACP,KAAKP,CAAA,EAAK;IAEV,MAAMZ,CAAA,GAAOM,CAAA,CAAMA,CAAA,CAAMgG,MAAA,GAAS;IAClCtG,CAAA,CAAKwH,IAAA,CAAKC,KAAA,CAAMzH,CAAA,EAAMQ,CAAA,CAAMI,CAAA,EAAK6E,CAAA,IACjC7E,CAAA,GAAM,EACR;EAAA;EA4BA,OA1BAZ,CAAA,CACG0H,IAAA,GAEAC,KAAA,CAAM,qBACNC,MAAA,CAAOC,OAAA,EACPC,OAAA,CAAQ,CAAC9H,CAAA,EAAUQ,CAAA,EAAGiF,CAAA;IACG,QAApBzF,CAAA,CAAS0H,IAAA,OACXvG,CAAA,IAEIvD,CAAA,IACQ,MAAN4C,CAAA,IAAWA,CAAA,KAAMiF,CAAA,CAAIa,MAAA,GAAS,KAEhChG,CAAA,CAAMkH,IAAA,CAAK,MAOjB5G,CAAA,IAAOZ,CAAA;EAAA,IAGXmB,CAAA,IAEAsE,CAAA,CAAM8B,OAAA,GAAUxH,CAAA,EAETO,CACT;AAAA;AAoBA,SAASyH,GACP/H,CAAA,EACAQ,CAAA,EACAiF,CAAA;EAMAA,CAAA,CAAMM,MAAA,IAAS;EACf,MAAMhG,CAAA,GAAQC,CAAA,CAAQ,KAAqBA,CAAA,CAAQ,GA3B1BmG,OAAA,CAAQ1C,CAAA,EAAkB,IAAIkE,KAAA,CAAM,KAE5CtB,GAAA,CAAIe,EAAA,IAyBoC;IACnD9G,CAAA,GAAQN,CAAA,CAAQ,KAvBxB,UACEA,CAAA,EACAQ,CAAA,EACAiF,CAAA;MAIA,OAFiBzF,CAAA,CAAO0H,IAAA,GAAOC,KAAA,CAAM,MAErBtB,GAAA,CAAI,UAAUrG,CAAA;QAC5B,OAAOsH,EAAA,CAActH,CAAA,EAASQ,CAAA,EAAOiF,CAAA,GAAO,EAC9C;MAAA,EACF;IAAA,CAa6B,CAAgBzF,CAAA,CAAQ,IAAIQ,CAAA,EAAOiF,CAAA,IAAS;IACjE7E,CAAA,GAAS0G,EAAA,CAActH,CAAA,CAAQ,IAAIQ,CAAA,EAAOiF,CAAA,IAASnF,CAAA,CAAMgG,MAAA;EAG/D,OAFAb,CAAA,CAAMM,MAAA,IAAS,GAERzF,CAAA,CAAMgG,MAAA,GACT;IACE0B,KAAA,EAAOjI,CAAA;IACPkI,KAAA,EAAO3H,CAAA;IACP4H,MAAA,EAAQtH,CAAA;IACRiG,IAAA,EAAMjJ,CAAA,CAAS0B;EAAA,IAEjB;IACE6I,QAAA,EAAUvH,CAAA;IACViG,IAAA,EAAMjJ,CAAA,CAASsB;EAAA,CAEvB;AAAA;AAEA,SAASkJ,GAAcpI,CAAA,EAAMQ,CAAA;EAC3B,OAA+B,QAAxBR,CAAA,CAAKgI,KAAA,CAAMxH,CAAA,IACd,KACA;IACE6H,SAAA,EAAWrI,CAAA,CAAKgI,KAAA,CAAMxH,CAAA;EAAA,CAE9B;AAAA;AA0LA,SAASmF,GAAqD3F,CAAA;EAG5D,OAFAA,CAAA,CAAG+F,MAAA,GAAS,GAEL/F,CACT;AAAA;AAGA,SAASsI,GAAYtI,CAAA;EACnB,OAAO2F,EAAA,CAAY,UAAenF,CAAA,EAAQiF,CAAA;IACxC,OAAIA,CAAA,CAAMM,MAAA,GACD/F,CAAA,CAAM4F,IAAA,CAAKpF,CAAA,QAItB;EAAA,EACF;AAAA;AAGA,SAAS+H,GAAkBvI,CAAA;EACzB,OAAO2F,EAAA,CAAY,UACjBnF,CAAA,EACAiF,CAAA;IAEA,OAAIA,CAAA,CAAMM,MAAA,IAAUN,CAAA,CAAMO,MAAA,GACjBhG,CAAA,CAAM4F,IAAA,CAAKpF,CAAA,QAItB;EAAA,EACF;AAAA;AAGA,SAASgI,GAAWxI,CAAA;EAClB,iBAAsBQ,CAAA,EAAgBiF,CAAA;IACpC,OAAIA,CAAA,CAAMM,MAAA,IAAUN,CAAA,CAAMO,MAAA,UAGjBhG,CAAA,CAAM4F,IAAA,CAAKpF,CAAA,CAEtB;EAAA,CACF;AAAA;AAGA,SAASiI,GAAczI,CAAA;EACrB,OAAO2F,EAAA,CAAY,UAAenF,CAAA;IAChC,OAAOR,CAAA,CAAM4F,IAAA,CAAKpF,CAAA,CACpB;EAAA,EACF;AAAA;AAEA,SAASkI,GAAe1I,CAAA,EAAgBQ,CAAA;EACtC,IAAIA,CAAA,CAAMuF,MAAA,IAAUvF,CAAA,CAAMwF,MAAA,EACxB;EAGF,IAAIP,CAAA,GAAQ;EAEZzF,CAAA,CAAO2H,KAAA,CAAM,MAAMgB,KAAA,CAAM3I,CAAA,KACvBA,CAAA,IAAQ,OAGJgH,EAAA,CAA6B4B,IAAA,CAAKpI,CAAA,IAASA,CAAA,CAAM6G,IAAA,CAAKrH,CAAA,OAI1DyF,CAAA,IAASzF,CAAA,IAEAA,CAAA,CAAK0H,IAAA;EAGhB,MAAM9J,CAAA,GAAW4I,EAAA,CAAQf,CAAA;EACzB,OAAgB,MAAZ7H,CAAA,UAMG,CAAC6H,CAAA,GAAS7H,CAAA,CACnB;AAAA;AAAA,SAEgBiL,GAAU7I,CAAA;EACxB;IAGE,IAFgB8I,kBAAA,CAAmB9I,CAAA,EAAKmG,OAAA,CAAQ,mBAAmB,IAEvDT,KAAA,CAAM,+CAQhB,WAcJ;EAAA,CAZE,QAAO1F,CAAA;IAWP,WACF;EAAA;EAEA,OAAOA,CACT;AAAA;AAEA,SAAS+I,GAAY/I,CAAA;EACnB,OAAOA,CAAA,CAAamG,OAAA,CAAQ3B,EAAA,EAAgB,KAC9C;AAAA;AAKA,SAASwE,GACPhJ,CAAA,EACAQ,CAAA,EACAiF,CAAA;EAEA,MAAM7H,CAAA,GAAoB6H,CAAA,CAAMM,MAAA,KAAU;IACpChG,CAAA,GAAoB0F,CAAA,CAAMO,MAAA,KAAU;EAC1CP,CAAA,CAAMM,MAAA,IAAS,GACfN,CAAA,CAAMO,MAAA,IAAS;EACf,MAAM1F,CAAA,GAASN,CAAA,CAAMQ,CAAA,EAAUiF,CAAA;EAG/B,OAFAA,CAAA,CAAMM,MAAA,GAASnI,CAAA,EACf6H,CAAA,CAAMO,MAAA,GAASjG,CAAA,EACRO,CACT;AAAA;AAKA,SAAS2I,GACPjJ,CAAA,EACAQ,CAAA,EACAiF,CAAA;EAEA,MAAM7H,CAAA,GAAoB6H,CAAA,CAAMM,MAAA,KAAU;IACpChG,CAAA,GAAoB0F,CAAA,CAAMO,MAAA,KAAU;EAC1CP,CAAA,CAAMM,MAAA,IAAS,GACfN,CAAA,CAAMO,MAAA,IAAS;EACf,MAAM1F,CAAA,GAASN,CAAA,CAAMQ,CAAA,EAAUiF,CAAA;EAG/B,OAFAA,CAAA,CAAMM,MAAA,GAASnI,CAAA,EACf6H,CAAA,CAAMO,MAAA,GAASjG,CAAA,EACRO,CACT;AAAA;AAEA,SAAS4I,GACPlJ,CAAA,EACAQ,CAAA,EACAiF,CAAA;EAEA,MAAM7H,CAAA,GAAoB6H,CAAA,CAAMM,MAAA,KAAU;EAC1CN,CAAA,CAAMM,MAAA,IAAS;EACf,MAAMhG,CAAA,GAASC,CAAA,CAAMQ,CAAA,EAAUiF,CAAA;EAE/B,OADAA,CAAA,CAAMM,MAAA,GAASnI,CAAA,EACRmC,CACT;AAAA;AAEA,MAAMoJ,EAAA,GAEDA,CAACnJ,CAAA,EAASQ,CAAA,EAAOiF,CAAA,MACb;EACL0C,QAAA,EAAUa,EAAA,CAAYxI,CAAA,EAAOR,CAAA,CAAQ,IAAIyF,CAAA;AAAA;AAI7C,SAAS2D,GAAA;EACP,OAAO,EACT;AAAA;AAEA,SAASC,GAAA;EACP,WACF;AAAA;AAwDA,SAASC,GAAA,EAAM;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAlD,MAAA,EAAAtG,CAAA,OAAAyJ,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAAA1J,CAAA,CAAA0J,IAAA,IAAAF,SAAA,CAAAE,IAAA;EAAA;EACb,OAAO1J,CAAA,CAAK4H,MAAA,CAAOC,OAAA,EAAS8B,IAAA,CAAK,IACnC;AAAA;AAEA,SAASC,GAAI5J,CAAA,EAAaQ,CAAA,EAAciF,CAAA;EACtC,IAAI7H,CAAA,GAAMoC,CAAA;EACV,MAAMD,CAAA,GAAQS,CAAA,CAAKmH,KAAA,CAAM;EAEzB,OAAO5H,CAAA,CAAMuG,MAAA,KACX1I,CAAA,GAAMA,CAAA,CAAImC,CAAA,CAAM,UAEJ,MAARnC,CAAA,IACCmC,CAAA,CAAM8J,KAAA;EAGb,OAAOjM,CAAA,IAAO6H,CAChB;AAAA;AAAA,SAagBqE,GAAA,EAEmB;EAAA,IADjCrE,CAAA,GAAA+D,SAAA,CAAAlD,MAAA,QAAAkD,SAAA,QAAAO,SAAA,GAAAP,SAAA,MAAmB;EAAA,IACnBzJ,CAAA,GAAAyJ,SAAA,CAAAlD,MAAA,QAAAkD,SAAA,QAAAO,SAAA,GAAAP,SAAA,MAAiC;EAajC,SAASlI,EAEPtB,CAAA,EACAyF,CAAA,EAIG;IAEH,MAAMnF,CAAA,GAAgBsJ,EAAA,CAAI7J,CAAA,CAAQiK,SAAA,KAAchK,CAAA,UAAa;IAE7D,SAAAiK,KAAA,GAAAT,SAAA,CAAAlD,MAAA,EAJG1I,CAAA,OAAA6L,KAAA,CAAAQ,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAAtM,CAAA,CAAAsM,KAAA,QAAAV,SAAA,CAAAU,KAAA;IAAA;IAIH,OAAOnK,CAAA,CAAQoK,aAAA,CArCnB,UAAgBnK,CAAA,EAAaQ,CAAA;MAC3B,MAAMiF,CAAA,GAAWmE,EAAA,CAAIpJ,CAAA,EAAWR,CAAA;MAEhC,OAAKyF,CAAA,GAEsB,qBAAbA,CAAA,IACS,mBAAbA,CAAA,IAAyB,YAAYA,CAAA,GAC3CA,CAAA,GACAmE,EAAA,CAAIpJ,CAAA,KAAcR,CAAA,cAAiBA,CAAA,IALjBA,CAMxB;IAAA,CA6BM,CAAOA,CAAA,EAAKD,CAAA,CAAQiK,SAAA,GAAUxJ,CAAA,KAEzBiF,CAAA,EACAnF,CAAA;MACH8J,SAAA,EAAWd,EAAA,SAAG7D,CAAA,YAAAA,CAAA,CAAO2E,SAAA,EAAW9J,CAAA,CAAc8J,SAAA,UAAc;IAAA,OAE3DxM,CAAA,CAEP;EAAA;EAEA,SAAS6F,EAAQzD,CAAA;IACfA,CAAA,GAAQA,CAAA,CAAMmG,OAAA,CAAQ/D,CAAA,EAAgB;IAEtC,IAAI5B,CAAA,IAAS;IAETT,CAAA,CAAQsK,WAAA,GACV7J,CAAA,IAAS,IACCT,CAAA,CAAQuK,UAAA,KAKlB9J,CAAA,IAAkD,MAAzC+C,CAAA,CAAyB8D,IAAA,CAAKrH,CAAA;IAGzC,MAAMyF,CAAA,GAAMhB,EAAA,CACVD,EAAA,CACEhE,CAAA,GACIR,CAAA,MACGwG,EAAA,CAAQxG,CAAA,EAAOmG,OAAA,CAAQ7B,EAAA,EAAwB,WACtD;MACEyB,MAAA,EAAAvF;IAAA;IAKN,OACiC,mBAAxBiF,CAAA,CAAIA,CAAA,CAAIa,MAAA,GAAS,OACvBb,CAAA,CAAIA,CAAA,CAAIa,MAAA,GAAS,GAAGoB,IAAA,KAErBjC,CAAA,CAAI8E,GAAA;IAGN,IAAwB,SAApBxK,CAAA,CAAQyK,OAAA,EACV,OAAO/E,CAAA;IAGT,MAAM7H,CAAA,GAAUmC,CAAA,CAAQyK,OAAA,KAAYhK,CAAA,GAAS,SAAS;IACtD,IAAIF,CAAA;IAEJ,IAAImF,CAAA,CAAIa,MAAA,GAAS,KAAKvG,CAAA,CAAQ0K,YAAA,EAC5BnK,CAAA,GAAMmF,CAAA;MAAA,IACkB,MAAfA,CAAA,CAAIa,MAAA,EAIb,OAHAhG,CAAA,GAAMmF,CAAA,CAAI,IAGS,mBAARnF,CAAA,GACFgB,CAAA;QAAMsF,GAAA,EAAI;MAAA,GAAStG,CAAA,IAEnBA,CAAA;MAITA,CAAA,GAAM,IACR;IAAA;IAEA,OAAOP,CAAA,CAAQoK,aAAA,CACbvM,CAAA,EACA;MAAEgJ,GAAA,EAAK;IAAA,GACPtG,CAAA,CAEJ;EAAA;EAEA,SAASoD,EACP1D,CAAA,EACAQ,CAAA;IAEA,MAAMiF,CAAA,GAAajF,CAAA,CAAIkF,KAAA,CAAMtE,CAAA;IAC7B,OAAKqE,CAAA,GAIEA,CAAA,CAAWlF,MAAA,CAAO,UAAUC,CAAA,EAAKiF,CAAA;MACtC,MAAM7H,CAAA,GAAe6H,CAAA,CAAIc,OAAA,CAAQ;MAEjC,KAAsB,MAAlB3I,CAAA,EAAqB;QACvB,MAAMgD,CAAA,GA7iBd,UAA+BZ,CAAA;YAS7B,QANqB,MAFDA,CAAA,CAAIuG,OAAA,CAAQ,QAE4B,SAAlCvG,CAAA,CAAI0F,KAAA,CAAM9C,CAAA,MAClC5C,CAAA,GAAMA,CAAA,CAAImG,OAAA,CAAQjD,CAAA,EAA6B,UAAUlD,CAAA,EAAGQ,CAAA;cAC1D,OAAOA,CAAA,CAAOkK,WAAA,EAChB;YAAA,KAGK1K,CACT;UAAA,CAmiBoB,CAAsByF,CAAA,CAAIyB,KAAA,CAAM,GAAGtJ,CAAA,GAAe8J,IAAA;UACxDvG,CAAA,GAjsBd,UAAiBnB,CAAA;YACf,MAAMQ,CAAA,GAAQR,CAAA,CAAI;YAClB,QACa,QAAVQ,CAAA,IAA2B,QAAVA,CAAA,KAClBR,CAAA,CAAIsG,MAAA,IAAU,KACdtG,CAAA,CAAIA,CAAA,CAAIsG,MAAA,GAAS,OAAO9F,CAAA,GAEjBR,CAAA,CAAIkH,KAAA,CAAM,IAAI,KAEhBlH,CACT;UAAA,CAurBsB,CAAQyF,CAAA,CAAIyB,KAAA,CAAMtJ,CAAA,GAAe,GAAG8J,IAAA;UAE5CtG,CAAA,GAAYd,CAAA,CAA0BM,CAAA,KAAQA,CAAA;QAGpD,IAAkB,UAAdQ,CAAA,EAAqB,OAAOZ,CAAA;QAEhC,MAAMa,CAAA,GAAmBb,CAAA,CAAIY,CAAA,IAziBrC,UACEpB,CAAA,EACAQ,CAAA,EACAiF,CAAA,EACA7H,CAAA;UAEA,OAAY,YAAR4C,CAAA,GACKiF,CAAA,CAAMkC,KAAA,CAAM,QAAQpH,MAAA,CAAO,UAAUP,CAAA,EAAQQ,CAAA;YAClD,MAAMiF,CAAA,GAAMjF,CAAA,CAAO0G,KAAA,CAAM,GAAG1G,CAAA,CAAO+F,OAAA,CAAQ;YAW3C,OAFAvG,CAAA,CALsByF,CAAA,CACnBiC,IAAA,GACAvB,OAAA,CAAQ,aAAanG,CAAA,IAAUA,CAAA,CAAO,GAAG0K,WAAA,OAGpBlK,CAAA,CAAO0G,KAAA,CAAMzB,CAAA,CAAIa,MAAA,GAAS,GAAGoB,IAAA,IAE9C1H,CACT;UAAA,GAAG,MACc,WAARQ,CAAA,IAA0B,UAARA,CAAA,GACpB5C,CAAA,CAAc6H,CAAA,EAAOzF,CAAA,EAAKQ,CAAA,KACxBiF,CAAA,CAAMC,KAAA,CAAM5C,CAAA,MAErB2C,CAAA,GAAQA,CAAA,CAAMyB,KAAA,CAAM,GAAGzB,CAAA,CAAMa,MAAA,GAAS,KAG1B,WAAVb,CAAA,IAEiB,YAAVA,CAAA,IAIJA,CAAA,CACT;QAAA,CAsgBkD,CACxCzF,CAAA,EACAY,CAAA,EACAO,CAAA,EACApB,CAAA,CAAQ4K,SAAA;QAImB,mBAApBtJ,CAAA,KACNoB,CAAA,CAAqB4E,IAAA,CAAKhG,CAAA,KACzBwB,CAAA,CAA4BwE,IAAA,CAAKhG,CAAA,OAEnCb,CAAA,CAAIY,CAAA,IAAaqC,CAAA,CAAQpC,CAAA,CAAgBqG,IAAA,IAE7C;MAAA,OAAmB,YAARjC,CAAA,KACTjF,CAAA,CAAIF,CAAA,CAA0BmF,CAAA,KAAQA,CAAA,KAAO;MAG/C,OAAOjF,CACT;IAAA,GAAG,UACL;EAAA;EAzIAT,CAAA,CAAQiK,SAAA,GAAYjK,CAAA,CAAQiK,SAAA,IAAa,IACzCjK,CAAA,CAAQ4K,SAAA,GAAY5K,CAAA,CAAQ4K,SAAA,IAAa9B,EAAA,EACzC9I,CAAA,CAAQ6K,OAAA,GAAU7K,CAAA,CAAQ6K,OAAA,IAAWzD,EAAA,EACrCpH,CAAA,CAAQ8K,mBAAA,GAAsB9K,CAAA,CAAQ8K,mBAAA,GAAmBrK,CAAA,KAChDI,CAAA,EAAwBb,CAAA,CAAQ8K,mBAAA,IACrCjK,CAAA,EAEJb,CAAA,CAAQoK,aAAA,GAAgBpK,CAAA,CAAQoK,aAAA,IAAiBnK,CAAA,CAAMmK,aAAA;EAwJvD,MAAMxG,CAAA,GAAwD;IACxDC,CAAA,GAA6D;IAQ7DC,CAAA,GAA6B;MACjC,CAACjG,CAAA,CAASC,UAAA,GAAa;QACrB6H,KAAA,EAAO8C,EAAA,CAAWjH,CAAA;QAClB0E,KAAA;QACAC,MAAMlG,CAAA,EAASQ,CAAA,EAAOiF,CAAA;UACpB,SAAS7H,CAAA,EAAOmC,CAAA,IAAWC,CAAA,CAAQ,GAChCmG,OAAA,CAAQ3E,CAAA,EAAkC,IAC1CkE,KAAA,CAAMjE,CAAA;UAET,OAAO;YACLqJ,KAAA,EAAAlN,CAAA;YACAuK,QAAA,EAAU3H,CAAA,CAAMT,CAAA,EAAS0F,CAAA;UAAA,CAE7B;QAAA;QACAkB,OAAO3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA;UACnB,MAAMnF,CAAA,GAAQ;YACZsG,GAAA,EAAKnB,CAAA,CAAMmB;UAAA;UAiBb,OAdI5G,CAAA,CAAK8K,KAAA,KACPxK,CAAA,CAAM8J,SAAA,GACJ,oBACArK,CAAA,CAAQ6K,OAAA,CAAQ5K,CAAA,CAAK8K,KAAA,CAAMrK,WAAA,IAAe0G,EAAA,GAE5CnH,CAAA,CAAKmI,QAAA,CAAS4C,OAAA,CAAQ;YACpBC,KAAA,EAAO;YACP7C,QAAA,EAAU,CAAC;cAAEtB,IAAA,EAAMjJ,CAAA,CAAS4B,IAAA;cAAMA,IAAA,EAAMQ,CAAA,CAAK8K;YAAA;YAC7CG,YAAA,GAAc;YACdpE,IAAA,EAAMjJ,CAAA,CAASY,SAAA;YACf0M,GAAA,EAAK;UAAA,KAIF5J,CAAA,CAAE,cAAchB,CAAA,EAAOE,CAAA,CAAOR,CAAA,CAAKmI,QAAA,EAAU1C,CAAA,EACtD;QAAA;MAAA;MAGF,CAAC7H,CAAA,CAASE,SAAA,GAAY;QACpB4H,KAAA,EAAO+C,EAAA,CAAc/G,CAAA;QACrBuE,KAAA;QACAC,KAAA,EAAOkD,EAAA;QACPzC,MAAA,EAAMA,CAAC3G,CAAA,EAAGQ,CAAA,EAAIiF,CAAA,KACLnE,CAAA;UAAIsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA;MAAA;MAI1B,CAAChJ,CAAA,CAASG,aAAA,GAAgB;QACxB2H,KAAA,EAAO8C,EAAA,CAAW7G,CAAA;QAClBsE,KAAA;QACAC,KAAA,EAAOkD,EAAA;QACPzC,MAAA,EAAMA,CAAC3G,CAAA,EAAGQ,CAAA,EAAIiF,CAAA,KACLnE,CAAA;UAAIsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA;MAAA;MAI1B,CAAChJ,CAAA,CAASI,SAAA,GAAY;QACpB0H,KAAA,EAAO8C,EAAA,CAAW3G,CAAA;QAClBoE,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACLmL,IAAA,OAAM;UACN3L,IAAA,EAAMgH,EAAA,CAAQxG,CAAA,CAAQ,GAAGmG,OAAA,CAAQ,WAAW,KAAKA,OAAA,CAC/C/B,EAAA,EACA;QAAA;QAKNuC,MAAA,EAAMA,CAAC3G,CAAA,EAAMyF,CAAA,EAAQ7H,CAAA,KAEjB0D,CAAA;UAAKsF,GAAA,EAAKhJ,CAAA,CAAMgJ;QAAA,GACdtF,CAAA,SAAAd,CAAA,KACMR,CAAA,CAAKgL,KAAA;UACTZ,SAAA,EAAWpK,CAAA,CAAKmL,IAAA,WAAenL,CAAA,CAAKmL,IAAA,KAAS;QAAA,IAE5CnL,CAAA,CAAKR,IAAA;MAAA;MAWhB,CAAC5B,CAAA,CAASK,UAAA,GAAa;QACrByH,KAAA,EAAO8C,EAAA,CAAW5G,CAAA;QAClBqE,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UAELgL,KAAA,EAAOtH,CAAA,CAAgB,QAAQ1D,CAAA,CAAQ,MAAM;UAC7CmL,IAAA,EAAMnL,CAAA,CAAQ,WAAM;UACpBR,IAAA,EAAMQ,CAAA,CAAQ,GAAGmG,OAAA,CAAQ/B,EAAA,EAAiB;UAC1CyC,IAAA,EAAMjJ,CAAA,CAASI;QAAA;MAAA;MAKrB,CAACJ,CAAA,CAASM,UAAA,GAAa;QACrBwH,KAAA,EAAO6C,EAAA,CAAkBzG,CAAA;QACzBmE,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACLR,IAAA,EAAMQ,CAAA,CAAQ,GAAGmG,OAAA,CAAQ/B,EAAA,EAAiB;QAAA;QAG9CuC,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KACZnE,CAAA;UAAMsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA,GAAM5G,CAAA,CAAKR,IAAA;MAAA;MAOvC,CAAC5B,CAAA,CAASO,QAAA,GAAW;QACnBuH,KAAA,EAAO8C,EAAA,CAAWvG,CAAA;QAClBgE,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACJ2D,CAAA,CAAU6D,IAAA,CAAK;UACbrJ,QAAA,EAAU6B,CAAA,CAAQ;UAClBoL,UAAA,EAAYpL,CAAA,CAAQ;QAAA,IAGf;QAET2G,MAAA,EAAQ0C;MAAA;MAGV,CAACzL,CAAA,CAASQ,iBAAA,GAAoB;QAC5BsH,KAAA,EAAO4C,EAAA,CAAYpG,CAAA;QACnB+D,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACLqL,MAAA,MAAYtL,CAAA,CAAQ6K,OAAA,CAAQ5K,CAAA,CAAQ,IAAImH,EAAA;UACxC3H,IAAA,EAAMQ,CAAA,CAAQ;QAAA;QAGlB2G,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KAEjBnE,CAAA;UAAGsF,GAAA,EAAKnB,CAAA,CAAMmB,GAAA;UAAK0E,IAAA,EAAMvL,CAAA,CAAQ4K,SAAA,CAAU3K,CAAA,CAAKqL,MAAA,EAAQ,KAAK;QAAA,GAC3D/J,CAAA;UAAKsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA,GAAM5G,CAAA,CAAKR,IAAA;MAAA;MAMnC,CAAC5B,CAAA,CAASS,OAAA,GAAU;QAClBqH,KAAA,EAAO4C,EAAA,CAAYjG,CAAA;QACnB4D,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACLuL,SAAA,EAAwC,QAA7BvL,CAAA,CAAQ,GAAGS,WAAA;QAAA;QAG1BkG,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KAEjBnE,CAAA;UACEkK,OAAA,EAASxL,CAAA,CAAKuL,SAAA;UACd3E,GAAA,EAAKnB,CAAA,CAAMmB,GAAA;UACX6E,QAAA;UACA5E,IAAA,EAAK;QAAA;MAAA;MAMb,CAACjJ,CAAA,CAASU,OAAA,GAAU;QAClBoH,KAAA,EAAO8C,EAAA,CACLzI,CAAA,CAAQ2L,kBAAA,GAAqBnJ,CAAA,GAA0BD,CAAA;QAEzD2D,KAAA;QACAC,KAAA,EAAKA,CAAClG,CAAA,EAASQ,CAAA,EAAOiF,CAAA,MACb;UACL0C,QAAA,EAAUa,EAAA,CAAYxI,CAAA,EAAOR,CAAA,CAAQ,IAAIyF,CAAA;UACzCkG,EAAA,EAAI5L,CAAA,CAAQ6K,OAAA,CAAQ5K,CAAA,CAAQ,IAAImH,EAAA;UAChCyE,KAAA,EAAO5L,CAAA,CAAQ,GAAGsG;QAAA;QAGtBK,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KACZnE,CAAA,KACDtB,CAAA,CAAK4L,KAAA,IACT;UAAED,EAAA,EAAI3L,CAAA,CAAK2L,EAAA;UAAI/E,GAAA,EAAKnB,CAAA,CAAMmB;QAAA,GAC1BpG,CAAA,CAAOR,CAAA,CAAKmI,QAAA,EAAU1C,CAAA;MAAA;MAK5B,CAAC7H,CAAA,CAASW,aAAA,GAAgB;QACxBmH,KAAA,EAAO8C,EAAA,CAAWhG,CAAA;QAClByD,KAAA;QACAC,KAAA,EAAKA,CAAClG,CAAA,EAASQ,CAAA,EAAOiF,CAAA,MACb;UACL0C,QAAA,EAAUa,EAAA,CAAYxI,CAAA,EAAOR,CAAA,CAAQ,IAAIyF,CAAA;UACzCmG,KAAA,EAAsB,QAAf5L,CAAA,CAAQ,KAAa,IAAI;UAChC6G,IAAA,EAAMjJ,CAAA,CAASU;QAAA;MAAA;MAKrB,CAACV,CAAA,CAASY,SAAA,GAAY;QAIpBkH,KAAA,EAAO+C,EAAA,CAAchG,CAAA;QACrBwD,KAAA;QACAC,MAAMlG,CAAA,EAASQ,CAAA,EAAOiF,CAAA;UACpB,SAAS7H,CAAA,IAAcoC,CAAA,CAAQ,GAAG0F,KAAA,CAAMnB,EAAA;YAElCxE,CAAA,GAAU,IAAIgE,MAAA,KAAWnG,CAAA,IAAc;YACvC0C,CAAA,GAAUN,CAAA,CAAQ,GAAGmG,OAAA,CAAQpG,CAAA,EAAS;YAEtCa,CAAA,IAr9BeQ,CAAA,GAq9BiBd,CAAA,EAp9BrC2G,EAAA,CAAe2B,IAAA,CAAK5I,CAAA,IAAKA,CAAA,CAAEqH,IAAA,CAAKjG,CAAA,KAq9B7B8H,EAAA,GACAF,EAAA;UAv9BZ,IAA6B5H,CAAA;UAy9BrB,MAAMC,CAAA,GAAUrB,CAAA,CAAQ,GAAGS,WAAA;YACrBa,CAAA,IAC+C,MAAnDH,CAAA,CAA6BoF,OAAA,CAAQlF,CAAA;YAEjCE,CAAA,IACJD,CAAA,GAAeD,CAAA,GAAUrB,CAAA,CAAQ,IACjC0H,IAAA;YAEIlG,CAAA,GAAM;cACVwJ,KAAA,EAAOtH,CAAA,CAAgBnC,CAAA,EAAKvB,CAAA,CAAQ;cACpCiL,YAAA,EAAc3J,CAAA;cACd4J,GAAA,EAAA3J;YAAA;UAuBF,OAdAkE,CAAA,CAAMoG,QAAA,GAAWpG,CAAA,CAAMoG,QAAA,IAAwB,QAAZxK,CAAA,EAE/BC,CAAA,GACFE,CAAA,CAAIhC,IAAA,GAAOQ,CAAA,CAAQ,KAEnBwB,CAAA,CAAI2G,QAAA,GAAWvH,CAAA,CAAUJ,CAAA,EAAOF,CAAA,EAASmF,CAAA,GAO3CA,CAAA,CAAMoG,QAAA,IAAW,GAEVrK,CACT;QAAA;QACAmF,MAAA,EAAMA,CAAC3G,CAAA,EAAMyF,CAAA,EAAQ7H,CAAA,KAEjB0D,CAAA,CAACtB,CAAA,CAAKkL,GAAA,EAAG1K,CAAA;UAACoG,GAAA,EAAKhJ,CAAA,CAAMgJ;QAAA,GAAS5G,CAAA,CAAKgL,KAAA,GAChChL,CAAA,CAAKR,IAAA,KAASQ,CAAA,CAAKmI,QAAA,GAAW1C,CAAA,CAAOzF,CAAA,CAAKmI,QAAA,EAAUvK,CAAA,IAAS;MAAA;MAMtE,CAACA,CAAA,CAASc,eAAA,GAAkB;QAI1BgH,KAAA,EAAO+C,EAAA,CAAc5F,CAAA;QACrBoD,KAAA;QACAC,MAAMlG,CAAA;UACJ,MAAMQ,CAAA,GAAMR,CAAA,CAAQ,GAAG0H,IAAA;UAEvB,OAAO;YACLsD,KAAA,EAAOtH,CAAA,CAAgBlD,CAAA,EAAKR,CAAA,CAAQ,MAAM;YAC1CkL,GAAA,EAAA1K;UAAA,CAEJ;QAAA;QACAmG,MAAA,EAAMA,CAAC3G,CAAA,EAAMyF,CAAA,EAAQ7H,CAAA,KACZ0D,CAAA,CAACtB,CAAA,CAAKkL,GAAA,EAAG1K,CAAA,KAAKR,CAAA,CAAKgL,KAAA;UAAOpE,GAAA,EAAKhJ,CAAA,CAAMgJ;QAAA;MAAA;MAIhD,CAAChJ,CAAA,CAASa,WAAA,GAAc;QACtBiH,KAAA,EAAO+C,EAAA,CAAc9F,CAAA;QACrBsD,KAAA;QACAC,KAAA,EAAKA,CAAA,MACI;QAETS,MAAA,EAAQ0C;MAAA;MAGV,CAACzL,CAAA,CAASe,KAAA,GAAQ;QAChB+G,KAAA,EAAO6C,EAAA,CAAkBxB,EAAA;QACzBd,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACL8L,GAAA,EAAK9L,CAAA,CAAQ;UACbqL,MAAA,EAAQtC,EAAA,CAAY/I,CAAA,CAAQ;UAC5B+L,KAAA,EAAO/L,CAAA,CAAQ;QAAA;QAGnB2G,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KAEjBnE,CAAA;UACEsF,GAAA,EAAKnB,CAAA,CAAMmB,GAAA;UACXkF,GAAA,EAAK9L,CAAA,CAAK8L,GAAA,SAAO;UACjBC,KAAA,EAAO/L,CAAA,CAAK+L,KAAA,SAAS;UACrBC,GAAA,EAAKjM,CAAA,CAAQ4K,SAAA,CAAU3K,CAAA,CAAKqL,MAAA,EAAQ,OAAO;QAAA;MAAA;MAUnD,CAACzN,CAAA,CAASgB,IAAA,GAAO;QACf8G,KAAA,EAAO4C,EAAA,CAAYxB,EAAA;QACnBb,KAAA;QACAC,KAAA,EAAKA,CAAClG,CAAA,EAASQ,CAAA,EAAOiF,CAAA,MACb;UACL0C,QAAA,EAAUc,EAAA,CAAkBzI,CAAA,EAAOR,CAAA,CAAQ,IAAIyF,CAAA;UAC/C4F,MAAA,EAAQtC,EAAA,CAAY/I,CAAA,CAAQ;UAC5B+L,KAAA,EAAO/L,CAAA,CAAQ;QAAA;QAGnB2G,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KAEjBnE,CAAA;UACEsF,GAAA,EAAKnB,CAAA,CAAMmB,GAAA;UACX0E,IAAA,EAAMvL,CAAA,CAAQ4K,SAAA,CAAU3K,CAAA,CAAKqL,MAAA,EAAQ,KAAK;UAC1CU,KAAA,EAAO/L,CAAA,CAAK+L;QAAA,GAEXvL,CAAA,CAAOR,CAAA,CAAKmI,QAAA,EAAU1C,CAAA;MAAA;MAO/B,CAAC7H,CAAA,CAASiB,2BAAA,GAA8B;QACtC6G,KAAA,EAAO4C,EAAA,CAAYrF,CAAA;QACnBgD,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACLmI,QAAA,EAAU,CACR;YACE3I,IAAA,EAAMQ,CAAA,CAAQ;YACd6G,IAAA,EAAMjJ,CAAA,CAAS4B;UAAA;UAGnB6L,MAAA,EAAQrL,CAAA,CAAQ;UAChB6G,IAAA,EAAMjJ,CAAA,CAASgB;QAAA;MAAA;MAKrB,CAAChB,CAAA,CAASkB,mBAAA,GAAsB;QAC9B4G,KAAA,EAAOC,EAAA,CAAY,CAAC3F,CAAA,EAAQQ,CAAA,KACtBA,CAAA,CAAMqL,QAAA,IAAY9L,CAAA,CAAQkM,eAAA,UAIvB3D,EAAA,CAAYvF,CAAA,CAAZ,CAAsC/C,CAAA,EAAQQ,CAAA;QAEvDyF,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACLmI,QAAA,EAAU,CACR;YACE3I,IAAA,EAAMQ,CAAA,CAAQ;YACd6G,IAAA,EAAMjJ,CAAA,CAAS4B;UAAA;UAGnB6L,MAAA,EAAQrL,CAAA,CAAQ;UAChB+L,KAAA,OAAO;UACPlF,IAAA,EAAMjJ,CAAA,CAASgB;QAAA;MAAA;MAKrB,CAAChB,CAAA,CAASmB,kBAAA,GAAqB;QAC7B2G,KAAA,EAAO4C,EAAA,CAAYtF,CAAA;QACnBiD,KAAA;QACAC,MAAMlG,CAAA;UACJ,IAAIQ,CAAA,GAAUR,CAAA,CAAQ;YAClByF,CAAA,GAASzF,CAAA,CAAQ;UAOrB,OAJKqB,CAAA,CAAwBgG,IAAA,CAAK5B,CAAA,MAChCA,CAAA,GAAS,YAAYA,CAAA,GAGhB;YACL0C,QAAA,EAAU,CACR;cACE3I,IAAA,EAAMgB,CAAA,CAAQ2F,OAAA,CAAQ,WAAW;cACjCU,IAAA,EAAMjJ,CAAA,CAAS4B;YAAA;YAGnB6L,MAAA,EAAQ5F,CAAA;YACRoB,IAAA,EAAMjJ,CAAA,CAASgB;UAAA,CAEnB;QAAA;MAAA;MAGF,CAAChB,CAAA,CAASqB,WAAA,GAAcuG,EAAA,CACtBlE,CAAA,EA74CqB;MAi5CvB,CAAC1D,CAAA,CAASkC,aAAA,GAAgB0F,EAAA,CACxBlE,CAAA,EAj5CuB;MAq5CzB,CAAC1D,CAAA,CAASoB,gBAAA,GAAmB;QAC3B0G,KAAA,EAAO8C,EAAA,CAAWzG,CAAA;QAClBkE,KAAA;QACAC,KAAA,EAAOkD,EAAA;QACPzC,MAAA,EAAMA,CAAA,KACG;MAAA;MAIX,CAAC/I,CAAA,CAASsB,SAAA,GAAY;QACpBwG,KAAA,EAAOC,EAAA,CAAY+C,EAAA;QACnBzC,KAAA;QACAC,KAAA,EAAOiD,EAAA;QACPxC,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KACZnE,CAAA;UAAGsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA,GAAMpG,CAAA,CAAOR,CAAA,CAAKmI,QAAA,EAAU1C,CAAA;MAAA;MAIrD,CAAC7H,CAAA,CAASuB,GAAA,GAAM;QACduG,KAAA,EAAO4C,EAAA,CAAYlF,CAAA;QACnB6C,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACJ4D,CAAA,CAAK5D,CAAA,CAAQ,MAAM;UACjBqL,MAAA,EAAQrL,CAAA,CAAQ;UAChB+L,KAAA,EAAO/L,CAAA,CAAQ;QAAA,GAGV;QAET2G,MAAA,EAAQ0C;MAAA;MAGV,CAACzL,CAAA,CAASwB,QAAA,GAAW;QACnBsG,KAAA,EAAO6C,EAAA,CAAkBlF,CAAA;QACzB4C,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACL8L,GAAA,EAAK9L,CAAA,CAAQ,WAAM;UACnBb,GAAA,EAAKa,CAAA,CAAQ;QAAA;QAGjB2G,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KACZ7B,CAAA,CAAK5D,CAAA,CAAKb,GAAA,IACfmC,CAAA;UACEsF,GAAA,EAAKnB,CAAA,CAAMmB,GAAA;UACXkF,GAAA,EAAK9L,CAAA,CAAK8L,GAAA;UACVE,GAAA,EAAKjM,CAAA,CAAQ4K,SAAA,CAAU/G,CAAA,CAAK5D,CAAA,CAAKb,GAAA,EAAKkM,MAAA,EAAQ,OAAO;UACrDU,KAAA,EAAOnI,CAAA,CAAK5D,CAAA,CAAKb,GAAA,EAAK4M;QAAA,KAEtB;MAAA;MAIR,CAACnO,CAAA,CAASyB,OAAA,GAAU;QAClBqG,KAAA,EAAO4C,EAAA,CAAYhF,CAAA;QACnB2C,KAAA;QACAC,KAAA,EAAKA,CAAClG,CAAA,EAASQ,CAAA,EAAOiF,CAAA,MACb;UACL0C,QAAA,EAAU3H,CAAA,CAAMR,CAAA,CAAQ,IAAIyF,CAAA;UAC5ByG,gBAAA,EAAkBlM,CAAA,CAAQ;UAC1Bb,GAAA,EAAKa,CAAA,CAAQ;QAAA;QAGjB2G,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KACZ7B,CAAA,CAAK5D,CAAA,CAAKb,GAAA,IACfmC,CAAA;UACEsF,GAAA,EAAKnB,CAAA,CAAMmB,GAAA;UACX0E,IAAA,EAAMvL,CAAA,CAAQ4K,SAAA,CAAU/G,CAAA,CAAK5D,CAAA,CAAKb,GAAA,EAAKkM,MAAA,EAAQ,KAAK;UACpDU,KAAA,EAAOnI,CAAA,CAAK5D,CAAA,CAAKb,GAAA,EAAK4M;QAAA,GAErBvL,CAAA,CAAOR,CAAA,CAAKmI,QAAA,EAAU1C,CAAA,KAGzBnE,CAAA;UAAMsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA,GAAM5G,CAAA,CAAKkM,gBAAA;MAAA;MAKlC,CAACtO,CAAA,CAAS0B,KAAA,GAAQ;QAChBoG,KAAA,EAAO8C,EAAA,CAAWrF,CAAA;QAClB8C,KAAA;QACAC,KAAA,EAAO6B,EAAA;QACPpB,OAAO3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA;UACnB,MAAM7H,CAAA,GAAQoC,CAAA;UACd,OACEsB,CAAA;YAAOsF,GAAA,EAAKnB,CAAA,CAAMmB;UAAA,GAChBtF,CAAA,gBACEA,CAAA,aACG1D,CAAA,CAAMsK,MAAA,CAAO7B,GAAA,CAAI,UAA4BrG,CAAA,EAASD,CAAA;YACrD,OACEuB,CAAA;cAAIsF,GAAA,EAAK7G,CAAA;cAAGoM,KAAA,EAAO/D,EAAA,CAAcxK,CAAA,EAAOmC,CAAA;YAAA,GACrCS,CAAA,CAAOR,CAAA,EAASyF,CAAA,EAGvB;UAAA,MAIJnE,CAAA,gBACG1D,CAAA,CAAMqK,KAAA,CAAM5B,GAAA,CAAI,UAA0BrG,CAAA,EAAKD,CAAA;YAC9C,OACEuB,CAAA;cAAIsF,GAAA,EAAK7G;YAAA,GACNC,CAAA,CAAIqG,GAAA,CAAI,UAA2BrG,CAAA,EAASD,CAAA;cAC3C,OACEuB,CAAA;gBAAIsF,GAAA,EAAK7G,CAAA;gBAAGoM,KAAA,EAAO/D,EAAA,CAAcxK,CAAA,EAAOmC,CAAA;cAAA,GACrCS,CAAA,CAAOR,CAAA,EAASyF,CAAA,EAGvB;YAAA,GAGN;UAAA,IAIR;QAAA;MAAA;MAGF,CAAC7H,CAAA,CAAS4B,IAAA,GAAO;QAKfkG,KAAA,EAAO+C,EAAA,CAAcpE,EAAA;QACrB4B,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACLR,IAAA,EAAMQ,CAAA,CAAQ,GAEXmG,OAAA,CAAQzD,CAAA,EAAkB,CAAC1C,CAAA,EAAMQ,CAAA,KACzBT,CAAA,CAAQ8K,mBAAA,CAAoBrK,CAAA,IAC/BT,CAAA,CAAQ8K,mBAAA,CAAoBrK,CAAA,IAC5BR,CAAA;QAAA;QAIZ2G,MAAA,EAAO3G,CAAA,IACEA,CAAA,CAAKR;MAAA;MAIhB,CAAC5B,CAAA,CAAS6B,UAAA,GAAa;QACrBiG,KAAA,EAAO6C,EAAA,CAAkBzE,CAAA;QACzBmC,KAAA;QACAC,KAAA,EAAKA,CAAClG,CAAA,EAASQ,CAAA,EAAOiF,CAAA,MACb;UAGL0C,QAAA,EAAU3H,CAAA,CAAMR,CAAA,CAAQ,IAAIyF,CAAA;QAAA;QAGhCkB,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KACZnE,CAAA;UAAQsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA,GAAMpG,CAAA,CAAOR,CAAA,CAAKmI,QAAA,EAAU1C,CAAA;MAAA;MAI1D,CAAC7H,CAAA,CAAS8B,cAAA,GAAiB;QACzBgG,KAAA,EAAO6C,EAAA,CAAkBvE,CAAA;QACzBiC,KAAA;QACAC,KAAA,EAAKA,CAAClG,CAAA,EAASQ,CAAA,EAAOiF,CAAA,MACb;UAGL0C,QAAA,EAAU3H,CAAA,CAAMR,CAAA,CAAQ,IAAIyF,CAAA;QAAA;QAGhCkB,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KACZnE,CAAA;UAAIsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA,GAAMpG,CAAA,CAAOR,CAAA,CAAKmI,QAAA,EAAU1C,CAAA;MAAA;MAItD,CAAC7H,CAAA,CAAS+B,WAAA,GAAc;QAKtB+F,KAAA,EAAO6C,EAAA,CAAkBpE,EAAA;QACzB8B,KAAA;QACAC,KAAA,EAAMlG,CAAA,KACG;UACLR,IAAA,EAAMQ,CAAA,CAAQ;UACd6G,IAAA,EAAMjJ,CAAA,CAAS4B;QAAA;MAAA;MAKrB,CAAC5B,CAAA,CAASgC,UAAA,GAAa;QACrB8F,KAAA,EAAO6C,EAAA,CAAkBtE,CAAA;QACzBgC,KAAA;QACAC,KAAA,EAAOiD,EAAA;QACPxC,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KACZnE,CAAA;UAAMsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA,GAAMpG,CAAA,CAAOR,CAAA,CAAKmI,QAAA,EAAU1C,CAAA;MAAA;MAIxD,CAAC7H,CAAA,CAASiC,mBAAA,GAAsB;QAC9B6F,KAAA,EAAO6C,EAAA,CAAkBrE,CAAA;QACzB+B,KAAA;QACAC,KAAA,EAAOiD,EAAA;QACPxC,MAAA,EAAMA,CAAC3G,CAAA,EAAMQ,CAAA,EAAQiF,CAAA,KACZnE,CAAA;UAAKsF,GAAA,EAAKnB,CAAA,CAAMmB;QAAA,GAAMpG,CAAA,CAAOR,CAAA,CAAKmI,QAAA,EAAU1C,CAAA;MAAA;IAAA;EAAA,CAoCnB,MAAlC1F,CAAA,CAAQqM,qBAAA,YACHvI,CAAA,CAAMjG,CAAA,CAASY,SAAA,UACfqF,CAAA,CAAMjG,CAAA,CAASc,eAAA;EAGxB,MAAM8F,EAAA,GA9qCR,UACExE,CAAA;MAOA,IAAIQ,CAAA,GAAW6L,MAAA,CAAOC,IAAA,CAAKtM,CAAA;MA8B3B,SAASyF,EACP7H,CAAA,EACAmC,CAAA;QAEA,IACIO,CAAA;UAEAM,CAAA;UAHAO,CAAA,GAAS;UAETC,CAAA,GAAW;UAEXC,CAAA,GAAoB;QAQxB,KANAtB,CAAA,CAAM8F,WAAA,GAAc9F,CAAA,CAAM8F,WAAA,IAAe,IAMlCjI,CAAA,GAAQ;UACb,IAAI0D,CAAA,GAAI;UACR,OAAOA,CAAA,GAAId,CAAA,CAAS8F,MAAA,GAAQ;YAI1B,IAHAlF,CAAA,GAAWZ,CAAA,CAASc,CAAA,GACpBhB,CAAA,GAAON,CAAA,CAAMoB,CAAA,GAETrB,CAAA,CAAMgG,MAAA,KAAWzF,CAAA,CAAKoF,KAAA,CAAMK,MAAA,EAAQ;cACtCzE,CAAA;cACA;YACF;YAEA,MAAMC,CAAA,GAAUjB,CAAA,CAAKoF,KAAA,CAAM9H,CAAA,EAAQmC,CAAA;YAEnC,IAAIwB,CAAA,EAAS;cACXF,CAAA,GAAoBE,CAAA,CAAQ,IAG5BxB,CAAA,CAAM8F,WAAA,IAAexE,CAAA,EAErBzD,CAAA,GAASA,CAAA,CAAO2O,SAAA,CAAUlL,CAAA,CAAkBiF,MAAA,GAE5C1F,CAAA,GAASN,CAAA,CAAK4F,KAAA,CAAM3E,CAAA,EAASkE,CAAA,EAAa1F,CAAA,GAMvB,QAAfa,CAAA,CAAOiG,IAAA,KACTjG,CAAA,CAAOiG,IAAA,GAAOzF,CAAA,GAGhBD,CAAA,CAAOqG,IAAA,CAAK5G,CAAA;cACZ;YACF;YAEAU,CAAA,EACF;UAAA;QACF;QAKA,OAFAvB,CAAA,CAAM8F,WAAA,GAAc,IAEb1E,CACT;MAAA;MAEA,OA3EAX,CAAA,CAASgM,IAAA,CAAK,UAAUhM,CAAA,EAAOiF,CAAA;QAC7B,IAAI7H,CAAA,GAASoC,CAAA,CAAMQ,CAAA,EAAOyF,KAAA;UACtBlG,CAAA,GAASC,CAAA,CAAMyF,CAAA,EAAOQ,KAAA;QAG1B,OAAIrI,CAAA,KAAWmC,CAAA,GACNnC,CAAA,GAASmC,CAAA,GACPS,CAAA,GAAQiF,CAAA,IACT,KAIZ;MAAA,cA+D2BzF,CAAA,EAAQQ,CAAA;QACjC,OAAOiF,CAAA,CA9HX,UAA6BzF,CAAA;UAC3B,OAAOA,CAAA,CACJmG,OAAA,CAAQnE,CAAA,EAAc,MACtBmE,OAAA,CAAQhE,CAAA,EAAY,IACpBgE,OAAA,CAAQ3C,CAAA,EAAO,OACpB;QAAA,CAyHuB,CAAoBxD,CAAA,GAASQ,CAAA,CAClD;MAAA,CACF;IAAA,CAwkCiB,CAAUqD,CAAA;IACnBY,EAAA,IAj5BUC,EAAA,GAqClB,UACE1E,CAAA,EACAQ,CAAA;MAEA,iBACEiF,CAAA,EACA7H,CAAA,EACAmC,CAAA;QAEA,MAAMO,CAAA,GAAWN,CAAA,CAAMyF,CAAA,CAAIoB,IAAA,EAAMF,MAAA;QAEjC,OAAOnG,CAAA,GACHA,CAAA,CAAW,MAAMF,CAAA,CAASmF,CAAA,EAAK7H,CAAA,EAAQmC,CAAA,GAAQ0F,CAAA,EAAK7H,CAAA,EAAQmC,CAAA,IAC5DO,CAAA,CAASmF,CAAA,EAAK7H,CAAA,EAAQmC,CAAA,CAC5B;MAAA,CACF;IAAA,CA61BqC,CAAe8D,CAAA,EAAO9D,CAAA,CAAQ0M,UAAA,YAh5BjDzM,EACdQ,CAAA,EAC6B;MAAA,IAA7BiF,CAAA,GAAA+D,SAAA,CAAAlD,MAAA,QAAAkD,SAAA,QAAAO,SAAA,GAAAP,SAAA,MAA6B;MAE7B,IAAIC,KAAA,CAAMiD,OAAA,CAAQlM,CAAA,GAAM;QACtB,MAAM5C,CAAA,GAAS6H,CAAA,CAAMmB,GAAA;UACf7G,CAAA,GAAS;QAIf,IAAIO,CAAA,IAAgB;QAEpB,KAAK,IAAI1C,CAAA,GAAI,GAAGA,CAAA,GAAI4C,CAAA,CAAI8F,MAAA,EAAQ1I,CAAA,IAAK;UACnC6H,CAAA,CAAMmB,GAAA,GAAMhJ,CAAA;UAEZ,MAAMgD,CAAA,GAAUZ,CAAA,CAAcQ,CAAA,CAAI5C,CAAA,GAAI6H,CAAA;YAChCtE,CAAA,GAA8B,mBAAZP,CAAA;UAEpBO,CAAA,IAAYb,CAAA,GACdP,CAAA,CAAOA,CAAA,CAAOuG,MAAA,GAAS,MAAM1F,CAAA,GACR,SAAZA,CAAA,IACTb,CAAA,CAAOyH,IAAA,CAAK5G,CAAA,GAGdN,CAAA,GAAgBa,CAClB;QAAA;QAIA,OAFAsE,CAAA,CAAMmB,GAAA,GAAMhJ,CAAA,EAELmC,CACT;MAAA;MAEA,OAAO2E,EAAA,CAAOlE,CAAA,EAAKR,CAAA,EAAeyF,CAAA,CACpC;IAAA;EAlCF,IAAkBf,EAAA;EAm5BhB,MAAMC,EAAA,GAAMlB,CAAA,CAAQgC,CAAA;EAEpB,OAAI9B,CAAA,CAAU2C,MAAA,GAEVhF,CAAA,cACGqD,EAAA,EACDrD,CAAA;IAAQsF,GAAA,EAAI;EAAA,GACTjD,CAAA,CAAU0C,GAAA,CAAI,UAAwBrG,CAAA;IACrC,OACEsB,CAAA;MACEqK,EAAA,EAAI5L,CAAA,CAAQ6K,OAAA,CAAQ5K,CAAA,CAAIoL,UAAA,EAAYjE,EAAA;MACpCP,GAAA,EAAK5G,CAAA,CAAIoL;IAAA,GAERpL,CAAA,CAAIoL,UAAA,EACJ3G,EAAA,CAAQD,EAAA,CAAOxE,CAAA,CAAI7B,QAAA,EAAU;MAAE4H,MAAA,GAAQ;IAAA,IAG9C;EAAA,OAMDpB,EACT;AAAA;AAAA,eAWInE,CAAA;EAAA;MAAC2H,QAAA,EAAEvK,CAAA,GAAW;MAAE+O,OAAA,EAAE5M;IAAA,IAAmBS,CAAA;IAAPF,CAAA,aAAAN,CAAA,EAAAQ,CAAA;MAAA,YAAAR,CAAA;MAAA,IAAAyF,CAAA;QAAA7H,CAAA;QAAAmC,CAAA;QAAAO,CAAA,GAAA+L,MAAA,CAAAC,IAAA,CAAAtM,CAAA;MAAA,KAAApC,CAAA,MAAAA,CAAA,GAAA0C,CAAA,CAAAgG,MAAA,EAAA1I,CAAA,IAAA4C,CAAA,CAAA+F,OAAA,CAAAd,CAAA,GAAAnF,CAAA,CAAA1C,CAAA,YAAAmC,CAAA,CAAA0F,CAAA,IAAAzF,CAAA,CAAAyF,CAAA;MAAA,OAAA1F,CAAA;IAAA,CAAK,CAAAS,CAAA,EAAAiF,CAAA;EAQrC,OAAOzF,CAAA,CAAM4M,YAAA,CACX9C,EAAA,CAASlM,CAAA,EAAUmC,CAAA,GACnBO,CAAA,CAAsC;AAAA;AAAA,SAAA1C,CAAA,IAAAiP,QAAA,EAAA/C,EAAA,IAAAgD,QAAA,EAAAjE,EAAA,IAAA8B,SAAA,EAAAxD,EAAA,IAAAyD,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}