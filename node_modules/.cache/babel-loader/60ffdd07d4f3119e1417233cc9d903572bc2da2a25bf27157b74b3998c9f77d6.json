{"ast":null,"code":"export const extractCitations = summary => {\n  // Match citations.\n  // const regex = /\\[(\\d+)\\]/g;\n  const regex = /\\[(\\d+(,*\\s*\\d*)*)\\]/g;\n  const citations = [];\n  let match;\n  let lastIndex = 0;\n\n  // Parse all cited content.\n  while ((match = regex.exec(summary)) !== null) {\n    const index = match.index;\n    const reference = match[1];\n    const text = summary.slice(lastIndex, index);\n    // Handle citations that are in the form of [1, 2, 3] or [1,2,3]\n    // so normalize to the latter.\n    citations.push({\n      text,\n      references: reference.replace(/\\s/g, \"\").split(\",\")\n    });\n    lastIndex = index + match[0].length;\n  }\n\n  // Add the remaining content after the last citation.\n  const text = summary.slice(lastIndex);\n  if (text.length > 0) {\n    citations.push({\n      text\n    });\n  }\n  return citations;\n};","map":{"version":3,"names":["extractCitations","summary","regex","citations","match","lastIndex","exec","index","reference","text","slice","push","references","replace","split","length"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/ui/utils/citations/extractCitations.ts"],"sourcesContent":["export const extractCitations = (summary: string) => {\n  // Match citations.\n  // const regex = /\\[(\\d+)\\]/g;\n  const regex = /\\[(\\d+(,*\\s*\\d*)*)\\]/g;\n\n  const citations: Array<{ text: string; references?: string[] }> = [];\n\n  let match;\n  let lastIndex = 0;\n\n  // Parse all cited content.\n  while ((match = regex.exec(summary)) !== null) {\n    const index = match.index;\n    const reference = match[1];\n    const text = summary.slice(lastIndex, index);\n    // Handle citations that are in the form of [1, 2, 3] or [1,2,3]\n    // so normalize to the latter.\n    citations.push({\n      text,\n      references: reference.replace(/\\s/g, \"\").split(\",\")\n    });\n    lastIndex = index + match[0].length;\n  }\n\n  // Add the remaining content after the last citation.\n  const text = summary.slice(lastIndex);\n  if (text.length > 0) {\n    citations.push({ text });\n  }\n\n  return citations;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAIC,OAAe,IAAK;EACnD;EACA;EACA,MAAMC,KAAK,GAAG,uBAAuB;EAErC,MAAMC,SAAyD,GAAG,EAAE;EAEpE,IAAIC,KAAK;EACT,IAAIC,SAAS,GAAG,CAAC;;EAEjB;EACA,OAAO,CAACD,KAAK,GAAGF,KAAK,CAACI,IAAI,CAACL,OAAO,CAAC,MAAM,IAAI,EAAE;IAC7C,MAAMM,KAAK,GAAGH,KAAK,CAACG,KAAK;IACzB,MAAMC,SAAS,GAAGJ,KAAK,CAAC,CAAC,CAAC;IAC1B,MAAMK,IAAI,GAAGR,OAAO,CAACS,KAAK,CAACL,SAAS,EAAEE,KAAK,CAAC;IAC5C;IACA;IACAJ,SAAS,CAACQ,IAAI,CAAC;MACbF,IAAI;MACJG,UAAU,EAAEJ,SAAS,CAACK,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,GAAG;IACpD,CAAC,CAAC;IACFT,SAAS,GAAGE,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACW,MAAM;EACrC;;EAEA;EACA,MAAMN,IAAI,GAAGR,OAAO,CAACS,KAAK,CAACL,SAAS,CAAC;EACrC,IAAII,IAAI,CAACM,MAAM,GAAG,CAAC,EAAE;IACnBZ,SAAS,CAACQ,IAAI,CAAC;MAAEF;IAAK,CAAC,CAAC;EAC1B;EAEA,OAAON,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}