{"ast":null,"code":"import{useState,useEffect}from\"react\";import{VuiBadge,VuiFlexContainer,VuiFlexItem,VuiText,VuiTextColor}from\"../../ui\";import{useConfigContext}from\"../../contexts/ConfigurationContext\";// Known confidence levels for hallucination scores\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// Map a numerical score to a confidence level\nconst getConfidenceLevel=score=>{if(score<0){return\"unavailable\";}if(score<=0.33){return\"low\";}if(score<=0.66){return\"medium\";}return\"high\";};// Get color and label for the badge based on confidence level\nconst getBadgeProps=confidenceLevel=>{switch(confidenceLevel){case\"low\":return{color:\"success\",label:\"Low Risk\"};case\"medium\":return{color:\"warning\",label:\"Medium Risk\"};case\"high\":return{color:\"danger\",label:\"High Risk\"};case\"unavailable\":default:return{color:\"neutral\",label:\"Score N/A\"};}};// In production, this would be a Netlify Function URL\n// During development, we use a mock score for demonstration\nconst isProduction=process.env.NODE_ENV==='production';const API_ENDPOINT=isProduction?'/.netlify/functions/hallucination-check':'/api/mock-hallucination-check';export const ResultHallucinationScore=_ref=>{let{result}=_ref;const{search}=useConfigContext();const[hallucinationScore,setHallucinationScore]=useState(-1);const[isLoading,setIsLoading]=useState(false);useEffect(()=>{const evaluateHallucination=async()=>{setIsLoading(true);try{// Get the query from sessionStorage if available\nconst searchQuery=sessionStorage.getItem('lastQuery')||\"search query\";// Format the snippet content\nconst{snippet}=result;const premise=`${snippet.pre} ${snippet.text} ${snippet.post}`;if(!isProduction){// Mock implementation for development - simulate API call delay\nawait new Promise(resolve=>setTimeout(resolve,500));// Generate a random score between 0.1 and 0.9 for testing\nconst mockScore=Math.round((Math.random()*0.8+0.1)*100)/100;setHallucinationScore(mockScore);}else{// Production implementation - call Netlify Function\nconst response=await fetch(API_ENDPOINT,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({premise,hypothesis:searchQuery,hfToken:search.hfToken})});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();setHallucinationScore(data.score);}}catch(error){console.error(\"Error evaluating hallucination:\",error);setHallucinationScore(-1);}finally{setIsLoading(false);}};evaluateHallucination();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[result,search.hfToken]);const confidenceLevel=getConfidenceLevel(hallucinationScore);const{color,label}=getBadgeProps(confidenceLevel);return/*#__PURE__*/_jsxs(VuiFlexContainer,{alignItems:\"center\",spacing:\"xs\",children:[/*#__PURE__*/_jsx(VuiFlexItem,{grow:false,shrink:false,children:/*#__PURE__*/_jsx(VuiBadge,{color:color,children:isLoading?\"Evaluating...\":label})}),hallucinationScore>=0&&!isLoading&&/*#__PURE__*/_jsx(VuiFlexItem,{grow:false,shrink:false,children:/*#__PURE__*/_jsx(VuiText,{size:\"xs\",children:/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsxs(VuiTextColor,{color:\"subdued\",children:[\"FCS: \",hallucinationScore.toFixed(2)]})})})})]});};","map":{"version":3,"names":["useState","useEffect","VuiBadge","VuiFlexContainer","VuiFlexItem","VuiText","VuiTextColor","useConfigContext","jsx","_jsx","jsxs","_jsxs","getConfidenceLevel","score","getBadgeProps","confidenceLevel","color","label","isProduction","process","env","NODE_ENV","API_ENDPOINT","ResultHallucinationScore","_ref","result","search","hallucinationScore","setHallucinationScore","isLoading","setIsLoading","evaluateHallucination","searchQuery","sessionStorage","getItem","snippet","premise","pre","text","post","Promise","resolve","setTimeout","mockScore","Math","round","random","response","fetch","method","headers","body","JSON","stringify","hypothesis","hfToken","ok","Error","status","data","json","error","console","alignItems","spacing","children","grow","shrink","size","toFixed"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/ResultHallucinationScore.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { VuiBadge, VuiFlexContainer, VuiFlexItem, VuiText, VuiTextColor } from \"../../ui\";\nimport { SearchResultWithSnippet } from \"../types\";\nimport { useConfigContext } from \"../../contexts/ConfigurationContext\";\n\n// Known confidence levels for hallucination scores\nexport type ConfidenceLevel = \"unavailable\" | \"low\" | \"medium\" | \"high\";\n\n// Map a numerical score to a confidence level\nconst getConfidenceLevel = (score: number): ConfidenceLevel => {\n  if (score < 0) {\n    return \"unavailable\";\n  }\n  if (score <= 0.33) {\n    return \"low\";\n  }\n  if (score <= 0.66) {\n    return \"medium\";\n  }\n  return \"high\";\n};\n\n// Get color and label for the badge based on confidence level\nconst getBadgeProps = (\n  confidenceLevel: ConfidenceLevel\n): { color: \"success\" | \"warning\" | \"danger\" | \"neutral\"; label: string } => {\n  switch (confidenceLevel) {\n    case \"low\":\n      return { color: \"success\", label: \"Low Risk\" };\n    case \"medium\":\n      return { color: \"warning\", label: \"Medium Risk\" };\n    case \"high\":\n      return { color: \"danger\", label: \"High Risk\" };\n    case \"unavailable\":\n    default:\n      return { color: \"neutral\", label: \"Score N/A\" };\n  }\n};\n\ninterface ResultHallucinationScoreProps {\n  result: SearchResultWithSnippet;\n}\n\n// In production, this would be a Netlify Function URL\n// During development, we use a mock score for demonstration\nconst isProduction = process.env.NODE_ENV === 'production';\nconst API_ENDPOINT = isProduction ? '/.netlify/functions/hallucination-check' : '/api/mock-hallucination-check';\n\nexport const ResultHallucinationScore = ({ result }: ResultHallucinationScoreProps) => {\n  const { search } = useConfigContext();\n  const [hallucinationScore, setHallucinationScore] = useState<number>(-1);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    const evaluateHallucination = async () => {\n      setIsLoading(true);\n      \n      try {\n        // Get the query from sessionStorage if available\n        const searchQuery = sessionStorage.getItem('lastQuery') || \"search query\";\n        \n        // Format the snippet content\n        const { snippet } = result;\n        const premise = `${snippet.pre} ${snippet.text} ${snippet.post}`;\n        \n        if (!isProduction) {\n          // Mock implementation for development - simulate API call delay\n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          // Generate a random score between 0.1 and 0.9 for testing\n          const mockScore = Math.round((Math.random() * 0.8 + 0.1) * 100) / 100;\n          setHallucinationScore(mockScore);\n        } else {\n          // Production implementation - call Netlify Function\n          const response = await fetch(API_ENDPOINT, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              premise,\n              hypothesis: searchQuery,\n              hfToken: search.hfToken\n            })\n          });\n          \n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          \n          const data = await response.json();\n          setHallucinationScore(data.score);\n        }\n      } catch (error) {\n        console.error(\"Error evaluating hallucination:\", error);\n        setHallucinationScore(-1);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    evaluateHallucination();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [result, search.hfToken]);\n\n  const confidenceLevel = getConfidenceLevel(hallucinationScore);\n  const { color, label } = getBadgeProps(confidenceLevel);\n\n  return (\n    <VuiFlexContainer alignItems=\"center\" spacing=\"xs\">\n      <VuiFlexItem grow={false} shrink={false}>\n        <VuiBadge color={color}>\n          {isLoading ? \"Evaluating...\" : label}\n        </VuiBadge>\n      </VuiFlexItem>\n      {hallucinationScore >= 0 && !isLoading && (\n        <VuiFlexItem grow={false} shrink={false}>\n          <VuiText size=\"xs\">\n            <p>\n              <VuiTextColor color=\"subdued\">\n                FCS: {hallucinationScore.toFixed(2)}\n              </VuiTextColor>\n            </p>\n          </VuiText>\n        </VuiFlexItem>\n      )}\n    </VuiFlexContainer>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}