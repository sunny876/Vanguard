{"ast":null,"code":"import{SearchResult}from\"./SearchResult\";import{useState,useEffect}from\"react\";// Import the FCS score utility\nimport{getFcsScore}from\"./ResultHallucinationScore\";// Constants for FCS score thresholds\nimport{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const HIGH_RISK_THRESHOLD=0.33;export const SearchResultList=_ref=>{let{results,selectedSearchResultPosition,setSearchResultRef}=_ref;// State to hold sorted results\nconst[sortedResults,setSortedResults]=useState(results);// Sort results when the input changes\nuseEffect(()=>{// Log original scores for debugging\nif(process.env.NODE_ENV!=='production'){console.log('Original results:',results.map(r=>({title:r.document_metadata.title,fcs:getFcsScore(r),score:r.score})));}// Create a copy of results to avoid modifying the original array\nconst filteredAndSortedResults=[...results]// Filter out high risk results (FCS score <= 0.33)\n.filter(result=>{const fcsScore=getFcsScore(result);// Keep results with no FCS score or with scores above the high risk threshold\nreturn fcsScore<0||fcsScore>HIGH_RISK_THRESHOLD;})// Sort the filtered results by FCS score\n.sort((a,b)=>{// Get FCS scores for both results\nconst scoreA=getFcsScore(a);const scoreB=getFcsScore(b);// Force prioritize results with FCS scores\nif(scoreA>=0&&scoreB<0)return-1;if(scoreA<0&&scoreB>=0)return 1;// Sort by FCS score ascending (lowest first)\n// If both have valid scores, compare them\nif(scoreA>=0&&scoreB>=0){return scoreA-scoreB;// Ascending order (lowest first)\n}// If neither has a valid score, keep original order based on Vectara's score\nreturn b.score-a.score;});// Log sorted scores for debugging\nif(process.env.NODE_ENV!=='production'){console.log('Sorted results:',filteredAndSortedResults.map(r=>({title:r.document_metadata.title,fcs:getFcsScore(r),score:r.score})));}setSortedResults(filteredAndSortedResults);},[results]);return/*#__PURE__*/_jsx(_Fragment,{children:sortedResults.map((result,i)=>/*#__PURE__*/_jsx(SearchResult,{result:result,position:i,isSelected:selectedSearchResultPosition===i,ref:el=>setSearchResultRef(el,i)},i))});};","map":{"version":3,"names":["SearchResult","useState","useEffect","getFcsScore","jsx","_jsx","Fragment","_Fragment","HIGH_RISK_THRESHOLD","SearchResultList","_ref","results","selectedSearchResultPosition","setSearchResultRef","sortedResults","setSortedResults","process","env","NODE_ENV","console","log","map","r","title","document_metadata","fcs","score","filteredAndSortedResults","filter","result","fcsScore","sort","a","b","scoreA","scoreB","children","i","position","isSelected","ref","el"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/SearchResultList.tsx"],"sourcesContent":["import { SearchResult } from \"./SearchResult\";\nimport { SearchResultWithSnippet } from \"../types\";\nimport { useState, useEffect } from \"react\";\n\n// Import the FCS score utility\nimport { getFcsScore } from \"./ResultHallucinationScore\";\n\n// Constants for FCS score thresholds\nconst HIGH_RISK_THRESHOLD = 0.33;\n\ntype Props = {\n  results: Array<SearchResultWithSnippet>;\n  selectedSearchResultPosition?: number;\n  setSearchResultRef: (el: HTMLDivElement | null, index: number) => void;\n};\n\nexport const SearchResultList = ({ results, selectedSearchResultPosition, setSearchResultRef }: Props) => {\n  // State to hold sorted results\n  const [sortedResults, setSortedResults] = useState<Array<SearchResultWithSnippet>>(results);\n  \n  // Sort results when the input changes\n  useEffect(() => {\n    // Log original scores for debugging\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('Original results:', results.map(r => ({\n        title: r.document_metadata.title,\n        fcs: getFcsScore(r),\n        score: r.score\n      })));\n    }\n    \n    // Create a copy of results to avoid modifying the original array\n    const filteredAndSortedResults = [...results]\n      // Filter out high risk results (FCS score <= 0.33)\n      .filter(result => {\n        const fcsScore = getFcsScore(result);\n        // Keep results with no FCS score or with scores above the high risk threshold\n        return fcsScore < 0 || fcsScore > HIGH_RISK_THRESHOLD;\n      })\n      // Sort the filtered results by FCS score\n      .sort((a, b) => {\n        // Get FCS scores for both results\n        const scoreA = getFcsScore(a);\n        const scoreB = getFcsScore(b);\n        \n        // Force prioritize results with FCS scores\n        if (scoreA >= 0 && scoreB < 0) return -1;\n        if (scoreA < 0 && scoreB >= 0) return 1;\n        \n        // Sort by FCS score ascending (lowest first)\n        // If both have valid scores, compare them\n        if (scoreA >= 0 && scoreB >= 0) {\n          return scoreA - scoreB; // Ascending order (lowest first)\n        }\n        \n        // If neither has a valid score, keep original order based on Vectara's score\n        return b.score - a.score;\n      });\n    \n    // Log sorted scores for debugging\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('Sorted results:', filteredAndSortedResults.map(r => ({\n        title: r.document_metadata.title,\n        fcs: getFcsScore(r),\n        score: r.score\n      })));\n    }\n    \n    setSortedResults(filteredAndSortedResults);\n  }, [results]);\n\n  return (\n    <>\n      {sortedResults.map((result, i) => (\n        <SearchResult\n          key={i}\n          result={result}\n          position={i}\n          isSelected={selectedSearchResultPosition === i}\n          ref={(el: HTMLDivElement | null) => setSearchResultRef(el, i)}\n        />\n      ))}\n    </>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}