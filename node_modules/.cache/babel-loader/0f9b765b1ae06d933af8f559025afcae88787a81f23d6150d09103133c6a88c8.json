{"ast":null,"code":"export const sanitizeCitations = summary => {\n  if (!summary) return summary;\n\n  // Match citations.\n  const regex = /\\[(\\d+(,*\\s*\\d*)*)\\]/g;\n  const parts = [];\n  let match;\n  let lastIndex = 0;\n\n  // Parse all cited content.\n  while ((match = regex.exec(summary)) !== null) {\n    const index = match.index;\n    const reference = match[1];\n    const text = summary.slice(lastIndex, index);\n    // Handle citations that are in the form of [1, 2, 3] or [1,2,3]\n    // so normalize to the latter.\n    parts.push(text);\n    parts.push(reference.replace(/\\s/g, \"\").split(\",\").map(citation => `[${citation}]`).join(\"\"));\n    lastIndex = index + match[0].length;\n  }\n\n  // Add the remaining content after the last citation.\n  const text = summary.slice(lastIndex);\n  if (text.length > 0) {\n    parts.push(text);\n  }\n  return parts.join(\"\");\n};","map":{"version":3,"names":["sanitizeCitations","summary","regex","parts","match","lastIndex","exec","index","reference","text","slice","push","replace","split","map","citation","join","length"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/ui/utils/citations/sanitizeCitations.ts"],"sourcesContent":["export const sanitizeCitations = (summary?: string) => {\n  if (!summary) return summary;\n\n  // Match citations.\n  const regex = /\\[(\\d+(,*\\s*\\d*)*)\\]/g;\n\n  const parts: Array<string> = [];\n\n  let match;\n  let lastIndex = 0;\n\n  // Parse all cited content.\n  while ((match = regex.exec(summary)) !== null) {\n    const index = match.index;\n    const reference = match[1];\n    const text = summary.slice(lastIndex, index);\n    // Handle citations that are in the form of [1, 2, 3] or [1,2,3]\n    // so normalize to the latter.\n    parts.push(text);\n    parts.push(\n      reference\n        .replace(/\\s/g, \"\")\n        .split(\",\")\n        .map((citation) => `[${citation}]`)\n        .join(\"\")\n    );\n    lastIndex = index + match[0].length;\n  }\n\n  // Add the remaining content after the last citation.\n  const text = summary.slice(lastIndex);\n  if (text.length > 0) {\n    parts.push(text);\n  }\n\n  return parts.join(\"\");\n};\n"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAIC,OAAgB,IAAK;EACrD,IAAI,CAACA,OAAO,EAAE,OAAOA,OAAO;;EAE5B;EACA,MAAMC,KAAK,GAAG,uBAAuB;EAErC,MAAMC,KAAoB,GAAG,EAAE;EAE/B,IAAIC,KAAK;EACT,IAAIC,SAAS,GAAG,CAAC;;EAEjB;EACA,OAAO,CAACD,KAAK,GAAGF,KAAK,CAACI,IAAI,CAACL,OAAO,CAAC,MAAM,IAAI,EAAE;IAC7C,MAAMM,KAAK,GAAGH,KAAK,CAACG,KAAK;IACzB,MAAMC,SAAS,GAAGJ,KAAK,CAAC,CAAC,CAAC;IAC1B,MAAMK,IAAI,GAAGR,OAAO,CAACS,KAAK,CAACL,SAAS,EAAEE,KAAK,CAAC;IAC5C;IACA;IACAJ,KAAK,CAACQ,IAAI,CAACF,IAAI,CAAC;IAChBN,KAAK,CAACQ,IAAI,CACRH,SAAS,CACNI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBC,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,QAAQ,IAAK,IAAIA,QAAQ,GAAG,CAAC,CAClCC,IAAI,CAAC,EAAE,CACZ,CAAC;IACDX,SAAS,GAAGE,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACa,MAAM;EACrC;;EAEA;EACA,MAAMR,IAAI,GAAGR,OAAO,CAACS,KAAK,CAACL,SAAS,CAAC;EACrC,IAAII,IAAI,CAACQ,MAAM,GAAG,CAAC,EAAE;IACnBd,KAAK,CAACQ,IAAI,CAACF,IAAI,CAAC;EAClB;EAEA,OAAON,KAAK,CAACa,IAAI,CAAC,EAAE,CAAC;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}