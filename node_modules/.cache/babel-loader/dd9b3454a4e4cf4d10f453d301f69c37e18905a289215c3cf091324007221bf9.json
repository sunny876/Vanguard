{"ast":null,"code":"var _jsxFileName = \"/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/ResultHallucinationScore.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { VuiBadge, VuiFlexContainer, VuiFlexItem, VuiText, VuiTextColor } from \"../../ui\";\nimport { HfInference } from \"@huggingface/inference\";\nimport { useConfigContext } from \"../../contexts/ConfigurationContext\";\n\n// Known confidence levels for hallucination scores\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Map a numerical score to a confidence level\nconst getConfidenceLevel = score => {\n  if (score < 0) {\n    return \"unavailable\";\n  }\n  if (score <= 0.33) {\n    return \"low\";\n  }\n  if (score <= 0.66) {\n    return \"medium\";\n  }\n  return \"high\";\n};\n\n// Get color and label for the badge based on confidence level\nconst getBadgeProps = confidenceLevel => {\n  switch (confidenceLevel) {\n    case \"low\":\n      return {\n        color: \"success\",\n        label: \"Low Risk\"\n      };\n    case \"medium\":\n      return {\n        color: \"warning\",\n        label: \"Medium Risk\"\n      };\n    case \"high\":\n      return {\n        color: \"danger\",\n        label: \"High Risk\"\n      };\n    case \"unavailable\":\n    default:\n      return {\n        color: \"neutral\",\n        label: \"Score N/A\"\n      };\n  }\n};\nexport const ResultHallucinationScore = ({\n  result\n}) => {\n  _s();\n  const {\n    search\n  } = useConfigContext();\n  const [hallucinationScore, setHallucinationScore] = useState(-1);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const evaluateHallucination = async () => {\n      if (!search.hfToken) {\n        console.warn(\"Hugging Face token not provided. Cannot evaluate hallucination.\");\n        return;\n      }\n      setIsLoading(true);\n      try {\n        const inference = new HfInference(search.hfToken);\n        const API_URL = \"https://api-inference.huggingface.co/models/vectara/hallucination_evaluation_model\";\n        const hem = inference.endpoint(API_URL);\n\n        // Get the query from sessionStorage if available\n        const searchQuery = sessionStorage.getItem('lastQuery') || \"search query\";\n\n        // Format the input according to HHEM expectations\n        // Using the format: Premise: [document content], Hypothesis: [search query]\n        const {\n          snippet\n        } = result;\n        const premise = `${snippet.pre} ${snippet.text} ${snippet.post}`;\n        const prompt = `<pad> Determine if the hypothesis is true given the premise?\\n\\nPremise: ${premise}\\n\\nHypothesis: ${searchQuery}`;\n        const responseData = await hem.textClassification({\n          inputs: prompt\n        });\n\n        // Find the \"consistent\" label score (usually the second one)\n        let score = -1;\n        for (const labelData of responseData) {\n          if (labelData.label === \"consistent\") {\n            score = Math.round(labelData.score * 100) / 100; // Round to 2 decimal places\n            break;\n          }\n        }\n        setHallucinationScore(score);\n      } catch (error) {\n        console.error(\"Error evaluating hallucination:\", error);\n        setHallucinationScore(-1);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    evaluateHallucination();\n  }, [result, search.hfToken]);\n  const confidenceLevel = getConfidenceLevel(hallucinationScore);\n  const {\n    color,\n    label\n  } = getBadgeProps(confidenceLevel);\n  return /*#__PURE__*/_jsxDEV(VuiFlexContainer, {\n    alignItems: \"center\",\n    spacing: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(VuiFlexItem, {\n      grow: false,\n      shrink: false,\n      children: /*#__PURE__*/_jsxDEV(VuiBadge, {\n        color: color,\n        children: isLoading ? \"Evaluating...\" : label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), hallucinationScore >= 0 && !isLoading && /*#__PURE__*/_jsxDEV(VuiFlexItem, {\n      grow: false,\n      shrink: false,\n      children: /*#__PURE__*/_jsxDEV(VuiText, {\n        size: \"xs\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(VuiTextColor, {\n            color: \"subdued\",\n            children: [\"FCS: \", hallucinationScore.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultHallucinationScore, \"+SfQC/+VFZOJBO1coJfUGTdmFA4=\", false, function () {\n  return [useConfigContext];\n});\n_c = ResultHallucinationScore;\nvar _c;\n$RefreshReg$(_c, \"ResultHallucinationScore\");","map":{"version":3,"names":["useState","useEffect","VuiBadge","VuiFlexContainer","VuiFlexItem","VuiText","VuiTextColor","HfInference","useConfigContext","jsxDEV","_jsxDEV","getConfidenceLevel","score","getBadgeProps","confidenceLevel","color","label","ResultHallucinationScore","result","_s","search","hallucinationScore","setHallucinationScore","isLoading","setIsLoading","evaluateHallucination","hfToken","console","warn","inference","API_URL","hem","endpoint","searchQuery","sessionStorage","getItem","snippet","premise","pre","text","post","prompt","responseData","textClassification","inputs","labelData","Math","round","error","alignItems","spacing","children","grow","shrink","fileName","_jsxFileName","lineNumber","columnNumber","size","toFixed","_c","$RefreshReg$"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/ResultHallucinationScore.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { VuiBadge, VuiFlexContainer, VuiFlexItem, VuiText, VuiTextColor } from \"../../ui\";\nimport { SearchResultWithSnippet } from \"../types\";\nimport { HfInference } from \"@huggingface/inference\";\nimport { useConfigContext } from \"../../contexts/ConfigurationContext\";\n\n// Known confidence levels for hallucination scores\nexport type ConfidenceLevel = \"unavailable\" | \"low\" | \"medium\" | \"high\";\n\n// Map a numerical score to a confidence level\nconst getConfidenceLevel = (score: number): ConfidenceLevel => {\n  if (score < 0) {\n    return \"unavailable\";\n  }\n  if (score <= 0.33) {\n    return \"low\";\n  }\n  if (score <= 0.66) {\n    return \"medium\";\n  }\n  return \"high\";\n};\n\n// Get color and label for the badge based on confidence level\nconst getBadgeProps = (\n  confidenceLevel: ConfidenceLevel\n): { color: \"success\" | \"warning\" | \"danger\" | \"neutral\"; label: string } => {\n  switch (confidenceLevel) {\n    case \"low\":\n      return { color: \"success\", label: \"Low Risk\" };\n    case \"medium\":\n      return { color: \"warning\", label: \"Medium Risk\" };\n    case \"high\":\n      return { color: \"danger\", label: \"High Risk\" };\n    case \"unavailable\":\n    default:\n      return { color: \"neutral\", label: \"Score N/A\" };\n  }\n};\n\ninterface ResultHallucinationScoreProps {\n  result: SearchResultWithSnippet;\n}\n\nexport const ResultHallucinationScore = ({ result }: ResultHallucinationScoreProps) => {\n  const { search } = useConfigContext();\n  const [hallucinationScore, setHallucinationScore] = useState<number>(-1);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    const evaluateHallucination = async () => {\n      if (!search.hfToken) {\n        console.warn(\"Hugging Face token not provided. Cannot evaluate hallucination.\");\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        const inference = new HfInference(search.hfToken);\n        const API_URL = \"https://api-inference.huggingface.co/models/vectara/hallucination_evaluation_model\";\n        const hem = inference.endpoint(API_URL);\n\n        // Get the query from sessionStorage if available\n        const searchQuery = sessionStorage.getItem('lastQuery') || \"search query\";\n        \n        // Format the input according to HHEM expectations\n        // Using the format: Premise: [document content], Hypothesis: [search query]\n        const { snippet } = result;\n        const premise = `${snippet.pre} ${snippet.text} ${snippet.post}`;\n        const prompt = `<pad> Determine if the hypothesis is true given the premise?\\n\\nPremise: ${premise}\\n\\nHypothesis: ${searchQuery}`;\n\n        const responseData = await hem.textClassification({ inputs: prompt });\n        \n        // Find the \"consistent\" label score (usually the second one)\n        let score = -1;\n        for (const labelData of responseData) {\n          if (labelData.label === \"consistent\") {\n            score = Math.round(labelData.score * 100) / 100; // Round to 2 decimal places\n            break;\n          }\n        }\n        \n        setHallucinationScore(score);\n      } catch (error) {\n        console.error(\"Error evaluating hallucination:\", error);\n        setHallucinationScore(-1);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    evaluateHallucination();\n  }, [result, search.hfToken]);\n\n  const confidenceLevel = getConfidenceLevel(hallucinationScore);\n  const { color, label } = getBadgeProps(confidenceLevel);\n\n  return (\n    <VuiFlexContainer alignItems=\"center\" spacing=\"xs\">\n      <VuiFlexItem grow={false} shrink={false}>\n        <VuiBadge color={color}>\n          {isLoading ? \"Evaluating...\" : label}\n        </VuiBadge>\n      </VuiFlexItem>\n      {hallucinationScore >= 0 && !isLoading && (\n        <VuiFlexItem grow={false} shrink={false}>\n          <VuiText size=\"xs\">\n            <p>\n              <VuiTextColor color=\"subdued\">\n                FCS: {hallucinationScore.toFixed(2)}\n              </VuiTextColor>\n            </p>\n          </VuiText>\n        </VuiFlexItem>\n      )}\n    </VuiFlexContainer>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}