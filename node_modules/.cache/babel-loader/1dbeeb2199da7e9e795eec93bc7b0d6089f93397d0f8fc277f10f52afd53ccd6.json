{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-non-null-assertion */import{createContext,useContext,useState,useEffect,useRef}from\"react\";import{useSearchParams}from\"react-router-dom\";import{mmrRerankerId}from\"../view/types\";import{useConfigContext}from\"./ConfigurationContext\";import{addHistoryItem,deleteHistory,retrieveHistory}from\"./history\";import{streamQueryV2}from\"@vectara/stream-query-client\";import{END_TAG,START_TAG,parseSnippet}from\"../utils/parseSnippet\";import{jsx as _jsx}from\"react/jsx-runtime\";const SearchContext=/*#__PURE__*/createContext(undefined);const getQueryParam=(urlParams,key)=>{const value=urlParams.get(key);if(value)return decodeURIComponent(value);return undefined;};export const SearchContextProvider=_ref=>{let{children}=_ref;const{search,rerank,hybrid}=useConfigContext();const[searchValue,setSearchValue]=useState(\"\");const[filterValue,setFilterValue]=useState(\"\");const[searchParams,setSearchParams]=useSearchParams();// Language\nconst[languageValue,setLanguageValue]=useState();// History\nconst[history,setHistory]=useState([]);// Basic search\nconst[isSearching,setIsSearching]=useState(false);const[searchError,setSearchError]=useState();const[searchResults,setSearchResults]=useState(undefined);const[searchTime,setSearchTime]=useState(0);// Summarization\nconst[isSummarizing,setIsSummarizing]=useState(false);const[summarizationError,setSummarizationError]=useState();const[summarizationResponse,setSummarizationResponse]=useState();const[summaryTime,setSummaryTime]=useState(0);// Citation selection\nconst searchResultsRef=useRef([]);const[selectedSearchResultPosition,setSelectedSearchResultPosition]=useState();useEffect(()=>{setHistory(retrieveHistory());},[]);// Use the browser back and forward buttons to traverse history\n// of searches, and bookmark or share the URL.\nuseEffect(()=>{var _getQueryParam;// Search params are updated as part of calling onSearch, so we don't\n// want to trigger another search when the search params change if that\n// search is already in progress.\nif(isSearching)return;const urlParams=new URLSearchParams(searchParams);onSearch({// Set to an empty string to wipe out any existing search value.\nvalue:(_getQueryParam=getQueryParam(urlParams,\"query\"))!==null&&_getQueryParam!==void 0?_getQueryParam:\"\",filter:getQueryParam(urlParams,\"filter\"),language:getQueryParam(urlParams,\"language\"),isPersistable:false});// eslint-disable-next-line react-hooks/exhaustive-deps\n},[searchParams]);// TODO: Add onSearch and fix infinite render loop\nuseEffect(()=>{if(searchResults){searchResultsRef.current=searchResultsRef.current.slice(0,searchResults.length);}else{searchResultsRef.current=[];}},[searchResults]);const clearHistory=()=>{setHistory([]);deleteHistory();};const selectSearchResultAt=position=>{if(!searchResultsRef.current[position]||selectedSearchResultPosition===position){// Reset selected position.\nsetSelectedSearchResultPosition(undefined);}else{setSelectedSearchResultPosition(position);// Scroll to the selected search result.\nwindow.scrollTo({top:searchResultsRef.current[position].offsetTop-78,behavior:\"smooth\"});}};const getLanguage=()=>languageValue!==null&&languageValue!==void 0?languageValue:\"auto\";const onSearch=async _ref2=>{let{value=searchValue,filter=filterValue,language=getLanguage(),isPersistable=true}=_ref2;setSearchValue(value);setFilterValue(filter);setLanguageValue(language);setSearchError(undefined);setSummarizationError(undefined);setSummarizationResponse(undefined);if(value!==null&&value!==void 0&&value.trim()){// Store current search query in sessionStorage for hallucination evaluation\nsessionStorage.setItem('lastQuery',value);// Save to history.\nsetHistory(addHistoryItem({query:value,filter,language},history));// Persist to URL, only if the search executes. This way the prior\n// search that was persisted remains in the URL if the search doesn't execute.\nif(isPersistable){setSearchParams(new URLSearchParams(`?query=${encodeURIComponent(value)}&filter=${encodeURIComponent(filter)}&language=${encodeURIComponent(language)}`));}setIsSearching(true);setIsSummarizing(true);setSelectedSearchResultPosition(undefined);const startTime=Date.now();let resultsWithSnippets;try{const onStreamEvent=event=>{switch(event.type){case\"requestError\":case\"genericError\":case\"unexpectedError\":setSearchError({message:\"Error sending the query request\"});break;case\"error\":setSummarizationError({message:event.messages.join(\", \")});break;case\"searchResults\":setIsSearching(false);setSearchTime(Date.now()-startTime);resultsWithSnippets=event.searchResults.map(result=>{const{pre,text,post}=parseSnippet(result.text);return{...result,snippet:{pre,text,post}};});setSearchResults(resultsWithSnippets);break;case\"generationChunk\":setSummarizationResponse(event.updatedText);break;case\"generationEnd\":setIsSummarizing(false);break;case\"end\":setSummaryTime(Date.now()-startTime);break;}};const streamQueryConfig={apiKey:search.apiKey,customerId:search.customerId,query:value,corpusKey:search.corpusKey,search:{offset:0,metadataFilter:\"\",lexicalInterpolation:value.trim().split(\" \").length>hybrid.numWords?hybrid.lambdaLong:hybrid.lambdaShort,reranker:rerank.isEnabled&&rerank.id?rerank.id===mmrRerankerId?{type:\"mmr\",diversityBias:0}:{type:\"customer_reranker\",// rnk_ prefix needed for conversion from API v1 to v2.\nrerankerId:`rnk_${rerank.id.toString()}`}:undefined,contextConfiguration:{// If sentences/chars context is not displayed properly,\n// you may need to adjust the CONTEXT_MAX_LENGTH variable\n// in the components that display reference snippets.\nsentencesBefore:2,sentencesAfter:2,startTag:START_TAG,endTag:END_TAG}},chat:{store:true}};streamQueryV2({streamQueryConfig,onStreamEvent});}catch(error){console.log(\"Summary error\",error);setIsSummarizing(false);setSummarizationError(error);setSummarizationResponse(undefined);return;}}else{// Persist to URL.\nif(isPersistable)setSearchParams(new URLSearchParams(\"\"));setSearchResults(undefined);setSummarizationResponse(undefined);setIsSearching(false);setIsSummarizing(false);}};const reset=()=>{// Specifically don't reset language because that's more of a\n// user preference.\nonSearch({value:\"\",filter:\"\"});};return/*#__PURE__*/_jsx(SearchContext.Provider,{value:{filterValue,setFilterValue,searchValue,setSearchValue,onSearch,reset,isSearching,searchError,searchResults,searchTime,isSummarizing,summarizationError,summarizationResponse,summaryTime,language:getLanguage(),summaryNumResults:7,summaryNumSentences:3,summaryPromptName:\"vectara-summary-ext-v1.2.0\",history,clearHistory,searchResultsRef,selectedSearchResultPosition,selectSearchResultAt},children:children});};export const useSearchContext=()=>{const context=useContext(SearchContext);if(context===undefined){throw new Error(\"useSearchContext must be used within a SearchContextProvider\");}return context;};","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useRef","useSearchParams","mmrRerankerId","useConfigContext","addHistoryItem","deleteHistory","retrieveHistory","streamQueryV2","END_TAG","START_TAG","parseSnippet","jsx","_jsx","SearchContext","undefined","getQueryParam","urlParams","key","value","get","decodeURIComponent","SearchContextProvider","_ref","children","search","rerank","hybrid","searchValue","setSearchValue","filterValue","setFilterValue","searchParams","setSearchParams","languageValue","setLanguageValue","history","setHistory","isSearching","setIsSearching","searchError","setSearchError","searchResults","setSearchResults","searchTime","setSearchTime","isSummarizing","setIsSummarizing","summarizationError","setSummarizationError","summarizationResponse","setSummarizationResponse","summaryTime","setSummaryTime","searchResultsRef","selectedSearchResultPosition","setSelectedSearchResultPosition","_getQueryParam","URLSearchParams","onSearch","filter","language","isPersistable","current","slice","length","clearHistory","selectSearchResultAt","position","window","scrollTo","top","offsetTop","behavior","getLanguage","_ref2","trim","sessionStorage","setItem","query","encodeURIComponent","startTime","Date","now","resultsWithSnippets","onStreamEvent","event","type","message","messages","join","map","result","pre","text","post","snippet","updatedText","streamQueryConfig","apiKey","customerId","corpusKey","offset","metadataFilter","lexicalInterpolation","split","numWords","lambdaLong","lambdaShort","reranker","isEnabled","id","diversityBias","rerankerId","toString","contextConfiguration","sentencesBefore","sentencesAfter","startTag","endTag","chat","store","error","console","log","reset","Provider","summaryNumResults","summaryNumSentences","summaryPromptName","useSearchContext","context","Error"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/contexts/SearchContext.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { createContext, useContext, ReactNode, useState, useEffect, useRef } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { SearchResult, SummaryLanguage, SearchError, mmrRerankerId, SearchResultWithSnippet } from \"../view/types\";\nimport { useConfigContext } from \"./ConfigurationContext\";\nimport { HistoryItem, addHistoryItem, deleteHistory, retrieveHistory } from \"./history\";\nimport { ApiV2, streamQueryV2 } from \"@vectara/stream-query-client\";\nimport { END_TAG, START_TAG, parseSnippet } from \"../utils/parseSnippet\";\n\ninterface SearchContextType {\n  filterValue: string;\n  setFilterValue: (source: string) => void;\n  searchValue: string;\n  setSearchValue: (value: string) => void;\n  onSearch: ({\n    value,\n    filter,\n    language,\n    isPersistable\n  }: {\n    value?: string;\n    filter?: string;\n    language?: SummaryLanguage;\n    isPersistable?: boolean;\n  }) => void;\n  reset: () => void;\n  isSearching: boolean;\n  searchError: SearchError | undefined;\n  searchResults: SearchResultWithSnippet[] | undefined;\n  searchTime: number;\n  isSummarizing: boolean;\n  summarizationError: SearchError | undefined;\n  summarizationResponse: string | undefined;\n  summaryTime: number;\n  language: SummaryLanguage;\n  summaryNumResults: number;\n  summaryNumSentences: number;\n  summaryPromptName: string;\n  history: HistoryItem[];\n  clearHistory: () => void;\n  searchResultsRef: React.MutableRefObject<HTMLElement[] | null[]>;\n  selectedSearchResultPosition: number | undefined;\n  selectSearchResultAt: (position: number) => void;\n}\n\nconst SearchContext = createContext<SearchContextType | undefined>(undefined);\n\nconst getQueryParam = (urlParams: URLSearchParams, key: string) => {\n  const value = urlParams.get(key);\n  if (value) return decodeURIComponent(value);\n  return undefined;\n};\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const SearchContextProvider = ({ children }: Props) => {\n  const { search, rerank, hybrid } = useConfigContext();\n\n  const [searchValue, setSearchValue] = useState<string>(\"\");\n  const [filterValue, setFilterValue] = useState(\"\");\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Language\n  const [languageValue, setLanguageValue] = useState<SummaryLanguage>();\n\n  // History\n  const [history, setHistory] = useState<HistoryItem[]>([]);\n\n  // Basic search\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchError, setSearchError] = useState<SearchError | undefined>();\n  const [searchResults, setSearchResults] = useState<SearchResultWithSnippet[] | undefined>(undefined);\n  const [searchTime, setSearchTime] = useState<number>(0);\n\n  // Summarization\n  const [isSummarizing, setIsSummarizing] = useState(false);\n  const [summarizationError, setSummarizationError] = useState<SearchError | undefined>();\n  const [summarizationResponse, setSummarizationResponse] = useState<string>();\n  const [summaryTime, setSummaryTime] = useState<number>(0);\n\n  // Citation selection\n  const searchResultsRef = useRef<HTMLElement[] | null[]>([]);\n  const [selectedSearchResultPosition, setSelectedSearchResultPosition] = useState<number>();\n\n  useEffect(() => {\n    setHistory(retrieveHistory());\n  }, []);\n\n  // Use the browser back and forward buttons to traverse history\n  // of searches, and bookmark or share the URL.\n  useEffect(() => {\n    // Search params are updated as part of calling onSearch, so we don't\n    // want to trigger another search when the search params change if that\n    // search is already in progress.\n    if (isSearching) return;\n\n    const urlParams = new URLSearchParams(searchParams);\n\n    onSearch({\n      // Set to an empty string to wipe out any existing search value.\n      value: getQueryParam(urlParams, \"query\") ?? \"\",\n      filter: getQueryParam(urlParams, \"filter\"),\n      language: getQueryParam(urlParams, \"language\") as SummaryLanguage | undefined,\n      isPersistable: false\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchParams]); // TODO: Add onSearch and fix infinite render loop\n\n  useEffect(() => {\n    if (searchResults) {\n      searchResultsRef.current = searchResultsRef.current.slice(0, searchResults.length);\n    } else {\n      searchResultsRef.current = [];\n    }\n  }, [searchResults]);\n\n  const clearHistory = () => {\n    setHistory([]);\n    deleteHistory();\n  };\n\n  const selectSearchResultAt = (position: number) => {\n    if (!searchResultsRef.current[position] || selectedSearchResultPosition === position) {\n      // Reset selected position.\n      setSelectedSearchResultPosition(undefined);\n    } else {\n      setSelectedSearchResultPosition(position);\n      // Scroll to the selected search result.\n      window.scrollTo({\n        top: searchResultsRef.current[position]!.offsetTop - 78,\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  const getLanguage = (): SummaryLanguage => (languageValue ?? \"auto\") as SummaryLanguage;\n\n  const onSearch = async ({\n    value = searchValue,\n    filter = filterValue,\n    language = getLanguage(),\n    isPersistable = true\n  }: {\n    value?: string;\n    filter?: string;\n    language?: SummaryLanguage;\n    isPersistable?: boolean;\n  }) => {\n    setSearchValue(value);\n    setFilterValue(filter);\n    setLanguageValue(language);\n    setSearchError(undefined);\n    setSummarizationError(undefined);\n    setSummarizationResponse(undefined);\n\n    if (value?.trim()) {\n      // Store current search query in sessionStorage for hallucination evaluation\n      sessionStorage.setItem('lastQuery', value);\n\n      // Save to history.\n      setHistory(addHistoryItem({ query: value, filter, language }, history));\n\n      // Persist to URL, only if the search executes. This way the prior\n      // search that was persisted remains in the URL if the search doesn't execute.\n      if (isPersistable) {\n        setSearchParams(\n          new URLSearchParams(\n            `?query=${encodeURIComponent(value)}&filter=${encodeURIComponent(filter)}&language=${encodeURIComponent(\n              language\n            )}`\n          )\n        );\n      }\n\n      setIsSearching(true);\n      setIsSummarizing(true);\n      setSelectedSearchResultPosition(undefined);\n\n      const startTime = Date.now();\n      let resultsWithSnippets;\n\n      try {\n        const onStreamEvent = (event: ApiV2.StreamEvent) => {\n          switch (event.type) {\n            case \"requestError\":\n            case \"genericError\":\n            case \"unexpectedError\":\n              setSearchError({\n                message: \"Error sending the query request\"\n              });\n              break;\n\n            case \"error\":\n              setSummarizationError({ message: event.messages.join(\", \") });\n              break;\n\n            case \"searchResults\":\n              setIsSearching(false);\n              setSearchTime(Date.now() - startTime);\n\n              resultsWithSnippets = event.searchResults.map((result: SearchResult) => {\n                const { pre, text, post } = parseSnippet(result.text);\n\n                return {\n                  ...result,\n                  snippet: {\n                    pre,\n                    text,\n                    post\n                  }\n                };\n              });\n\n              setSearchResults(resultsWithSnippets);\n\n              break;\n\n            case \"generationChunk\":\n              setSummarizationResponse(event.updatedText);\n              break;\n\n            case \"generationEnd\":\n              setIsSummarizing(false);\n              break;\n\n            case \"end\":\n              setSummaryTime(Date.now() - startTime);\n              break;\n          }\n        };\n\n        const streamQueryConfig: ApiV2.StreamQueryConfig = {\n          apiKey: search.apiKey!,\n          customerId: search.customerId!,\n          query: value,\n          corpusKey: search.corpusKey!,\n          search: {\n            offset: 0,\n            metadataFilter: \"\",\n            lexicalInterpolation:\n              value.trim().split(\" \").length > hybrid.numWords ? hybrid.lambdaLong : hybrid.lambdaShort,\n            reranker:\n              rerank.isEnabled && rerank.id\n                ? rerank.id === mmrRerankerId\n                  ? {\n                      type: \"mmr\",\n                      diversityBias: 0\n                    }\n                  : {\n                      type: \"customer_reranker\",\n                      // rnk_ prefix needed for conversion from API v1 to v2.\n                      rerankerId: `rnk_${rerank.id.toString()}`\n                    }\n                : undefined,\n            contextConfiguration: {\n              // If sentences/chars context is not displayed properly,\n              // you may need to adjust the CONTEXT_MAX_LENGTH variable\n              // in the components that display reference snippets.\n              sentencesBefore: 2,\n              sentencesAfter: 2,\n              startTag: START_TAG,\n              endTag: END_TAG\n            }\n          },\n          chat: { store: true }\n        };\n\n        streamQueryV2({ streamQueryConfig, onStreamEvent });\n      } catch (error) {\n        console.log(\"Summary error\", error);\n        setIsSummarizing(false);\n        setSummarizationError(error as SearchError);\n        setSummarizationResponse(undefined);\n        return;\n      }\n    } else {\n      // Persist to URL.\n      if (isPersistable) setSearchParams(new URLSearchParams(\"\"));\n\n      setSearchResults(undefined);\n      setSummarizationResponse(undefined);\n      setIsSearching(false);\n      setIsSummarizing(false);\n    }\n  };\n\n  const reset = () => {\n    // Specifically don't reset language because that's more of a\n    // user preference.\n    onSearch({ value: \"\", filter: \"\" });\n  };\n\n  return (\n    <SearchContext.Provider\n      value={{\n        filterValue,\n        setFilterValue,\n        searchValue,\n        setSearchValue,\n        onSearch,\n        reset,\n        isSearching,\n        searchError,\n        searchResults,\n        searchTime,\n        isSummarizing,\n        summarizationError,\n        summarizationResponse,\n        summaryTime,\n        language: getLanguage(),\n        summaryNumResults: 7,\n        summaryNumSentences: 3,\n        summaryPromptName: \"vectara-summary-ext-v1.2.0\",\n        history,\n        clearHistory,\n        searchResultsRef,\n        selectedSearchResultPosition,\n        selectSearchResultAt\n      }}\n    >\n      {children}\n    </SearchContext.Provider>\n  );\n};\n\nexport const useSearchContext = () => {\n  const context = useContext(SearchContext);\n  if (context === undefined) {\n    throw new Error(\"useSearchContext must be used within a SearchContextProvider\");\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}