{"ast":null,"code":"var _jsxFileName = \"/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/SearchResultList.tsx\",\n  _s = $RefreshSig$();\nimport { SearchResult } from \"./SearchResult\";\nimport { useState, useEffect } from \"react\";\n\n// Import the FCS score utility\nimport { getFcsScore } from \"./ResultHallucinationScore\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SearchResultList = ({\n  results,\n  selectedSearchResultPosition,\n  setSearchResultRef\n}) => {\n  _s();\n  // State to hold sorted results\n  const [sortedResults, setSortedResults] = useState(results);\n\n  // Sort results when the input changes\n  useEffect(() => {\n    // Create a copy of results to avoid modifying the original array\n    const sortedByFcs = [...results].sort((a, b) => {\n      // Get FCS scores for both results\n      const scoreA = getFcsScore(a);\n      const scoreB = getFcsScore(b);\n\n      // Sort by FCS score descending (higher scores first)\n      // If both have valid scores, compare them\n      if (scoreA >= 0 && scoreB >= 0) {\n        return scoreB - scoreA; // Descending order (highest first)\n      }\n\n      // If only one has a valid score, prioritize the one with a score\n      if (scoreA >= 0) return -1;\n      if (scoreB >= 0) return 1;\n\n      // If neither has a valid score, keep original order based on Vectara's score\n      return b.score - a.score;\n    });\n    setSortedResults(sortedByFcs);\n  }, [results]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: sortedResults.map((result, i) => /*#__PURE__*/_jsxDEV(SearchResult, {\n      result: result,\n      position: i,\n      isSelected: selectedSearchResultPosition === i,\n      ref: el => setSearchResultRef(el, i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(SearchResultList, \"3oBukc+BF2zoSWoHTytjoVsyDn4=\");\n_c = SearchResultList;\nvar _c;\n$RefreshReg$(_c, \"SearchResultList\");","map":{"version":3,"names":["SearchResult","useState","useEffect","getFcsScore","jsxDEV","_jsxDEV","Fragment","_Fragment","SearchResultList","results","selectedSearchResultPosition","setSearchResultRef","_s","sortedResults","setSortedResults","sortedByFcs","sort","a","b","scoreA","scoreB","score","children","map","result","i","position","isSelected","ref","el","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/view/results/SearchResultList.tsx"],"sourcesContent":["import { SearchResult } from \"./SearchResult\";\nimport { SearchResultWithSnippet } from \"../types\";\nimport { useState, useEffect } from \"react\";\n\n// Import the FCS score utility\nimport { getFcsScore } from \"./ResultHallucinationScore\";\n\ntype Props = {\n  results: Array<SearchResultWithSnippet>;\n  selectedSearchResultPosition?: number;\n  setSearchResultRef: (el: HTMLDivElement | null, index: number) => void;\n};\n\nexport const SearchResultList = ({ results, selectedSearchResultPosition, setSearchResultRef }: Props) => {\n  // State to hold sorted results\n  const [sortedResults, setSortedResults] = useState<Array<SearchResultWithSnippet>>(results);\n  \n  // Sort results when the input changes\n  useEffect(() => {\n    // Create a copy of results to avoid modifying the original array\n    const sortedByFcs = [...results].sort((a, b) => {\n      // Get FCS scores for both results\n      const scoreA = getFcsScore(a);\n      const scoreB = getFcsScore(b);\n      \n      // Sort by FCS score descending (higher scores first)\n      // If both have valid scores, compare them\n      if (scoreA >= 0 && scoreB >= 0) {\n        return scoreB - scoreA; // Descending order (highest first)\n      }\n      \n      // If only one has a valid score, prioritize the one with a score\n      if (scoreA >= 0) return -1;\n      if (scoreB >= 0) return 1;\n      \n      // If neither has a valid score, keep original order based on Vectara's score\n      return b.score - a.score;\n    });\n    \n    setSortedResults(sortedByFcs);\n  }, [results]);\n\n  return (\n    <>\n      {sortedResults.map((result, i) => (\n        <SearchResult\n          key={i}\n          result={result}\n          position={i}\n          isSelected={selectedSearchResultPosition === i}\n          ref={(el: HTMLDivElement | null) => setSearchResultRef(el, i)}\n        />\n      ))}\n    </>\n  );\n};\n"],"mappings":";;AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAE7C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,SAASC,WAAW,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAQzD,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,OAAO;EAAEC,4BAA4B;EAAEC;AAA0B,CAAC,KAAK;EAAAC,EAAA;EACxG;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAiCQ,OAAO,CAAC;;EAE3F;EACAP,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,WAAW,GAAG,CAAC,GAAGN,OAAO,CAAC,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC9C;MACA,MAAMC,MAAM,GAAGhB,WAAW,CAACc,CAAC,CAAC;MAC7B,MAAMG,MAAM,GAAGjB,WAAW,CAACe,CAAC,CAAC;;MAE7B;MACA;MACA,IAAIC,MAAM,IAAI,CAAC,IAAIC,MAAM,IAAI,CAAC,EAAE;QAC9B,OAAOA,MAAM,GAAGD,MAAM,CAAC,CAAC;MAC1B;;MAEA;MACA,IAAIA,MAAM,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;MAC1B,IAAIC,MAAM,IAAI,CAAC,EAAE,OAAO,CAAC;;MAEzB;MACA,OAAOF,CAAC,CAACG,KAAK,GAAGJ,CAAC,CAACI,KAAK;IAC1B,CAAC,CAAC;IAEFP,gBAAgB,CAACC,WAAW,CAAC;EAC/B,CAAC,EAAE,CAACN,OAAO,CAAC,CAAC;EAEb,oBACEJ,OAAA,CAAAE,SAAA;IAAAe,QAAA,EACGT,aAAa,CAACU,GAAG,CAAC,CAACC,MAAM,EAAEC,CAAC,kBAC3BpB,OAAA,CAACL,YAAY;MAEXwB,MAAM,EAAEA,MAAO;MACfE,QAAQ,EAAED,CAAE;MACZE,UAAU,EAAEjB,4BAA4B,KAAKe,CAAE;MAC/CG,GAAG,EAAGC,EAAyB,IAAKlB,kBAAkB,CAACkB,EAAE,EAAEJ,CAAC;IAAE,GAJzDA,CAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKP,CACF;EAAC,gBACF,CAAC;AAEP,CAAC;AAACrB,EAAA,CA1CWJ,gBAAgB;AAAA0B,EAAA,GAAhB1B,gBAAgB;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}