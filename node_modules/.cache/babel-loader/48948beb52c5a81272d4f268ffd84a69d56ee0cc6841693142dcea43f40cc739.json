{"ast":null,"code":"export const sanitizeCitations=summary=>{if(!summary)return summary;// Match citations.\nconst regex=/\\[(\\d+(,*\\s*\\d*)*)\\]/g;const parts=[];let match;let lastIndex=0;// Parse all cited content.\nwhile((match=regex.exec(summary))!==null){const index=match.index;const reference=match[1];const text=summary.slice(lastIndex,index);// Handle citations that are in the form of [1, 2, 3] or [1,2,3]\n// so normalize to the latter.\nparts.push(text);parts.push(reference.replace(/\\s/g,\"\").split(\",\").map(citation=>`[${citation}]`).join(\"\"));lastIndex=index+match[0].length;}// Add the remaining content after the last citation.\nconst text=summary.slice(lastIndex);if(text.length>0){parts.push(text);}return parts.join(\"\");};","map":{"version":3,"names":["sanitizeCitations","summary","regex","parts","match","lastIndex","exec","index","reference","text","slice","push","replace","split","map","citation","join","length"],"sources":["/Users/syedali/POC/Create UI Threadneedle/columbia-threadneedle-demo/src/ui/utils/citations/sanitizeCitations.ts"],"sourcesContent":["export const sanitizeCitations = (summary?: string) => {\n  if (!summary) return summary;\n\n  // Match citations.\n  const regex = /\\[(\\d+(,*\\s*\\d*)*)\\]/g;\n\n  const parts: Array<string> = [];\n\n  let match;\n  let lastIndex = 0;\n\n  // Parse all cited content.\n  while ((match = regex.exec(summary)) !== null) {\n    const index = match.index;\n    const reference = match[1];\n    const text = summary.slice(lastIndex, index);\n    // Handle citations that are in the form of [1, 2, 3] or [1,2,3]\n    // so normalize to the latter.\n    parts.push(text);\n    parts.push(\n      reference\n        .replace(/\\s/g, \"\")\n        .split(\",\")\n        .map((citation) => `[${citation}]`)\n        .join(\"\")\n    );\n    lastIndex = index + match[0].length;\n  }\n\n  // Add the remaining content after the last citation.\n  const text = summary.slice(lastIndex);\n  if (text.length > 0) {\n    parts.push(text);\n  }\n\n  return parts.join(\"\");\n};\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,iBAAiB,CAAIC,OAAgB,EAAK,CACrD,GAAI,CAACA,OAAO,CAAE,MAAO,CAAAA,OAAO,CAE5B;AACA,KAAM,CAAAC,KAAK,CAAG,uBAAuB,CAErC,KAAM,CAAAC,KAAoB,CAAG,EAAE,CAE/B,GAAI,CAAAC,KAAK,CACT,GAAI,CAAAC,SAAS,CAAG,CAAC,CAEjB;AACA,MAAO,CAACD,KAAK,CAAGF,KAAK,CAACI,IAAI,CAACL,OAAO,CAAC,IAAM,IAAI,CAAE,CAC7C,KAAM,CAAAM,KAAK,CAAGH,KAAK,CAACG,KAAK,CACzB,KAAM,CAAAC,SAAS,CAAGJ,KAAK,CAAC,CAAC,CAAC,CAC1B,KAAM,CAAAK,IAAI,CAAGR,OAAO,CAACS,KAAK,CAACL,SAAS,CAAEE,KAAK,CAAC,CAC5C;AACA;AACAJ,KAAK,CAACQ,IAAI,CAACF,IAAI,CAAC,CAChBN,KAAK,CAACQ,IAAI,CACRH,SAAS,CACNI,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAClBC,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,QAAQ,EAAK,IAAIA,QAAQ,GAAG,CAAC,CAClCC,IAAI,CAAC,EAAE,CACZ,CAAC,CACDX,SAAS,CAAGE,KAAK,CAAGH,KAAK,CAAC,CAAC,CAAC,CAACa,MAAM,CACrC,CAEA;AACA,KAAM,CAAAR,IAAI,CAAGR,OAAO,CAACS,KAAK,CAACL,SAAS,CAAC,CACrC,GAAII,IAAI,CAACQ,MAAM,CAAG,CAAC,CAAE,CACnBd,KAAK,CAACQ,IAAI,CAACF,IAAI,CAAC,CAClB,CAEA,MAAO,CAAAN,KAAK,CAACa,IAAI,CAAC,EAAE,CAAC,CACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}