import { SummaryLanguage } from "../common/types";
export declare namespace Query {
    type NoneReranker = {
        type: "none";
    };
    type CustomerSpecificReranker = {
        type: "customer_reranker";
        reranker_id: string;
    };
    type MmrReranker = {
        type: "mmr";
        diversity_bias: number;
    };
    type SearchConfiguration = {
        corpora: {
            corpus_key: string;
            metadata_filter?: string;
            lexical_interpolation?: number;
            custom_dimensions?: Record<string, number>;
            semantics?: "default" | "query" | "response";
        }[];
        offset: number;
        limit?: number;
        context_configuration?: {
            characters_before?: number;
            characters_after?: number;
            sentences_before?: number;
            sentences_after?: number;
            start_tag?: string;
            end_tag?: string;
        };
        reranker?: NoneReranker | CustomerSpecificReranker | MmrReranker;
    };
    type NoneCitations = {
        style: "none";
    };
    type NumericCitations = {
        style: "numeric";
    };
    type HtmlCitations = {
        style: "html";
        url_pattern: string;
        text_pattern: string;
    };
    type MarkdownCitations = {
        style: "markdown";
        url_pattern: string;
        text_pattern: string;
    };
    type GenerationConfiguration = {
        prompt_name?: string;
        max_used_search_results?: number;
        prompt_text?: string;
        max_response_characters?: number;
        response_language?: SummaryLanguage;
        model_parameters?: {
            max_tokens: number;
            temperature: number;
            frequency_penalty: number;
            presence_penalty: number;
        };
        citations?: NoneCitations | NumericCitations | HtmlCitations | MarkdownCitations;
        enable_factual_consistency_score?: boolean;
    };
    type ChatConfiguration = {
        store?: boolean;
        conversation_id?: string;
    };
    type Body = {
        query: string;
        search: SearchConfiguration;
        stream_response?: boolean;
        generation?: GenerationConfiguration;
        chat?: ChatConfiguration;
    };
    type SearchResult = {
        document_id: string;
        text: string;
        score: number;
        part_metadata: {
            lang: string;
            section: number;
            offset: number;
            len: number;
        };
        document_metadata: Record<string, any>;
    };
}
