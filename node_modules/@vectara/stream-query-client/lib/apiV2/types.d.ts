import { SummaryLanguage } from "../common/types";
import { Query } from "./apiTypes";
export type { Query } from "./apiTypes";
export type GenerationConfig = {
    promptName?: string;
    maxUsedSearchResults?: number;
    promptText?: string;
    maxResponseCharacters?: number;
    responseLanguage?: SummaryLanguage;
    modelParameters?: {
        maxTokens: number;
        temperature: number;
        frequencyPenalty: number;
        presencePenalty: number;
    };
    citations?: {
        style: "none" | "numeric";
    } | {
        style: "html" | "markdown";
        urlPattern: string;
        textPattern: string;
    };
    enableFactualConsistencyScore?: boolean;
};
export type StreamQueryConfig = {
    customerId: string;
    apiKey?: string;
    authToken?: string;
    domain?: string;
    query: string;
    corpusKey: string;
    search: {
        metadataFilter: string;
        lexicalInterpolation?: number;
        customDimensions?: Record<string, number>;
        semantics?: "default" | "query" | "response";
        offset: number;
        limit?: number;
        contextConfiguration?: {
            charactersBefore?: number;
            charactersAfter?: number;
            sentencesBefore?: number;
            sentencesAfter?: number;
            startTag?: string;
            endTag?: string;
        };
        reranker?: {
            type: "none";
        } | {
            type: "customer_reranker";
            rerankerId: string;
        } | {
            type: "mmr";
            diversityBias: number;
        };
    };
    generation?: GenerationConfig;
    chat?: {
        store?: boolean;
        conversationId?: string;
    };
};
export type StreamQueryRequestHeaders = {
    ["customer-id"]: string;
    ["Content-Type"]: string;
    ["x-api-key"]?: string;
    ["Authorization"]?: string;
};
export type StreamQueryRequest = {
    method: string;
    url: string;
    headers: StreamQueryRequestHeaders;
    body: Query.Body;
};
export type StreamEvent = ErrorEvent | SearchResultsEvent | ChatInfoEvent | GenerationChunkEvent | GenerationInfoEvent | GenerationEndEvent | FactualConsistencyScoreEvent | EndEvent | UnexpectedEvent | RequestErrorEvent | GenericErrorEvent | UnexpectedErrorEvent;
type BaseEvent = {
    raw?: any;
};
export type ErrorEvent = BaseEvent & {
    type: "error";
    messages: string[];
};
export type SearchResultsEvent = BaseEvent & {
    type: "searchResults";
    searchResults: Query.SearchResult[];
};
export type ChatInfoEvent = BaseEvent & {
    type: "chatInfo";
    chatId: string;
    turnId: string;
};
export type GenerationChunkEvent = BaseEvent & {
    type: "generationChunk";
    updatedText: string;
    generationChunk: string;
};
export type GenerationInfoEvent = BaseEvent & {
    type: "generationInfo";
    renderedPrompt?: string;
    rephrasedQuery?: string;
};
export type GenerationEndEvent = BaseEvent & {
    type: "generationEnd";
};
export type FactualConsistencyScoreEvent = BaseEvent & {
    type: "factualConsistencyScore";
    factualConsistencyScore: number;
};
export type EndEvent = BaseEvent & {
    type: "end";
};
export type UnexpectedEvent = {
    type: "unexpectedEvent";
    rawType: string;
    raw: any;
};
export type RequestErrorEvent = {
    type: "requestError";
    status: number;
    raw: any;
};
export type GenericErrorEvent = {
    type: "genericError";
    error: Error;
};
export type UnexpectedErrorEvent = {
    type: "unexpectedError";
    raw: any;
};
export type StreamEventHandler = (event: StreamEvent) => void;
